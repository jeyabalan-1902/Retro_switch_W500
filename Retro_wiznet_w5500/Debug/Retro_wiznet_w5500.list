
Retro_wiznet_w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dba0  0800dba0  0000f130  2**0
                  CONTENTS
  4 .ARM          00000008  0800dba0  0800dba0  0000eba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dba8  0800dba8  0000f130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dba8  0800dba8  0000eba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbac  0800dbac  0000ebac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800dbb0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005838  20000130  0800dce0  0000f130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005968  0800dce0  0000f968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002095e  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052cb  00000000  00000000  0002fabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00034d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c5  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000661e  00000000  00000000  00038165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ec6  00000000  00000000  0003e783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1184  00000000  00000000  0005f649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001007cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008330  00000000  00000000  00100810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00108b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000130 	.word	0x20000130
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d328 	.word	0x0800d328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000134 	.word	0x20000134
 80001dc:	0800d328 	.word	0x0800d328

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b092      	sub	sp, #72	@ 0x48
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f006 fe59 	bl	800723c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f861 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f929 	bl	80007e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000592:	f000 f8c7 	bl	8000724 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8fb 	bl	8000790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Sys Init\r\n");
 800059a:	4823      	ldr	r0, [pc, #140]	@ (8000628 <main+0xa8>)
 800059c:	f00b fde6 	bl	800c16c <puts>
  //printf("w5500initialized\n\r");
  InitializeW5500();
 80005a0:	f000 f98e 	bl	80008c0 <InitializeW5500>
  printf("w5500initialized\n\r");
 80005a4:	4821      	ldr	r0, [pc, #132]	@ (800062c <main+0xac>)
 80005a6:	f00b fd79 	bl	800c09c <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f008 fd1b 	bl	8008fe4 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  switchEventQueueHandle = osMessageQueueNew(SWITCH_EVENT_QUEUE_SIZE, sizeof(uint8_t), NULL);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2101      	movs	r1, #1
 80005b2:	2014      	movs	r0, #20
 80005b4:	f008 fe0d 	bl	80091d2 <osMessageQueueNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000630 <main+0xb0>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005be:	4a1d      	ldr	r2, [pc, #116]	@ (8000634 <main+0xb4>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	481d      	ldr	r0, [pc, #116]	@ (8000638 <main+0xb8>)
 80005c4:	f008 fd58 	bl	8009078 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <main+0xbc>)
 80005cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  osThreadNew(Task_SwitchHandler, NULL, &(osThreadAttr_t){
 80005ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d2:	2224      	movs	r2, #36	@ 0x24
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00b fedc 	bl	800c394 <memset>
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <main+0xc0>)
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
 80005e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80005e6:	2303      	movs	r3, #3
 80005e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ee:	461a      	mov	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	4814      	ldr	r0, [pc, #80]	@ (8000644 <main+0xc4>)
 80005f4:	f008 fd40 	bl	8009078 <osThreadNew>
  	  .name = "SwitchTask",
  	  .priority = (osPriority_t)SWITCH_TASK_PRIORITY,
  	  .stack_size = SWITCH_TASK_STACK_SIZE
    });

	osThreadNew(Task_MQTTHandler, NULL, &(osThreadAttr_t){
 80005f8:	463b      	mov	r3, r7
 80005fa:	2224      	movs	r2, #36	@ 0x24
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00b fec8 	bl	800c394 <memset>
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <main+0xc8>)
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	463b      	mov	r3, r7
 8000614:	461a      	mov	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <main+0xcc>)
 800061a:	f008 fd2d 	bl	8009078 <osThreadNew>
	});
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f008 fd05 	bl	800902c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0xa2>
 8000626:	bf00      	nop
 8000628:	0800d370 	.word	0x0800d370
 800062c:	0800d37c 	.word	0x0800d37c
 8000630:	200001f0 	.word	0x200001f0
 8000634:	0800db30 	.word	0x0800db30
 8000638:	08000f35 	.word	0x08000f35
 800063c:	200001ec 	.word	0x200001ec
 8000640:	0800d390 	.word	0x0800d390
 8000644:	08000901 	.word	0x08000901
 8000648:	0800d39c 	.word	0x0800d39c
 800064c:	080009bd 	.word	0x080009bd

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00b fe98 	bl	800c394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a20      	ldr	r2, [pc, #128]	@ (8000720 <SystemClock_Config+0xd0>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006c8:	2340      	movs	r3, #64	@ 0x40
 80006ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f007 f8ad 	bl	8007838 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 fc56 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f007 fb10 	bl	8007d28 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 fc41 	bl	8000f94 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_SPI1_Init+0x64>)
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <MX_SPI1_Init+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000754:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000770:	220a      	movs	r2, #10
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	@ (8000788 <MX_SPI1_Init+0x64>)
 8000776:	f007 fce9 	bl	800814c <HAL_SPI_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000780:	f000 fc08 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000014c 	.word	0x2000014c
 800078c:	40013000 	.word	0x40013000

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f007 ffbc 	bl	8008744 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 fbdf 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001a4 	.word	0x200001a4
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a2b      	ldr	r2, [pc, #172]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a24      	ldr	r2, [pc, #144]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a1d      	ldr	r2, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_GPIO_Init+0xcc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2103      	movs	r1, #3
 8000852:	4818      	ldr	r0, [pc, #96]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000854:	f006 ffd6 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_CS_Pin;
 8000858:	2303      	movs	r3, #3
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_GPIO_Init+0xd0>)
 8000870:	f006 fe2c 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH3_Pin SWITCH2_Pin SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH3_Pin|SWITCH2_Pin|SWITCH1_Pin;
 8000874:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087e:	2302      	movs	r3, #2
 8000880:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <MX_GPIO_Init+0xd4>)
 800088a:	f006 fe1f 	bl	80074cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH4_Pin */
  GPIO_InitStruct.Pin = SWITCH4_Pin;
 800088e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWITCH4_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <MX_GPIO_Init+0xd8>)
 80008a4:	f006 fe12 	bl	80074cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020400 	.word	0x40020400

080008c0 <InitializeW5500>:

/* USER CODE BEGIN 4 */
void InitializeW5500(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	printf("enters on w5500\r\n");
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <InitializeW5500+0x3c>)
 80008c8:	f00b fc50 	bl	800c16c <puts>
	W5500Init();
 80008cc:	f005 fe44 	bl	8006558 <W5500Init>
	wiz_PhyConf phyconf;

	phyconf.by=PHY_CONFBY_SW;
 80008d0:	2301      	movs	r3, #1
 80008d2:	713b      	strb	r3, [r7, #4]
	phyconf.duplex=PHY_DUPLEX_FULL;
 80008d4:	2301      	movs	r3, #1
 80008d6:	71fb      	strb	r3, [r7, #7]
	phyconf.speed=PHY_SPEED_10;
 80008d8:	2300      	movs	r3, #0
 80008da:	71bb      	strb	r3, [r7, #6]
	phyconf.mode=PHY_MODE_AUTONEGO;//best to go with auto-negotiation
 80008dc:	2301      	movs	r3, #1
 80008de:	717b      	strb	r3, [r7, #5]

	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4619      	mov	r1, r3
 80008e4:	200a      	movs	r0, #10
 80008e6:	f005 ffb9 	bl	800685c <ctlwizchip>

	PHYStatusCheck();
 80008ea:	f000 fa11 	bl	8000d10 <PHYStatusCheck>
	PrintPHYConf();
 80008ee:	f000 fa35 	bl	8000d5c <PrintPHYConf>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	0800d3a8 	.word	0x0800d3a8

08000900 <Task_SwitchHandler>:

void Task_SwitchHandler(void *argument) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    uint8_t detected_switch_id = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	75fb      	strb	r3, [r7, #23]
    uint8_t prev_SwitchState[] = {HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin), HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin),
 800090c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000910:	4826      	ldr	r0, [pc, #152]	@ (80009ac <Task_SwitchHandler+0xac>)
 8000912:	f006 ff5f 	bl	80077d4 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	743b      	strb	r3, [r7, #16]
 800091a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800091e:	4823      	ldr	r0, [pc, #140]	@ (80009ac <Task_SwitchHandler+0xac>)
 8000920:	f006 ff58 	bl	80077d4 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	747b      	strb	r3, [r7, #17]
    		HAL_GPIO_ReadPin(SWITCH3_GPIO_Port, SWITCH3_Pin),HAL_GPIO_ReadPin(SWITCH4_GPIO_Port, SWITCH4_Pin)};
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	4820      	ldr	r0, [pc, #128]	@ (80009ac <Task_SwitchHandler+0xac>)
 800092c:	f006 ff52 	bl	80077d4 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
    uint8_t prev_SwitchState[] = {HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin), HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin),
 8000932:	74bb      	strb	r3, [r7, #18]
    		HAL_GPIO_ReadPin(SWITCH3_GPIO_Port, SWITCH3_Pin),HAL_GPIO_ReadPin(SWITCH4_GPIO_Port, SWITCH4_Pin)};
 8000934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000938:	481d      	ldr	r0, [pc, #116]	@ (80009b0 <Task_SwitchHandler+0xb0>)
 800093a:	f006 ff4b 	bl	80077d4 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
    uint8_t prev_SwitchState[] = {HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin), HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin),
 8000940:	74fb      	strb	r3, [r7, #19]
	uint8_t Switch_CurrentState[4];
    while (1)
    {
    	Switch_CurrentState[0] = HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin);
 8000942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000946:	4819      	ldr	r0, [pc, #100]	@ (80009ac <Task_SwitchHandler+0xac>)
 8000948:	f006 ff44 	bl	80077d4 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	733b      	strb	r3, [r7, #12]
		if (Switch_CurrentState[0] != prev_SwitchState[0])
 8000950:	7b3a      	ldrb	r2, [r7, #12]
 8000952:	7c3b      	ldrb	r3, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d003      	beq.n	8000960 <Task_SwitchHandler+0x60>
		{
			detected_switch_id = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	75fb      	strb	r3, [r7, #23]
			prev_SwitchState[0] = Switch_CurrentState[0];
 800095c:	7b3b      	ldrb	r3, [r7, #12]
 800095e:	743b      	strb	r3, [r7, #16]
		}

        if (detected_switch_id != 0) {
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d01d      	beq.n	80009a2 <Task_SwitchHandler+0xa2>
            if (osMessageQueuePut(switchEventQueueHandle, &detected_switch_id, 0, 0) != osOK) {
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <Task_SwitchHandler+0xb4>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	f107 0117 	add.w	r1, r7, #23
 800096e:	2300      	movs	r3, #0
 8000970:	2200      	movs	r2, #0
 8000972:	f008 fca1 	bl	80092b8 <osMessageQueuePut>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d010      	beq.n	800099e <Task_SwitchHandler+0x9e>
            	osDelay(10);
 800097c:	200a      	movs	r0, #10
 800097e:	f008 fc0d 	bl	800919c <osDelay>
				if (osMessageQueuePut(switchEventQueueHandle, &detected_switch_id, 0, 0) != osOK) {
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <Task_SwitchHandler+0xb4>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	f107 0117 	add.w	r1, r7, #23
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	f008 fc93 	bl	80092b8 <osMessageQueuePut>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <Task_SwitchHandler+0x9e>
					printf("Queue full after retry. Dropping switch event.\r\n");
 8000998:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <Task_SwitchHandler+0xb8>)
 800099a:	f00b fbe7 	bl	800c16c <puts>
				}
            }
            detected_switch_id = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	75fb      	strb	r3, [r7, #23]
        }

        osDelay(10);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f008 fbfa 	bl	800919c <osDelay>
    	Switch_CurrentState[0] = HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin);
 80009a8:	e7cb      	b.n	8000942 <Task_SwitchHandler+0x42>
 80009aa:	bf00      	nop
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	200001f0 	.word	0x200001f0
 80009b8:	0800d3bc 	.word	0x0800d3bc

080009bc <Task_MQTTHandler>:
    }
}

void Task_MQTTHandler(void *argument)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b097      	sub	sp, #92	@ 0x5c
 80009c0:	af04      	add	r7, sp, #16
 80009c2:	6078      	str	r0, [r7, #4]
    uint8_t mqtt_connected = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t result;
    uint8_t remote_host_ip[4];

    DHCP_init(SOCKET_ID_FOR_DHCP, dhcp_buffer);
 80009ca:	49ab      	ldr	r1, [pc, #684]	@ (8000c78 <Task_MQTTHandler+0x2bc>)
 80009cc:	2007      	movs	r0, #7
 80009ce:	f002 f843 	bl	8002a58 <DHCP_init>
	reg_dhcp_cbfunc(OnDHCPIPAssigned, NULL, NULL);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	48a9      	ldr	r0, [pc, #676]	@ (8000c7c <Task_MQTTHandler+0x2c0>)
 80009d8:	f000 fd32 	bl	8001440 <reg_dhcp_cbfunc>
	printf("Obtaining IP address ...\r\n");
 80009dc:	48a8      	ldr	r0, [pc, #672]	@ (8000c80 <Task_MQTTHandler+0x2c4>)
 80009de:	f00b fbc5 	bl	800c16c <puts>
	//MQTT Client Part
	connect_data.willFlag = 0;
 80009e2:	4ba8      	ldr	r3, [pc, #672]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	76da      	strb	r2, [r3, #27]
	connect_data.MQTTVersion = 4;
 80009e8:	4ba6      	ldr	r3, [pc, #664]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	721a      	strb	r2, [r3, #8]
	connect_data.clientID.cstring = "testw5500";
 80009ee:	4ba5      	ldr	r3, [pc, #660]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 80009f0:	4aa5      	ldr	r2, [pc, #660]	@ (8000c88 <Task_MQTTHandler+0x2cc>)
 80009f2:	60da      	str	r2, [r3, #12]
	connect_data.username.cstring = "Nikhil";
 80009f4:	4ba3      	ldr	r3, [pc, #652]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 80009f6:	4aa5      	ldr	r2, [pc, #660]	@ (8000c8c <Task_MQTTHandler+0x2d0>)
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40
	connect_data.password.cstring = "Nikhil8182";
 80009fa:	4ba2      	ldr	r3, [pc, #648]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 80009fc:	4aa4      	ldr	r2, [pc, #656]	@ (8000c90 <Task_MQTTHandler+0x2d4>)
 80009fe:	64da      	str	r2, [r3, #76]	@ 0x4c

	connect_data.keepAliveInterval = 60;//seconds
 8000a00:	4ba0      	ldr	r3, [pc, #640]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 8000a02:	223c      	movs	r2, #60	@ 0x3c
 8000a04:	831a      	strh	r2, [r3, #24]
	connect_data.cleansession = 1;
 8000a06:	4b9f      	ldr	r3, [pc, #636]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	769a      	strb	r2, [r3, #26]

	NewNetwork(&network, 1);//1 is the socket number to use
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	48a1      	ldr	r0, [pc, #644]	@ (8000c94 <Task_MQTTHandler+0x2d8>)
 8000a10:	f003 fc14 	bl	800423c <NewNetwork>
	DNS_init(SOCKET_ID_FOR_DNS, dns_buffer);
 8000a14:	49a0      	ldr	r1, [pc, #640]	@ (8000c98 <Task_MQTTHandler+0x2dc>)
 8000a16:	2006      	movs	r0, #6
 8000a18:	f002 fd0c 	bl	8003434 <DNS_init>

    while(StateChangeFlag == false)
 8000a1c:	e001      	b.n	8000a22 <Task_MQTTHandler+0x66>
   	{
   	  DHCP_run();
 8000a1e:	f001 fe2b 	bl	8002678 <DHCP_run>
    while(StateChangeFlag == false)
 8000a22:	4b9e      	ldr	r3, [pc, #632]	@ (8000c9c <Task_MQTTHandler+0x2e0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f083 0301 	eor.w	r3, r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f6      	bne.n	8000a1e <Task_MQTTHandler+0x62>
   	}


    printf("Resolving hostname: %s\n", remote_host);
 8000a30:	4b9b      	ldr	r3, [pc, #620]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	489b      	ldr	r0, [pc, #620]	@ (8000ca4 <Task_MQTTHandler+0x2e8>)
 8000a38:	f00b fb30 	bl	800c09c <iprintf>
	result = DNS_run(gWIZNETINFO.dns, (uint8_t *)remote_host, remote_host_ip);
 8000a3c:	4b98      	ldr	r3, [pc, #608]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000a44:	4619      	mov	r1, r3
 8000a46:	4898      	ldr	r0, [pc, #608]	@ (8000ca8 <Task_MQTTHandler+0x2ec>)
 8000a48:	f002 fd10 	bl	800346c <DNS_run>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	if (result != 1)
 8000a52:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d007      	beq.n	8000a6a <Task_MQTTHandler+0xae>
	{
	   printf("DNS resolution failed for hostname: %s\n", remote_host);
 8000a5a:	4b91      	ldr	r3, [pc, #580]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4892      	ldr	r0, [pc, #584]	@ (8000cac <Task_MQTTHandler+0x2f0>)
 8000a62:	f00b fb1b 	bl	800c09c <iprintf>
	   while (1);
 8000a66:	bf00      	nop
 8000a68:	e7fd      	b.n	8000a66 <Task_MQTTHandler+0xaa>
	}

	printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000a6c:	6819      	ldr	r1, [r3, #0]
		  remote_host, remote_host_ip[0], remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000a6e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
	printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000a72:	4618      	mov	r0, r3
		  remote_host, remote_host_ip[0], remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000a74:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
	printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000a78:	461c      	mov	r4, r3
		  remote_host, remote_host_ip[0], remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000a7a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000a7e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
	printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000a82:	9201      	str	r2, [sp, #4]
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	4623      	mov	r3, r4
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4889      	ldr	r0, [pc, #548]	@ (8000cb0 <Task_MQTTHandler+0x2f4>)
 8000a8c:	f00b fb06 	bl	800c09c <iprintf>

	if (ConnectNetwork(&network, remote_host_ip, destination_port) != SOCK_OK)
 8000a90:	4b88      	ldr	r3, [pc, #544]	@ (8000cb4 <Task_MQTTHandler+0x2f8>)
 8000a92:	881a      	ldrh	r2, [r3, #0]
 8000a94:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a98:	4619      	mov	r1, r3
 8000a9a:	487e      	ldr	r0, [pc, #504]	@ (8000c94 <Task_MQTTHandler+0x2d8>)
 8000a9c:	f003 fc4b 	bl	8004336 <ConnectNetwork>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d004      	beq.n	8000ab0 <Task_MQTTHandler+0xf4>
	{
	   printf("Failed to connect to MQTT broker.\n");
 8000aa6:	4884      	ldr	r0, [pc, #528]	@ (8000cb8 <Task_MQTTHandler+0x2fc>)
 8000aa8:	f00b fb60 	bl	800c16c <puts>
	   while (1);
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Task_MQTTHandler+0xf0>
	}

	printf("Connected to MQTT broker.\n");
 8000ab0:	4882      	ldr	r0, [pc, #520]	@ (8000cbc <Task_MQTTHandler+0x300>)
 8000ab2:	f00b fb5b 	bl	800c16c <puts>

	MQTTClientInit(&mqtt_client, &network, 1000, sendbuff, sizeof(sendbuff), receivebuff, sizeof(receivebuff));
 8000ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	4b80      	ldr	r3, [pc, #512]	@ (8000cc0 <Task_MQTTHandler+0x304>)
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8000cc4 <Task_MQTTHandler+0x308>)
 8000ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000acc:	4971      	ldr	r1, [pc, #452]	@ (8000c94 <Task_MQTTHandler+0x2d8>)
 8000ace:	487e      	ldr	r0, [pc, #504]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000ad0:	f002 fe1a 	bl	8003708 <MQTTClientInit>
	connect_data.keepAliveInterval = 120;
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 8000ad6:	2278      	movs	r2, #120	@ 0x78
 8000ad8:	831a      	strh	r2, [r3, #24]

	if (MQTTConnect(&mqtt_client, &connect_data) != MQTT_SUCCESS)
 8000ada:	496a      	ldr	r1, [pc, #424]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 8000adc:	487a      	ldr	r0, [pc, #488]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000ade:	f003 fa61 	bl	8003fa4 <MQTTConnect>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d004      	beq.n	8000af2 <Task_MQTTHandler+0x136>
	{
	   printf("MQTT connection failed.\n");
 8000ae8:	4878      	ldr	r0, [pc, #480]	@ (8000ccc <Task_MQTTHandler+0x310>)
 8000aea:	f00b fb3f 	bl	800c16c <puts>
	   while (1);
 8000aee:	bf00      	nop
 8000af0:	e7fd      	b.n	8000aee <Task_MQTTHandler+0x132>
	}
    mqtt_connected = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    printf("MQTT connection established.\n");
 8000af8:	4875      	ldr	r0, [pc, #468]	@ (8000cd0 <Task_MQTTHandler+0x314>)
 8000afa:	f00b fb37 	bl	800c16c <puts>

    while (1) {
            if (mqtt_connected)
 8000afe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d051      	beq.n	8000baa <Task_MQTTHandler+0x1ee>
            {
                if (!MQTTIsConnected(&mqtt_client))
 8000b06:	4870      	ldr	r0, [pc, #448]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000b08:	f003 f98b 	bl	8003e22 <MQTTIsConnected>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d106      	bne.n	8000b20 <Task_MQTTHandler+0x164>
                {
                    printf("MQTT connection lost. Attempting to reconnect...\n");
 8000b12:	4870      	ldr	r0, [pc, #448]	@ (8000cd4 <Task_MQTTHandler+0x318>)
 8000b14:	f00b fb2a 	bl	800c16c <puts>
                    mqtt_connected = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000b1e:	e044      	b.n	8000baa <Task_MQTTHandler+0x1ee>
                }
                else
                {
                	uint8_t switch_event;
					if (osMessageQueueGet(switchEventQueueHandle, &switch_event, NULL, 0) == osOK)
 8000b20:	4b6d      	ldr	r3, [pc, #436]	@ (8000cd8 <Task_MQTTHandler+0x31c>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f008 fc24 	bl	8009378 <osMessageQueueGet>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d135      	bne.n	8000ba2 <Task_MQTTHandler+0x1e6>
					{
					   char message[32];
					   snprintf(message, sizeof(message), "switch %d detected", switch_event);
 8000b36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b3a:	f107 000c 	add.w	r0, r7, #12
 8000b3e:	4a67      	ldr	r2, [pc, #412]	@ (8000cdc <Task_MQTTHandler+0x320>)
 8000b40:	2120      	movs	r1, #32
 8000b42:	f00b fb1b 	bl	800c17c <sniprintf>

					   MQTTMessage mqtt_message = {
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b58:	2300      	movs	r3, #0
 8000b5a:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
						   .qos = QOS0,
						   .retained = 0,
						   .dup = 0,
						   .id = 0,
						   .payload = message,
						   .payloadlen = strlen(message)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fb3a 	bl	80001e0 <strlen>
 8000b6c:	4603      	mov	r3, r0
					   MQTTMessage mqtt_message = {
 8000b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
					   };

					   if (MQTTPublish(&mqtt_client, "onwords/wired002/status", &mqtt_message) == MQTT_SUCCESS)
 8000b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b74:	461a      	mov	r2, r3
 8000b76:	495a      	ldr	r1, [pc, #360]	@ (8000ce0 <Task_MQTTHandler+0x324>)
 8000b78:	4853      	ldr	r0, [pc, #332]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000b7a:	f003 fa24 	bl	8003fc6 <MQTTPublish>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <Task_MQTTHandler+0x1d6>
					   {
						   printf("Published: %s\n", message);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4856      	ldr	r0, [pc, #344]	@ (8000ce4 <Task_MQTTHandler+0x328>)
 8000b8c:	f00b fa86 	bl	800c09c <iprintf>
 8000b90:	e002      	b.n	8000b98 <Task_MQTTHandler+0x1dc>
					   } else
					   {
						   printf("MQTT publish failed.\n");
 8000b92:	4855      	ldr	r0, [pc, #340]	@ (8000ce8 <Task_MQTTHandler+0x32c>)
 8000b94:	f00b faea 	bl	800c16c <puts>
					   }
					   FlushQueue(switchEventQueueHandle);
 8000b98:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd8 <Task_MQTTHandler+0x31c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f9ad 	bl	8000efc <FlushQueue>
					}
					 MQTTYield(&mqtt_client, 100);
 8000ba2:	2164      	movs	r1, #100	@ 0x64
 8000ba4:	4848      	ldr	r0, [pc, #288]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000ba6:	f003 f90f 	bl	8003dc8 <MQTTYield>
                }
            }

            if (!mqtt_connected) {
 8000baa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d15d      	bne.n	8000c6e <Task_MQTTHandler+0x2b2>

            	result = DNS_run(gWIZNETINFO.dns, (uint8_t *)remote_host, remote_host_ip);
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000bba:	4619      	mov	r1, r3
 8000bbc:	483a      	ldr	r0, [pc, #232]	@ (8000ca8 <Task_MQTTHandler+0x2ec>)
 8000bbe:	f002 fc55 	bl	800346c <DNS_run>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

            		if (result != 1)
 8000bc8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d007      	beq.n	8000be0 <Task_MQTTHandler+0x224>
            		{
            		   printf("DNS resolution failed for hostname: %s\n", remote_host);
 8000bd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4835      	ldr	r0, [pc, #212]	@ (8000cac <Task_MQTTHandler+0x2f0>)
 8000bd8:	f00b fa60 	bl	800c09c <iprintf>
            		   while (1);
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Task_MQTTHandler+0x220>
            		}

            		printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000be0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <Task_MQTTHandler+0x2e4>)
 8000be2:	6819      	ldr	r1, [r3, #0]
            			  remote_host, remote_host_ip[0], remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000be4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
            		printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000be8:	4618      	mov	r0, r3
            			  remote_host, remote_host_ip[0], remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000bea:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
            		printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000bee:	461c      	mov	r4, r3
            			  remote_host, remote_host_ip[0], remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000bf0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000bf4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
            		printf("Hostname resolved: %s -> %d.%d.%d.%d\n",
 8000bf8:	9201      	str	r2, [sp, #4]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	4623      	mov	r3, r4
 8000bfe:	4602      	mov	r2, r0
 8000c00:	482b      	ldr	r0, [pc, #172]	@ (8000cb0 <Task_MQTTHandler+0x2f4>)
 8000c02:	f00b fa4b 	bl	800c09c <iprintf>

            		if (ConnectNetwork(&network, remote_host_ip, destination_port) != SOCK_OK)
 8000c06:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <Task_MQTTHandler+0x2f8>)
 8000c08:	881a      	ldrh	r2, [r3, #0]
 8000c0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4820      	ldr	r0, [pc, #128]	@ (8000c94 <Task_MQTTHandler+0x2d8>)
 8000c12:	f003 fb90 	bl	8004336 <ConnectNetwork>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d004      	beq.n	8000c26 <Task_MQTTHandler+0x26a>
            		{
            		   printf("Failed to connect to MQTT broker.\n");
 8000c1c:	4826      	ldr	r0, [pc, #152]	@ (8000cb8 <Task_MQTTHandler+0x2fc>)
 8000c1e:	f00b faa5 	bl	800c16c <puts>
            		   while (1);
 8000c22:	bf00      	nop
 8000c24:	e7fd      	b.n	8000c22 <Task_MQTTHandler+0x266>
            		}

            		printf("Connected to MQTT broker.\n");
 8000c26:	4825      	ldr	r0, [pc, #148]	@ (8000cbc <Task_MQTTHandler+0x300>)
 8000c28:	f00b faa0 	bl	800c16c <puts>

            		MQTTClientInit(&mqtt_client, &network, 1000, sendbuff, sizeof(sendbuff), receivebuff, sizeof(receivebuff));
 8000c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <Task_MQTTHandler+0x304>)
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <Task_MQTTHandler+0x308>)
 8000c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c42:	4914      	ldr	r1, [pc, #80]	@ (8000c94 <Task_MQTTHandler+0x2d8>)
 8000c44:	4820      	ldr	r0, [pc, #128]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000c46:	f002 fd5f 	bl	8003708 <MQTTClientInit>
            		//connect_data.keepAliveInterval = 120;

            		if (MQTTConnect(&mqtt_client, &connect_data) != MQTT_SUCCESS)
 8000c4a:	490e      	ldr	r1, [pc, #56]	@ (8000c84 <Task_MQTTHandler+0x2c8>)
 8000c4c:	481e      	ldr	r0, [pc, #120]	@ (8000cc8 <Task_MQTTHandler+0x30c>)
 8000c4e:	f003 f9a9 	bl	8003fa4 <MQTTConnect>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <Task_MQTTHandler+0x2a6>
            		{
            		   printf("MQTT connection failed.\n");
 8000c58:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <Task_MQTTHandler+0x310>)
 8000c5a:	f00b fa87 	bl	800c16c <puts>
            		   while (1);
 8000c5e:	bf00      	nop
 8000c60:	e7fd      	b.n	8000c5e <Task_MQTTHandler+0x2a2>
            		}
            	    mqtt_connected = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            	    printf("MQTT connection established.\n");
 8000c68:	4819      	ldr	r0, [pc, #100]	@ (8000cd0 <Task_MQTTHandler+0x314>)
 8000c6a:	f00b fa7f 	bl	800c16c <puts>
            }
            osDelay(100);
 8000c6e:	2064      	movs	r0, #100	@ 0x64
 8000c70:	f008 fa94 	bl	800919c <osDelay>
            if (mqtt_connected)
 8000c74:	e743      	b.n	8000afe <Task_MQTTHandler+0x142>
 8000c76:	bf00      	nop
 8000c78:	200001f4 	.word	0x200001f4
 8000c7c:	08000ead 	.word	0x08000ead
 8000c80:	0800d3ec 	.word	0x0800d3ec
 8000c84:	2000001c 	.word	0x2000001c
 8000c88:	0800d408 	.word	0x0800d408
 8000c8c:	0800d414 	.word	0x0800d414
 8000c90:	0800d41c 	.word	0x0800d41c
 8000c94:	20000a5c 	.word	0x20000a5c
 8000c98:	20000c6c 	.word	0x20000c6c
 8000c9c:	20000dbc 	.word	0x20000dbc
 8000ca0:	20000074 	.word	0x20000074
 8000ca4:	0800d428 	.word	0x0800d428
 8000ca8:	20000012 	.word	0x20000012
 8000cac:	0800d440 	.word	0x0800d440
 8000cb0:	0800d468 	.word	0x0800d468
 8000cb4:	20000018 	.word	0x20000018
 8000cb8:	0800d490 	.word	0x0800d490
 8000cbc:	0800d4b4 	.word	0x0800d4b4
 8000cc0:	20000b6c 	.word	0x20000b6c
 8000cc4:	20000a6c 	.word	0x20000a6c
 8000cc8:	200009f4 	.word	0x200009f4
 8000ccc:	0800d4d0 	.word	0x0800d4d0
 8000cd0:	0800d4e8 	.word	0x0800d4e8
 8000cd4:	0800d508 	.word	0x0800d508
 8000cd8:	200001f0 	.word	0x200001f0
 8000cdc:	0800d53c 	.word	0x0800d53c
 8000ce0:	0800d550 	.word	0x0800d550
 8000ce4:	0800d568 	.word	0x0800d568
 8000ce8:	0800d578 	.word	0x0800d578

08000cec <__io_putchar>:
        }
}

#define PUTCHAR  int __io_putchar(int ch)
PUTCHAR
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000cf4:	1d39      	adds	r1, r7, #4
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4803      	ldr	r0, [pc, #12]	@ (8000d0c <__io_putchar+0x20>)
 8000cfe:	f007 fd71 	bl	80087e4 <HAL_UART_Transmit>
	return ch;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001a4 	.word	0x200001a4

08000d10 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <PHYStatusCheck+0x40>)
 8000d18:	f00b f9c0 	bl	800c09c <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	200f      	movs	r0, #15
 8000d22:	f005 fd9b 	bl	800685c <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d106      	bne.n	8000d3a <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000d2c:	4809      	ldr	r0, [pc, #36]	@ (8000d54 <PHYStatusCheck+0x44>)
 8000d2e:	f00b f9b5 	bl	800c09c <iprintf>
			HAL_Delay(1500);
 8000d32:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d36:	f006 fac3 	bl	80072c0 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0ea      	beq.n	8000d16 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <PHYStatusCheck+0x48>)
 8000d42:	f00b f9ab 	bl	800c09c <iprintf>

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	0800d590 	.word	0x0800d590
 8000d54:	0800d5b8 	.word	0x0800d5b8
 8000d58:	0800d5cc 	.word	0x0800d5cc

08000d5c <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	200b      	movs	r0, #11
 8000d68:	f005 fd78 	bl	800685c <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000d6c:	793b      	ldrb	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d103      	bne.n	8000d7a <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8000d72:	4814      	ldr	r0, [pc, #80]	@ (8000dc4 <PrintPHYConf+0x68>)
 8000d74:	f00b f992 	bl	800c09c <iprintf>
 8000d78:	e002      	b.n	8000d80 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 8000d7a:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <PrintPHYConf+0x6c>)
 8000d7c:	f00b f98e 	bl	800c09c <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d103      	bne.n	8000d8e <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8000d86:	4811      	ldr	r0, [pc, #68]	@ (8000dcc <PrintPHYConf+0x70>)
 8000d88:	f00b f988 	bl	800c09c <iprintf>
 8000d8c:	e002      	b.n	8000d94 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 8000d8e:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <PrintPHYConf+0x74>)
 8000d90:	f00b f984 	bl	800c09c <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d103      	bne.n	8000da2 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <PrintPHYConf+0x78>)
 8000d9c:	f00b f97e 	bl	800c09c <iprintf>
 8000da0:	e002      	b.n	8000da8 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <PrintPHYConf+0x7c>)
 8000da4:	f00b f97a 	bl	800c09c <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d103      	bne.n	8000db6 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <PrintPHYConf+0x80>)
 8000db0:	f00b f974 	bl	800c09c <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000db4:	e002      	b.n	8000dbc <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8000db6:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <PrintPHYConf+0x84>)
 8000db8:	f00b f970 	bl	800c09c <iprintf>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	0800d5e8 	.word	0x0800d5e8
 8000dc8:	0800d60c 	.word	0x0800d60c
 8000dcc:	0800d62c 	.word	0x0800d62c
 8000dd0:	0800d648 	.word	0x0800d648
 8000dd4:	0800d668 	.word	0x0800d668
 8000dd8:	0800d67c 	.word	0x0800d67c
 8000ddc:	0800d690 	.word	0x0800d690
 8000de0:	0800d6a0 	.word	0x0800d6a0

08000de4 <DisplayNetworkConfigurations>:

void DisplayNetworkConfigurations()
{
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af04      	add	r7, sp, #16
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000dea:	492a      	ldr	r1, [pc, #168]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000dec:	2001      	movs	r0, #1
 8000dee:	f005 fe15 	bl	8006a1c <ctlnetwork>

	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	461c      	mov	r4, r3
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e00:	789b      	ldrb	r3, [r3, #2]
 8000e02:	461d      	mov	r5, r3
 8000e04:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e06:	78db      	ldrb	r3, [r3, #3]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e0c:	791b      	ldrb	r3, [r3, #4]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e12:	795b      	ldrb	r3, [r3, #5]
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	9101      	str	r1, [sp, #4]
 8000e18:	9200      	str	r2, [sp, #0]
 8000e1a:	462b      	mov	r3, r5
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	4601      	mov	r1, r0
 8000e20:	481d      	ldr	r0, [pc, #116]	@ (8000e98 <DisplayNetworkConfigurations+0xb4>)
 8000e22:	f00b f93b 	bl	800c09c <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e28:	799b      	ldrb	r3, [r3, #6]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e34:	7a1b      	ldrb	r3, [r3, #8]
 8000e36:	4618      	mov	r0, r3
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e3a:	7a5b      	ldrb	r3, [r3, #9]
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4816      	ldr	r0, [pc, #88]	@ (8000e9c <DisplayNetworkConfigurations+0xb8>)
 8000e42:	f00b f92b 	bl	800c09c <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e48:	7b9b      	ldrb	r3, [r3, #14]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e4e:	7bdb      	ldrb	r3, [r3, #15]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e54:	7c1b      	ldrb	r3, [r3, #16]
 8000e56:	4618      	mov	r0, r3
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e5a:	7c5b      	ldrb	r3, [r3, #17]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <DisplayNetworkConfigurations+0xbc>)
 8000e62:	f00b f91b 	bl	800c09c <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e68:	7a9b      	ldrb	r3, [r3, #10]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e6e:	7adb      	ldrb	r3, [r3, #11]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e74:	7b1b      	ldrb	r3, [r3, #12]
 8000e76:	4618      	mov	r0, r3
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <DisplayNetworkConfigurations+0xb0>)
 8000e7a:	7b5b      	ldrb	r3, [r3, #13]
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4808      	ldr	r0, [pc, #32]	@ (8000ea4 <DisplayNetworkConfigurations+0xc0>)
 8000e82:	f00b f90b 	bl	800c09c <iprintf>
	printf("=======================================\r\n");
 8000e86:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <DisplayNetworkConfigurations+0xc4>)
 8000e88:	f00b f970 	bl	800c16c <puts>
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bdb0      	pop	{r4, r5, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000
 8000e98:	0800d6b4 	.word	0x0800d6b4
 8000e9c:	0800d6dc 	.word	0x0800d6dc
 8000ea0:	0800d6f0 	.word	0x0800d6f0
 8000ea4:	0800d704 	.word	0x0800d704
 8000ea8:	0800d718 	.word	0x0800d718

08000eac <OnDHCPIPAssigned>:

void OnDHCPIPAssigned(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

	printf("IP Obtained: \r\n");
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <OnDHCPIPAssigned+0x38>)
 8000eb2:	f00b f95b 	bl	800c16c <puts>

	getIPfromDHCP(gWIZNETINFO.ip);
 8000eb6:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <OnDHCPIPAssigned+0x3c>)
 8000eb8:	f001 fe86 	bl	8002bc8 <getIPfromDHCP>
	getGWfromDHCP(gWIZNETINFO.gw);
 8000ebc:	480b      	ldr	r0, [pc, #44]	@ (8000eec <OnDHCPIPAssigned+0x40>)
 8000ebe:	f001 fea3 	bl	8002c08 <getGWfromDHCP>
	getSNfromDHCP(gWIZNETINFO.sn);
 8000ec2:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <OnDHCPIPAssigned+0x44>)
 8000ec4:	f001 fec0 	bl	8002c48 <getSNfromDHCP>
	getDNSfromDHCP(gWIZNETINFO.dns);
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <OnDHCPIPAssigned+0x48>)
 8000eca:	f001 fedd 	bl	8002c88 <getDNSfromDHCP>

	gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <OnDHCPIPAssigned+0x4c>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	759a      	strb	r2, [r3, #22]

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000ed4:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <OnDHCPIPAssigned+0x4c>)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f005 fda0 	bl	8006a1c <ctlnetwork>

	DisplayNetworkConfigurations();
 8000edc:	f7ff ff82 	bl	8000de4 <DisplayNetworkConfigurations>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0800d744 	.word	0x0800d744
 8000ee8:	20000006 	.word	0x20000006
 8000eec:	2000000e 	.word	0x2000000e
 8000ef0:	2000000a 	.word	0x2000000a
 8000ef4:	20000012 	.word	0x20000012
 8000ef8:	20000000 	.word	0x20000000

08000efc <FlushQueue>:

void FlushQueue(osMessageQueueId_t queueHandle) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    uint32_t received_message;
    while (osMessageQueueGet(queueHandle, &received_message, NULL, 0) == osOK) {
 8000f04:	e004      	b.n	8000f10 <FlushQueue+0x14>
        // Loop until the queue is empty
        printf("Flushing event: %lu\r\n", received_message);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <FlushQueue+0x34>)
 8000f0c:	f00b f8c6 	bl	800c09c <iprintf>
    while (osMessageQueueGet(queueHandle, &received_message, NULL, 0) == osOK) {
 8000f10:	f107 010c 	add.w	r1, r7, #12
 8000f14:	2300      	movs	r3, #0
 8000f16:	2200      	movs	r2, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f008 fa2d 	bl	8009378 <osMessageQueueGet>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f0      	beq.n	8000f06 <FlushQueue+0xa>
    }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800d754 	.word	0x0800d754

08000f34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f008 f92d 	bl	800919c <osDelay>
 8000f42:	e7fb      	b.n	8000f3c <StartDefaultTask+0x8>

08000f44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f56:	f006 f993 	bl	8007280 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  MilliTimer_Handler(); //For MQTT
 8000f5a:	f003 f8fb 	bl	8004154 <MilliTimer_Handler>

       //One second callback for DHCP Module
  	static uint16_t milli_count;
  	milli_count++;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f68:	801a      	strh	r2, [r3, #0]

  	if(milli_count==1000)
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f72:	d106      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x3e>
  	{
  	milli_count=0;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	801a      	strh	r2, [r3, #0]
  	DHCP_time_handler();
 8000f7a:	f001 fe17 	bl	8002bac <DHCP_time_handler>
  	DNS_time_handler();
 8000f7e:	f002 fb41 	bl	8003604 <DNS_time_handler>
  	}
  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	20000d6e 	.word	0x20000d6e

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_MspInit+0x54>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a11      	ldr	r2, [pc, #68]	@ (8000ff4 <HAL_MspInit+0x54>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_MspInit+0x54>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_MspInit+0x54>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_MspInit+0x54>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <HAL_MspInit+0x54>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	f06f 0001 	mvn.w	r0, #1
 8000fe6:	f006 fa47 	bl	8007478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	@ (800107c <HAL_SPI_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <HAL_SPI_MspInit+0x88>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <HAL_SPI_MspInit+0x88>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_SPI_MspInit+0x88>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HAL_SPI_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <HAL_SPI_MspInit+0x88>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_SPI_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001052:	23e0      	movs	r3, #224	@ 0xe0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001062:	2305      	movs	r3, #5
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <HAL_SPI_MspInit+0x8c>)
 800106e:	f006 fa2d 	bl	80074cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40013000 	.word	0x40013000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12b      	bne.n	8001102 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_UART_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a17      	ldr	r2, [pc, #92]	@ (8001110 <HAL_UART_MspInit+0x88>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_UART_MspInit+0x88>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_UART_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <HAL_UART_MspInit+0x88>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_UART_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f2:	2307      	movs	r3, #7
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_UART_MspInit+0x8c>)
 80010fe:	f006 f9e5 	bl	80074cc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b2e      	ldr	r3, [pc, #184]	@ (80011e8 <HAL_InitTick+0xd0>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001130:	4a2d      	ldr	r2, [pc, #180]	@ (80011e8 <HAL_InitTick+0xd0>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6453      	str	r3, [r2, #68]	@ 0x44
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <HAL_InitTick+0xd0>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f006 ffca 	bl	80080e8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001154:	f006 ffb4 	bl	80080c0 <HAL_RCC_GetPCLK2Freq>
 8001158:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115c:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <HAL_InitTick+0xd4>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	3b01      	subs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_InitTick+0xd8>)
 800116a:	4a22      	ldr	r2, [pc, #136]	@ (80011f4 <HAL_InitTick+0xdc>)
 800116c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_InitTick+0xd8>)
 8001170:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001174:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001176:	4a1e      	ldr	r2, [pc, #120]	@ (80011f0 <HAL_InitTick+0xd8>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_InitTick+0xd8>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_InitTick+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_InitTick+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800118e:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <HAL_InitTick+0xd8>)
 8001190:	f007 f865 	bl	800825e <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800119a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d11b      	bne.n	80011da <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011a2:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <HAL_InitTick+0xd8>)
 80011a4:	f007 f8b4 	bl	8008310 <HAL_TIM_Base_Start_IT>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d111      	bne.n	80011da <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011b6:	2019      	movs	r0, #25
 80011b8:	f006 f97a 	bl	80074b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d808      	bhi.n	80011d4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011c2:	2200      	movs	r2, #0
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	2019      	movs	r0, #25
 80011c8:	f006 f956 	bl	8007478 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_InitTick+0xe0>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e002      	b.n	80011da <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3730      	adds	r7, #48	@ 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	431bde83 	.word	0x431bde83
 80011f0:	20000d70 	.word	0x20000d70
 80011f4:	40010000 	.word	0x40010000
 80011f8:	200000c8 	.word	0x200000c8

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800123a:	f007 f8cb 	bl	80083d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000d70 	.word	0x20000d70

08001248 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
  }

  return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fd25 	bl	8000cec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
  }
  return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
  return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f00b f8f4 	bl	800c540 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20018000 	.word	0x20018000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000db8 	.word	0x20000db8
 800138c:	20005968 	.word	0x20005968

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80013b8:	2204      	movs	r2, #4
 80013ba:	4909      	ldr	r1, [pc, #36]	@ (80013e0 <default_ip_assign+0x2c>)
 80013bc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80013c0:	f003 fe76 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80013c4:	2204      	movs	r2, #4
 80013c6:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <default_ip_assign+0x30>)
 80013c8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80013cc:	f003 fe70 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80013d0:	2204      	movs	r2, #4
 80013d2:	4905      	ldr	r1, [pc, #20]	@ (80013e8 <default_ip_assign+0x34>)
 80013d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013d8:	f003 fe6a 	bl	80050b0 <WIZCHIP_WRITE_BUF>
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000dcc 	.word	0x20000dcc
 80013e4:	20000dd4 	.word	0x20000dd4
 80013e8:	20000dd0 	.word	0x20000dd0

080013ec <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	2000      	movs	r0, #0
 80013f4:	f003 fdae 	bl	8004f54 <WIZCHIP_WRITE>
   getMR(); // for delay
 80013f8:	2000      	movs	r0, #0
 80013fa:	f003 fd5f 	bl	8004ebc <WIZCHIP_READ>
   default_ip_assign();
 80013fe:	f7ff ffd9 	bl	80013b4 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8001402:	2206      	movs	r2, #6
 8001404:	4903      	ldr	r1, [pc, #12]	@ (8001414 <default_ip_update+0x28>)
 8001406:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800140a:	f003 fe51 	bl	80050b0 <WIZCHIP_WRITE_BUF>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000dec 	.word	0x20000dec

08001418 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	2000      	movs	r0, #0
 8001420:	f003 fd98 	bl	8004f54 <WIZCHIP_WRITE>
	getMR(); // for delay
 8001424:	2000      	movs	r0, #0
 8001426:	f003 fd49 	bl	8004ebc <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800142a:	2206      	movs	r2, #6
 800142c:	4903      	ldr	r1, [pc, #12]	@ (800143c <default_ip_conflict+0x24>)
 800142e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001432:	f003 fe3d 	bl	80050b0 <WIZCHIP_WRITE_BUF>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000dec 	.word	0x20000dec

08001440 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <reg_dhcp_cbfunc+0x50>)
 800144e:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <reg_dhcp_cbfunc+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <reg_dhcp_cbfunc+0x58>)
 8001454:	4a11      	ldr	r2, [pc, #68]	@ (800149c <reg_dhcp_cbfunc+0x5c>)
 8001456:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <reg_dhcp_cbfunc+0x60>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <reg_dhcp_cbfunc+0x64>)
 800145c:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <reg_dhcp_cbfunc+0x2a>
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <reg_dhcp_cbfunc+0x50>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <reg_dhcp_cbfunc+0x36>
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <reg_dhcp_cbfunc+0x58>)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <reg_dhcp_cbfunc+0x42>
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <reg_dhcp_cbfunc+0x60>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000008c 	.word	0x2000008c
 8001494:	080013b5 	.word	0x080013b5
 8001498:	20000090 	.word	0x20000090
 800149c:	080013ed 	.word	0x080013ed
 80014a0:	20000094 	.word	0x20000094
 80014a4:	08001419 	.word	0x08001419

080014a8 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80014ae:	463b      	mov	r3, r7
 80014b0:	2206      	movs	r2, #6
 80014b2:	4619      	mov	r1, r3
 80014b4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80014b8:	f003 fd9a 	bl	8004ff0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80014bc:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80014c4:	4b70      	ldr	r3, [pc, #448]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80014cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2206      	movs	r2, #6
 80014d2:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80014d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80014dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3304      	adds	r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80014e4:	4b69      	ldr	r3, [pc, #420]	@ (800168c <makeDHCPMSG+0x1e4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0e1b      	lsrs	r3, r3, #24
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80014f0:	4b66      	ldr	r3, [pc, #408]	@ (800168c <makeDHCPMSG+0x1e4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0c1a      	lsrs	r2, r3, #16
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <makeDHCPMSG+0x1e4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0a1a      	lsrs	r2, r3, #8
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3302      	adds	r3, #2
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800150c:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <makeDHCPMSG+0x1e4>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3303      	adds	r3, #3
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001518:	4b5b      	ldr	r3, [pc, #364]	@ (8001688 <makeDHCPMSG+0x1e0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001520:	4b59      	ldr	r3, [pc, #356]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	330a      	adds	r3, #10
 8001526:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8001536:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800153e:	4b52      	ldr	r3, [pc, #328]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8001546:	4b50      	ldr	r3, [pc, #320]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800154e:	4b4e      	ldr	r3, [pc, #312]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2200      	movs	r2, #0
 8001554:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001556:	4b4c      	ldr	r3, [pc, #304]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800155e:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001566:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800156e:	4b46      	ldr	r3, [pc, #280]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001576:	4b44      	ldr	r3, [pc, #272]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800157e:	4b42      	ldr	r3, [pc, #264]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001586:	4b40      	ldr	r3, [pc, #256]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800158e:	4b3e      	ldr	r3, [pc, #248]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001596:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800159e:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80015ae:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80015b6:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a35      	ldr	r2, [pc, #212]	@ (8001690 <makeDHCPMSG+0x1e8>)
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80015c0:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a32      	ldr	r2, [pc, #200]	@ (8001690 <makeDHCPMSG+0x1e8>)
 80015c6:	7852      	ldrb	r2, [r2, #1]
 80015c8:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80015ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a30      	ldr	r2, [pc, #192]	@ (8001690 <makeDHCPMSG+0x1e8>)
 80015d0:	7892      	ldrb	r2, [r2, #2]
 80015d2:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80015d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001690 <makeDHCPMSG+0x1e8>)
 80015da:	78d2      	ldrb	r2, [r2, #3]
 80015dc:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001690 <makeDHCPMSG+0x1e8>)
 80015e4:	7912      	ldrb	r2, [r2, #4]
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80015ea:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a28      	ldr	r2, [pc, #160]	@ (8001690 <makeDHCPMSG+0x1e8>)
 80015f0:	7952      	ldrb	r2, [r2, #5]
 80015f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80015f6:	2306      	movs	r3, #6
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e008      	b.n	800160e <makeDHCPMSG+0x166>
 80015fc:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <makeDHCPMSG+0x1e0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	4413      	add	r3, r2
 8001604:	2200      	movs	r2, #0
 8001606:	771a      	strb	r2, [r3, #28]
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d9f3      	bls.n	80015fc <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e009      	b.n	800162e <makeDHCPMSG+0x186>
 800161a:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <makeDHCPMSG+0x1e0>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4413      	add	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	3301      	adds	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b3f      	cmp	r3, #63	@ 0x3f
 8001632:	d9f2      	bls.n	800161a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e009      	b.n	800164e <makeDHCPMSG+0x1a6>
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <makeDHCPMSG+0x1e0>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4413      	add	r3, r2
 8001642:	2200      	movs	r2, #0
 8001644:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	daf1      	bge.n	800163a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2263      	movs	r2, #99	@ 0x63
 800165c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2282      	movs	r2, #130	@ 0x82
 8001666:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800166a:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <makeDHCPMSG+0x1e0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2253      	movs	r2, #83	@ 0x53
 8001670:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <makeDHCPMSG+0x1e0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2263      	movs	r2, #99	@ 0x63
 800167a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000de8 	.word	0x20000de8
 800168c:	20000de4 	.word	0x20000de4
 8001690:	20000dec 	.word	0x20000dec

08001694 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800169e:	f7ff ff03 	bl	80014a8 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80016a2:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <send_DHCP_DISCOVER+0x168>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80016a8:	4b54      	ldr	r3, [pc, #336]	@ (80017fc <send_DHCP_DISCOVER+0x168>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80016ae:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <send_DHCP_DISCOVER+0x168>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80016b4:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <send_DHCP_DISCOVER+0x168>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80016ba:	4b51      	ldr	r3, [pc, #324]	@ (8001800 <send_DHCP_DISCOVER+0x16c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80016c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001800 <send_DHCP_DISCOVER+0x16c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80016c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001800 <send_DHCP_DISCOVER+0x16c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80016cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <send_DHCP_DISCOVER+0x16c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80016d2:	2304      	movs	r3, #4
 80016d4:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	1c59      	adds	r1, r3, #1
 80016de:	80b9      	strh	r1, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	2235      	movs	r2, #53	@ 0x35
 80016e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80016e8:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	80b9      	strh	r1, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80016fa:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	1c59      	adds	r1, r3, #1
 8001702:	80b9      	strh	r1, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	2201      	movs	r2, #1
 8001708:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800170c:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	80b9      	strh	r1, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	223d      	movs	r2, #61	@ 0x3d
 800171a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800171e:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	80b9      	strh	r1, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	2207      	movs	r2, #7
 800172c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001730:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	1c59      	adds	r1, r3, #1
 8001738:	80b9      	strh	r1, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	2201      	movs	r2, #1
 800173e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001742:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	80b9      	strh	r1, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <send_DHCP_DISCOVER+0x174>)
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	1813      	adds	r3, r2, r0
 8001754:	460a      	mov	r2, r1
 8001756:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	1c59      	adds	r1, r3, #1
 8001762:	80b9      	strh	r1, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <send_DHCP_DISCOVER+0x174>)
 8001768:	7859      	ldrb	r1, [r3, #1]
 800176a:	1813      	adds	r3, r2, r0
 800176c:	460a      	mov	r2, r1
 800176e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001772:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	1c59      	adds	r1, r3, #1
 800177a:	80b9      	strh	r1, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <send_DHCP_DISCOVER+0x174>)
 8001780:	7899      	ldrb	r1, [r3, #2]
 8001782:	1813      	adds	r3, r2, r0
 8001784:	460a      	mov	r2, r1
 8001786:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	1c59      	adds	r1, r3, #1
 8001792:	80b9      	strh	r1, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <send_DHCP_DISCOVER+0x174>)
 8001798:	78d9      	ldrb	r1, [r3, #3]
 800179a:	1813      	adds	r3, r2, r0
 800179c:	460a      	mov	r2, r1
 800179e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	1c59      	adds	r1, r3, #1
 80017aa:	80b9      	strh	r1, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <send_DHCP_DISCOVER+0x174>)
 80017b0:	7919      	ldrb	r1, [r3, #4]
 80017b2:	1813      	adds	r3, r2, r0
 80017b4:	460a      	mov	r2, r1
 80017b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	88bb      	ldrh	r3, [r7, #4]
 80017c0:	1c59      	adds	r1, r3, #1
 80017c2:	80b9      	strh	r1, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <send_DHCP_DISCOVER+0x174>)
 80017c8:	7959      	ldrb	r1, [r3, #5]
 80017ca:	1813      	adds	r3, r2, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	80b9      	strh	r1, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	220c      	movs	r2, #12
 80017e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <send_DHCP_DISCOVER+0x170>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	80b9      	strh	r1, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	e017      	b.n	800182c <send_DHCP_DISCOVER+0x198>
 80017fc:	20000dc0 	.word	0x20000dc0
 8001800:	20000dc4 	.word	0x20000dc4
 8001804:	20000de8 	.word	0x20000de8
 8001808:	20000dec 	.word	0x20000dec
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800180c:	88f9      	ldrh	r1, [r7, #6]
 800180e:	4b82      	ldr	r3, [pc, #520]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	1c58      	adds	r0, r3, #1
 8001816:	80b8      	strh	r0, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	4b80      	ldr	r3, [pc, #512]	@ (8001a1c <send_DHCP_DISCOVER+0x388>)
 800181c:	5c59      	ldrb	r1, [r3, r1]
 800181e:	1813      	adds	r3, r2, r0
 8001820:	460a      	mov	r2, r1
 8001822:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	3301      	adds	r3, #1
 800182a:	80fb      	strh	r3, [r7, #6]
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4a7b      	ldr	r2, [pc, #492]	@ (8001a1c <send_DHCP_DISCOVER+0x388>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ea      	bne.n	800180c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001836:	4b7a      	ldr	r3, [pc, #488]	@ (8001a20 <send_DHCP_DISCOVER+0x38c>)
 8001838:	78db      	ldrb	r3, [r3, #3]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001840:	681c      	ldr	r4, [r3, #0]
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	1c59      	adds	r1, r3, #1
 8001846:	80b9      	strh	r1, [r7, #4]
 8001848:	461d      	mov	r5, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f001 fa3c 	bl	8002cc8 <NibbleToHex>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	1963      	adds	r3, r4, r5
 8001856:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800185a:	4b71      	ldr	r3, [pc, #452]	@ (8001a20 <send_DHCP_DISCOVER+0x38c>)
 800185c:	78da      	ldrb	r2, [r3, #3]
 800185e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	1c59      	adds	r1, r3, #1
 8001866:	80b9      	strh	r1, [r7, #4]
 8001868:	461d      	mov	r5, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f001 fa2c 	bl	8002cc8 <NibbleToHex>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	1963      	adds	r3, r4, r5
 8001876:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800187a:	4b69      	ldr	r3, [pc, #420]	@ (8001a20 <send_DHCP_DISCOVER+0x38c>)
 800187c:	791b      	ldrb	r3, [r3, #4]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b65      	ldr	r3, [pc, #404]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001884:	681c      	ldr	r4, [r3, #0]
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	80b9      	strh	r1, [r7, #4]
 800188c:	461d      	mov	r5, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f001 fa1a 	bl	8002cc8 <NibbleToHex>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	1963      	adds	r3, r4, r5
 800189a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800189e:	4b60      	ldr	r3, [pc, #384]	@ (8001a20 <send_DHCP_DISCOVER+0x38c>)
 80018a0:	791a      	ldrb	r2, [r3, #4]
 80018a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 80018a4:	681c      	ldr	r4, [r3, #0]
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	1c59      	adds	r1, r3, #1
 80018aa:	80b9      	strh	r1, [r7, #4]
 80018ac:	461d      	mov	r5, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f001 fa0a 	bl	8002cc8 <NibbleToHex>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	1963      	adds	r3, r4, r5
 80018ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80018be:	4b58      	ldr	r3, [pc, #352]	@ (8001a20 <send_DHCP_DISCOVER+0x38c>)
 80018c0:	795b      	ldrb	r3, [r3, #5]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b54      	ldr	r3, [pc, #336]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 80018c8:	681c      	ldr	r4, [r3, #0]
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	1c59      	adds	r1, r3, #1
 80018ce:	80b9      	strh	r1, [r7, #4]
 80018d0:	461d      	mov	r5, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f001 f9f8 	bl	8002cc8 <NibbleToHex>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	1963      	adds	r3, r4, r5
 80018de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80018e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a20 <send_DHCP_DISCOVER+0x38c>)
 80018e4:	795a      	ldrb	r2, [r3, #5]
 80018e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 80018e8:	681c      	ldr	r4, [r3, #0]
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	1c59      	adds	r1, r3, #1
 80018ee:	80b9      	strh	r1, [r7, #4]
 80018f0:	461d      	mov	r5, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f001 f9e8 	bl	8002cc8 <NibbleToHex>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	1963      	adds	r3, r4, r5
 80018fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	b2d9      	uxtb	r1, r3
 8001906:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	88b8      	ldrh	r0, [r7, #4]
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	3307      	adds	r3, #7
 8001910:	1ac3      	subs	r3, r0, r3
 8001912:	3106      	adds	r1, #6
 8001914:	b2c9      	uxtb	r1, r1
 8001916:	4413      	add	r3, r2
 8001918:	460a      	mov	r2, r1
 800191a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800191e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	1c59      	adds	r1, r3, #1
 8001926:	80b9      	strh	r1, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	2237      	movs	r2, #55	@ 0x37
 800192c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	80b9      	strh	r1, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	2206      	movs	r2, #6
 800193e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001942:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	88bb      	ldrh	r3, [r7, #4]
 8001948:	1c59      	adds	r1, r3, #1
 800194a:	80b9      	strh	r1, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	2201      	movs	r2, #1
 8001950:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001954:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	1c59      	adds	r1, r3, #1
 800195c:	80b9      	strh	r1, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	2203      	movs	r2, #3
 8001962:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001966:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	1c59      	adds	r1, r3, #1
 800196e:	80b9      	strh	r1, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	2206      	movs	r2, #6
 8001974:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	80b9      	strh	r1, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	220f      	movs	r2, #15
 8001986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800198a:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	1c59      	adds	r1, r3, #1
 8001992:	80b9      	strh	r1, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	223a      	movs	r2, #58	@ 0x3a
 8001998:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	1c59      	adds	r1, r3, #1
 80019a4:	80b9      	strh	r1, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	223b      	movs	r2, #59	@ 0x3b
 80019aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	80b9      	strh	r1, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	e009      	b.n	80019da <send_DHCP_DISCOVER+0x346>
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	4413      	add	r3, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	3301      	adds	r3, #1
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80019e0:	d3f1      	bcc.n	80019c6 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80019e2:	23ff      	movs	r3, #255	@ 0xff
 80019e4:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80019e6:	23ff      	movs	r3, #255	@ 0xff
 80019e8:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80019ea:	23ff      	movs	r3, #255	@ 0xff
 80019ec:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80019ee:	23ff      	movs	r3, #255	@ 0xff
 80019f0:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
 80019f2:	480c      	ldr	r0, [pc, #48]	@ (8001a24 <send_DHCP_DISCOVER+0x390>)
 80019f4:	f00a fbba 	bl	800c16c <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <send_DHCP_DISCOVER+0x394>)
 80019fa:	7818      	ldrb	r0, [r3, #0]
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <send_DHCP_DISCOVER+0x384>)
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	463b      	mov	r3, r7
 8001a02:	2243      	movs	r2, #67	@ 0x43
 8001a04:	9200      	str	r2, [sp, #0]
 8001a06:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001a0a:	f004 f9bd 	bl	8005d88 <sendto>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bdb0      	pop	{r4, r5, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000de8 	.word	0x20000de8
 8001a1c:	20000084 	.word	0x20000084
 8001a20:	20000dec 	.word	0x20000dec
 8001a24:	0800d76c 	.word	0x0800d76c
 8001a28:	20000dbd 	.word	0x20000dbd

08001a2c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001a36:	f7ff fd37 	bl	80014a8 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <send_DHCP_REQUEST+0x7c>)
 8001a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d004      	beq.n	8001a4e <send_DHCP_REQUEST+0x22>
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <send_DHCP_REQUEST+0x7c>)
 8001a46:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d134      	bne.n	8001ab8 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <send_DHCP_REQUEST+0x80>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	330a      	adds	r3, #10
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <send_DHCP_REQUEST+0x80>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	330a      	adds	r3, #10
 8001a5e:	3301      	adds	r3, #1
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <send_DHCP_REQUEST+0x80>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <send_DHCP_REQUEST+0x84>)
 8001a6a:	7812      	ldrb	r2, [r2, #0]
 8001a6c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <send_DHCP_REQUEST+0x80>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <send_DHCP_REQUEST+0x84>)
 8001a74:	7852      	ldrb	r2, [r2, #1]
 8001a76:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <send_DHCP_REQUEST+0x80>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab0 <send_DHCP_REQUEST+0x84>)
 8001a7e:	7892      	ldrb	r2, [r2, #2]
 8001a80:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <send_DHCP_REQUEST+0x80>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <send_DHCP_REQUEST+0x84>)
 8001a88:	78d2      	ldrb	r2, [r2, #3]
 8001a8a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <send_DHCP_REQUEST+0x88>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <send_DHCP_REQUEST+0x88>)
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <send_DHCP_REQUEST+0x88>)
 8001a9a:	789b      	ldrb	r3, [r3, #2]
 8001a9c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <send_DHCP_REQUEST+0x88>)
 8001aa0:	78db      	ldrb	r3, [r3, #3]
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	e010      	b.n	8001ac8 <send_DHCP_REQUEST+0x9c>
 8001aa6:	bf00      	nop
 8001aa8:	20000ddc 	.word	0x20000ddc
 8001aac:	20000de8 	.word	0x20000de8
 8001ab0:	20000dcc 	.word	0x20000dcc
 8001ab4:	20000dc0 	.word	0x20000dc0
   }
   else
   {
   	ip[0] = 255;
 8001ab8:	23ff      	movs	r3, #255	@ 0xff
 8001aba:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001abc:	23ff      	movs	r3, #255	@ 0xff
 8001abe:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001ac0:	23ff      	movs	r3, #255	@ 0xff
 8001ac2:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001ac4:	23ff      	movs	r3, #255	@ 0xff
 8001ac6:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001ac8:	2304      	movs	r3, #4
 8001aca:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001acc:	4b8d      	ldr	r3, [pc, #564]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	1c59      	adds	r1, r3, #1
 8001ad4:	8179      	strh	r1, [r7, #10]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2235      	movs	r2, #53	@ 0x35
 8001ada:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001ade:	4b89      	ldr	r3, [pc, #548]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	1c59      	adds	r1, r3, #1
 8001ae6:	8179      	strh	r1, [r7, #10]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001af0:	4b84      	ldr	r3, [pc, #528]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	8179      	strh	r1, [r7, #10]
 8001afa:	4413      	add	r3, r2
 8001afc:	2203      	movs	r2, #3
 8001afe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001b02:	4b80      	ldr	r3, [pc, #512]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	8179      	strh	r1, [r7, #10]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	223d      	movs	r2, #61	@ 0x3d
 8001b10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001b14:	4b7b      	ldr	r3, [pc, #492]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	897b      	ldrh	r3, [r7, #10]
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	8179      	strh	r1, [r7, #10]
 8001b1e:	4413      	add	r3, r2
 8001b20:	2207      	movs	r2, #7
 8001b22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001b26:	4b77      	ldr	r3, [pc, #476]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	1c59      	adds	r1, r3, #1
 8001b2e:	8179      	strh	r1, [r7, #10]
 8001b30:	4413      	add	r3, r2
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001b38:	4b72      	ldr	r3, [pc, #456]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	8179      	strh	r1, [r7, #10]
 8001b42:	4618      	mov	r0, r3
 8001b44:	4b70      	ldr	r3, [pc, #448]	@ (8001d08 <send_DHCP_REQUEST+0x2dc>)
 8001b46:	7819      	ldrb	r1, [r3, #0]
 8001b48:	1813      	adds	r3, r2, r0
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001b50:	4b6c      	ldr	r3, [pc, #432]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	1c59      	adds	r1, r3, #1
 8001b58:	8179      	strh	r1, [r7, #10]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d08 <send_DHCP_REQUEST+0x2dc>)
 8001b5e:	7859      	ldrb	r1, [r3, #1]
 8001b60:	1813      	adds	r3, r2, r0
 8001b62:	460a      	mov	r2, r1
 8001b64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001b68:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	8179      	strh	r1, [r7, #10]
 8001b72:	4618      	mov	r0, r3
 8001b74:	4b64      	ldr	r3, [pc, #400]	@ (8001d08 <send_DHCP_REQUEST+0x2dc>)
 8001b76:	7899      	ldrb	r1, [r3, #2]
 8001b78:	1813      	adds	r3, r2, r0
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001b80:	4b60      	ldr	r3, [pc, #384]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	897b      	ldrh	r3, [r7, #10]
 8001b86:	1c59      	adds	r1, r3, #1
 8001b88:	8179      	strh	r1, [r7, #10]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d08 <send_DHCP_REQUEST+0x2dc>)
 8001b8e:	78d9      	ldrb	r1, [r3, #3]
 8001b90:	1813      	adds	r3, r2, r0
 8001b92:	460a      	mov	r2, r1
 8001b94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001b98:	4b5a      	ldr	r3, [pc, #360]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	1c59      	adds	r1, r3, #1
 8001ba0:	8179      	strh	r1, [r7, #10]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4b58      	ldr	r3, [pc, #352]	@ (8001d08 <send_DHCP_REQUEST+0x2dc>)
 8001ba6:	7919      	ldrb	r1, [r3, #4]
 8001ba8:	1813      	adds	r3, r2, r0
 8001baa:	460a      	mov	r2, r1
 8001bac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001bb0:	4b54      	ldr	r3, [pc, #336]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	8179      	strh	r1, [r7, #10]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4b52      	ldr	r3, [pc, #328]	@ (8001d08 <send_DHCP_REQUEST+0x2dc>)
 8001bbe:	7959      	ldrb	r1, [r3, #5]
 8001bc0:	1813      	adds	r3, r2, r0
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2bff      	cmp	r3, #255	@ 0xff
 8001bcc:	f040 8084 	bne.w	8001cd8 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	1c59      	adds	r1, r3, #1
 8001bd8:	8179      	strh	r1, [r7, #10]
 8001bda:	4413      	add	r3, r2
 8001bdc:	2232      	movs	r2, #50	@ 0x32
 8001bde:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001be2:	4b48      	ldr	r3, [pc, #288]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	897b      	ldrh	r3, [r7, #10]
 8001be8:	1c59      	adds	r1, r3, #1
 8001bea:	8179      	strh	r1, [r7, #10]
 8001bec:	4413      	add	r3, r2
 8001bee:	2204      	movs	r2, #4
 8001bf0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	1c59      	adds	r1, r3, #1
 8001bfc:	8179      	strh	r1, [r7, #10]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4b42      	ldr	r3, [pc, #264]	@ (8001d0c <send_DHCP_REQUEST+0x2e0>)
 8001c02:	7819      	ldrb	r1, [r3, #0]
 8001c04:	1813      	adds	r3, r2, r0
 8001c06:	460a      	mov	r2, r1
 8001c08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	897b      	ldrh	r3, [r7, #10]
 8001c12:	1c59      	adds	r1, r3, #1
 8001c14:	8179      	strh	r1, [r7, #10]
 8001c16:	4618      	mov	r0, r3
 8001c18:	4b3c      	ldr	r3, [pc, #240]	@ (8001d0c <send_DHCP_REQUEST+0x2e0>)
 8001c1a:	7859      	ldrb	r1, [r3, #1]
 8001c1c:	1813      	adds	r3, r2, r0
 8001c1e:	460a      	mov	r2, r1
 8001c20:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001c24:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	8179      	strh	r1, [r7, #10]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <send_DHCP_REQUEST+0x2e0>)
 8001c32:	7899      	ldrb	r1, [r3, #2]
 8001c34:	1813      	adds	r3, r2, r0
 8001c36:	460a      	mov	r2, r1
 8001c38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	897b      	ldrh	r3, [r7, #10]
 8001c42:	1c59      	adds	r1, r3, #1
 8001c44:	8179      	strh	r1, [r7, #10]
 8001c46:	4618      	mov	r0, r3
 8001c48:	4b30      	ldr	r3, [pc, #192]	@ (8001d0c <send_DHCP_REQUEST+0x2e0>)
 8001c4a:	78d9      	ldrb	r1, [r3, #3]
 8001c4c:	1813      	adds	r3, r2, r0
 8001c4e:	460a      	mov	r2, r1
 8001c50:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	8179      	strh	r1, [r7, #10]
 8001c5e:	4413      	add	r3, r2
 8001c60:	2236      	movs	r2, #54	@ 0x36
 8001c62:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	1c59      	adds	r1, r3, #1
 8001c6e:	8179      	strh	r1, [r7, #10]
 8001c70:	4413      	add	r3, r2
 8001c72:	2204      	movs	r2, #4
 8001c74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	8179      	strh	r1, [r7, #10]
 8001c82:	4618      	mov	r0, r3
 8001c84:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <send_DHCP_REQUEST+0x2e4>)
 8001c86:	7819      	ldrb	r1, [r3, #0]
 8001c88:	1813      	adds	r3, r2, r0
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	897b      	ldrh	r3, [r7, #10]
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	8179      	strh	r1, [r7, #10]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <send_DHCP_REQUEST+0x2e4>)
 8001c9e:	7859      	ldrb	r1, [r3, #1]
 8001ca0:	1813      	adds	r3, r2, r0
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	8179      	strh	r1, [r7, #10]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <send_DHCP_REQUEST+0x2e4>)
 8001cb6:	7899      	ldrb	r1, [r3, #2]
 8001cb8:	1813      	adds	r3, r2, r0
 8001cba:	460a      	mov	r2, r1
 8001cbc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001cc0:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	897b      	ldrh	r3, [r7, #10]
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	8179      	strh	r1, [r7, #10]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <send_DHCP_REQUEST+0x2e4>)
 8001cce:	78d9      	ldrb	r1, [r3, #3]
 8001cd0:	1813      	adds	r3, r2, r0
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	8179      	strh	r1, [r7, #10]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	220c      	movs	r2, #12
 8001ce6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <send_DHCP_REQUEST+0x2d8>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	1c59      	adds	r1, r3, #1
 8001cf2:	8179      	strh	r1, [r7, #10]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e019      	b.n	8001d36 <send_DHCP_REQUEST+0x30a>
 8001d02:	bf00      	nop
 8001d04:	20000de8 	.word	0x20000de8
 8001d08:	20000dec 	.word	0x20000dec
 8001d0c:	20000dcc 	.word	0x20000dcc
 8001d10:	20000dc0 	.word	0x20000dc0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001d14:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	897b      	ldrh	r3, [r7, #10]
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	8179      	strh	r1, [r7, #10]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4986      	ldr	r1, [pc, #536]	@ (8001f3c <send_DHCP_REQUEST+0x510>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	440b      	add	r3, r1
 8001d26:	7819      	ldrb	r1, [r3, #0]
 8001d28:	1813      	adds	r3, r2, r0
 8001d2a:	460a      	mov	r2, r1
 8001d2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4a81      	ldr	r2, [pc, #516]	@ (8001f3c <send_DHCP_REQUEST+0x510>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e8      	bne.n	8001d14 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001d42:	4b7f      	ldr	r3, [pc, #508]	@ (8001f40 <send_DHCP_REQUEST+0x514>)
 8001d44:	78db      	ldrb	r3, [r3, #3]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001d4c:	681c      	ldr	r4, [r3, #0]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	1c59      	adds	r1, r3, #1
 8001d52:	8179      	strh	r1, [r7, #10]
 8001d54:	461d      	mov	r5, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f000 ffb6 	bl	8002cc8 <NibbleToHex>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	1963      	adds	r3, r4, r5
 8001d62:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001d66:	4b76      	ldr	r3, [pc, #472]	@ (8001f40 <send_DHCP_REQUEST+0x514>)
 8001d68:	78da      	ldrb	r2, [r3, #3]
 8001d6a:	4b73      	ldr	r3, [pc, #460]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001d6c:	681c      	ldr	r4, [r3, #0]
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	1c59      	adds	r1, r3, #1
 8001d72:	8179      	strh	r1, [r7, #10]
 8001d74:	461d      	mov	r5, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 ffa6 	bl	8002cc8 <NibbleToHex>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	1963      	adds	r3, r4, r5
 8001d82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001d86:	4b6e      	ldr	r3, [pc, #440]	@ (8001f40 <send_DHCP_REQUEST+0x514>)
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001d90:	681c      	ldr	r4, [r3, #0]
 8001d92:	897b      	ldrh	r3, [r7, #10]
 8001d94:	1c59      	adds	r1, r3, #1
 8001d96:	8179      	strh	r1, [r7, #10]
 8001d98:	461d      	mov	r5, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 ff94 	bl	8002cc8 <NibbleToHex>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	1963      	adds	r3, r4, r5
 8001da6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001daa:	4b65      	ldr	r3, [pc, #404]	@ (8001f40 <send_DHCP_REQUEST+0x514>)
 8001dac:	791a      	ldrb	r2, [r3, #4]
 8001dae:	4b62      	ldr	r3, [pc, #392]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001db0:	681c      	ldr	r4, [r3, #0]
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	1c59      	adds	r1, r3, #1
 8001db6:	8179      	strh	r1, [r7, #10]
 8001db8:	461d      	mov	r5, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 ff84 	bl	8002cc8 <NibbleToHex>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	1963      	adds	r3, r4, r5
 8001dc6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001dca:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <send_DHCP_REQUEST+0x514>)
 8001dcc:	795b      	ldrb	r3, [r3, #5]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	8179      	strh	r1, [r7, #10]
 8001ddc:	461d      	mov	r5, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 ff72 	bl	8002cc8 <NibbleToHex>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	1963      	adds	r3, r4, r5
 8001dea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001dee:	4b54      	ldr	r3, [pc, #336]	@ (8001f40 <send_DHCP_REQUEST+0x514>)
 8001df0:	795a      	ldrb	r2, [r3, #5]
 8001df2:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	8179      	strh	r1, [r7, #10]
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f000 ff62 	bl	8002cc8 <NibbleToHex>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	1963      	adds	r3, r4, r5
 8001e0a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	4b49      	ldr	r3, [pc, #292]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	8978      	ldrh	r0, [r7, #10]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3307      	adds	r3, #7
 8001e1c:	1ac3      	subs	r3, r0, r3
 8001e1e:	3106      	adds	r1, #6
 8001e20:	b2c9      	uxtb	r1, r1
 8001e22:	4413      	add	r3, r2
 8001e24:	460a      	mov	r2, r1
 8001e26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001e2a:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	1c59      	adds	r1, r3, #1
 8001e32:	8179      	strh	r1, [r7, #10]
 8001e34:	4413      	add	r3, r2
 8001e36:	2237      	movs	r2, #55	@ 0x37
 8001e38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	897b      	ldrh	r3, [r7, #10]
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	8179      	strh	r1, [r7, #10]
 8001e46:	4413      	add	r3, r2
 8001e48:	2208      	movs	r2, #8
 8001e4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	897b      	ldrh	r3, [r7, #10]
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	8179      	strh	r1, [r7, #10]
 8001e58:	4413      	add	r3, r2
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001e60:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	897b      	ldrh	r3, [r7, #10]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	8179      	strh	r1, [r7, #10]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001e72:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	8179      	strh	r1, [r7, #10]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2206      	movs	r2, #6
 8001e80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001e84:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	8179      	strh	r1, [r7, #10]
 8001e8e:	4413      	add	r3, r2
 8001e90:	220f      	movs	r2, #15
 8001e92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	897b      	ldrh	r3, [r7, #10]
 8001e9c:	1c59      	adds	r1, r3, #1
 8001e9e:	8179      	strh	r1, [r7, #10]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	223a      	movs	r2, #58	@ 0x3a
 8001ea4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	8179      	strh	r1, [r7, #10]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	223b      	movs	r2, #59	@ 0x3b
 8001eb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	1c59      	adds	r1, r3, #1
 8001ec2:	8179      	strh	r1, [r7, #10]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	897b      	ldrh	r3, [r7, #10]
 8001ed2:	1c59      	adds	r1, r3, #1
 8001ed4:	8179      	strh	r1, [r7, #10]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	2221      	movs	r2, #33	@ 0x21
 8001eda:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	1c59      	adds	r1, r3, #1
 8001ee6:	8179      	strh	r1, [r7, #10]
 8001ee8:	4413      	add	r3, r2
 8001eea:	22ff      	movs	r2, #255	@ 0xff
 8001eec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e009      	b.n	8001f0a <send_DHCP_REQUEST+0x4de>
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	33ec      	adds	r3, #236	@ 0xec
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001f10:	dbf1      	blt.n	8001ef6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <send_DHCP_REQUEST+0x518>)
 8001f14:	f00a f92a 	bl	800c16c <puts>
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <send_DHCP_REQUEST+0x51c>)
 8001f1a:	7818      	ldrb	r0, [r3, #0]
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <send_DHCP_REQUEST+0x50c>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2243      	movs	r2, #67	@ 0x43
 8001f24:	9200      	str	r2, [sp, #0]
 8001f26:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001f2a:	f003 ff2d 	bl	8005d88 <sendto>

}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000de8 	.word	0x20000de8
 8001f3c:	20000084 	.word	0x20000084
 8001f40:	20000dec 	.word	0x20000dec
 8001f44:	0800d784 	.word	0x0800d784
 8001f48:	20000dbd 	.word	0x20000dbd

08001f4c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001f56:	f7ff faa7 	bl	80014a8 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001f5e:	4ba0      	ldr	r3, [pc, #640]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330a      	adds	r3, #10
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001f68:	4b9d      	ldr	r3, [pc, #628]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330a      	adds	r3, #10
 8001f6e:	3301      	adds	r3, #1
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001f74:	4b9a      	ldr	r3, [pc, #616]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	897b      	ldrh	r3, [r7, #10]
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	8179      	strh	r1, [r7, #10]
 8001f7e:	4413      	add	r3, r2
 8001f80:	2235      	movs	r2, #53	@ 0x35
 8001f82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001f86:	4b96      	ldr	r3, [pc, #600]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	1c59      	adds	r1, r3, #1
 8001f8e:	8179      	strh	r1, [r7, #10]
 8001f90:	4413      	add	r3, r2
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001f98:	4b91      	ldr	r3, [pc, #580]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	897b      	ldrh	r3, [r7, #10]
 8001f9e:	1c59      	adds	r1, r3, #1
 8001fa0:	8179      	strh	r1, [r7, #10]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001faa:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	897b      	ldrh	r3, [r7, #10]
 8001fb0:	1c59      	adds	r1, r3, #1
 8001fb2:	8179      	strh	r1, [r7, #10]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	223d      	movs	r2, #61	@ 0x3d
 8001fb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001fbc:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	897b      	ldrh	r3, [r7, #10]
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	8179      	strh	r1, [r7, #10]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2207      	movs	r2, #7
 8001fca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001fce:	4b84      	ldr	r3, [pc, #528]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	1c59      	adds	r1, r3, #1
 8001fd6:	8179      	strh	r1, [r7, #10]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	897b      	ldrh	r3, [r7, #10]
 8001fe6:	1c59      	adds	r1, r3, #1
 8001fe8:	8179      	strh	r1, [r7, #10]
 8001fea:	4618      	mov	r0, r3
 8001fec:	4b7d      	ldr	r3, [pc, #500]	@ (80021e4 <send_DHCP_DECLINE+0x298>)
 8001fee:	7819      	ldrb	r1, [r3, #0]
 8001ff0:	1813      	adds	r3, r2, r0
 8001ff2:	460a      	mov	r2, r1
 8001ff4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001ff8:	4b79      	ldr	r3, [pc, #484]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	1c59      	adds	r1, r3, #1
 8002000:	8179      	strh	r1, [r7, #10]
 8002002:	4618      	mov	r0, r3
 8002004:	4b77      	ldr	r3, [pc, #476]	@ (80021e4 <send_DHCP_DECLINE+0x298>)
 8002006:	7859      	ldrb	r1, [r3, #1]
 8002008:	1813      	adds	r3, r2, r0
 800200a:	460a      	mov	r2, r1
 800200c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002010:	4b73      	ldr	r3, [pc, #460]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	897b      	ldrh	r3, [r7, #10]
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	8179      	strh	r1, [r7, #10]
 800201a:	4618      	mov	r0, r3
 800201c:	4b71      	ldr	r3, [pc, #452]	@ (80021e4 <send_DHCP_DECLINE+0x298>)
 800201e:	7899      	ldrb	r1, [r3, #2]
 8002020:	1813      	adds	r3, r2, r0
 8002022:	460a      	mov	r2, r1
 8002024:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002028:	4b6d      	ldr	r3, [pc, #436]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	897b      	ldrh	r3, [r7, #10]
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	8179      	strh	r1, [r7, #10]
 8002032:	4618      	mov	r0, r3
 8002034:	4b6b      	ldr	r3, [pc, #428]	@ (80021e4 <send_DHCP_DECLINE+0x298>)
 8002036:	78d9      	ldrb	r1, [r3, #3]
 8002038:	1813      	adds	r3, r2, r0
 800203a:	460a      	mov	r2, r1
 800203c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002040:	4b67      	ldr	r3, [pc, #412]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	897b      	ldrh	r3, [r7, #10]
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	8179      	strh	r1, [r7, #10]
 800204a:	4618      	mov	r0, r3
 800204c:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <send_DHCP_DECLINE+0x298>)
 800204e:	7919      	ldrb	r1, [r3, #4]
 8002050:	1813      	adds	r3, r2, r0
 8002052:	460a      	mov	r2, r1
 8002054:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002058:	4b61      	ldr	r3, [pc, #388]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	8179      	strh	r1, [r7, #10]
 8002062:	4618      	mov	r0, r3
 8002064:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <send_DHCP_DECLINE+0x298>)
 8002066:	7959      	ldrb	r1, [r3, #5]
 8002068:	1813      	adds	r3, r2, r0
 800206a:	460a      	mov	r2, r1
 800206c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002070:	4b5b      	ldr	r3, [pc, #364]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	897b      	ldrh	r3, [r7, #10]
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	8179      	strh	r1, [r7, #10]
 800207a:	4413      	add	r3, r2
 800207c:	2232      	movs	r2, #50	@ 0x32
 800207e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002082:	4b57      	ldr	r3, [pc, #348]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	1c59      	adds	r1, r3, #1
 800208a:	8179      	strh	r1, [r7, #10]
 800208c:	4413      	add	r3, r2
 800208e:	2204      	movs	r2, #4
 8002090:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002094:	4b52      	ldr	r3, [pc, #328]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	897b      	ldrh	r3, [r7, #10]
 800209a:	1c59      	adds	r1, r3, #1
 800209c:	8179      	strh	r1, [r7, #10]
 800209e:	4618      	mov	r0, r3
 80020a0:	4b51      	ldr	r3, [pc, #324]	@ (80021e8 <send_DHCP_DECLINE+0x29c>)
 80020a2:	7819      	ldrb	r1, [r3, #0]
 80020a4:	1813      	adds	r3, r2, r0
 80020a6:	460a      	mov	r2, r1
 80020a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80020ac:	4b4c      	ldr	r3, [pc, #304]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	897b      	ldrh	r3, [r7, #10]
 80020b2:	1c59      	adds	r1, r3, #1
 80020b4:	8179      	strh	r1, [r7, #10]
 80020b6:	4618      	mov	r0, r3
 80020b8:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <send_DHCP_DECLINE+0x29c>)
 80020ba:	7859      	ldrb	r1, [r3, #1]
 80020bc:	1813      	adds	r3, r2, r0
 80020be:	460a      	mov	r2, r1
 80020c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80020c4:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	1c59      	adds	r1, r3, #1
 80020cc:	8179      	strh	r1, [r7, #10]
 80020ce:	4618      	mov	r0, r3
 80020d0:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <send_DHCP_DECLINE+0x29c>)
 80020d2:	7899      	ldrb	r1, [r3, #2]
 80020d4:	1813      	adds	r3, r2, r0
 80020d6:	460a      	mov	r2, r1
 80020d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80020dc:	4b40      	ldr	r3, [pc, #256]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	1c59      	adds	r1, r3, #1
 80020e4:	8179      	strh	r1, [r7, #10]
 80020e6:	4618      	mov	r0, r3
 80020e8:	4b3f      	ldr	r3, [pc, #252]	@ (80021e8 <send_DHCP_DECLINE+0x29c>)
 80020ea:	78d9      	ldrb	r1, [r3, #3]
 80020ec:	1813      	adds	r3, r2, r0
 80020ee:	460a      	mov	r2, r1
 80020f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80020f4:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	8179      	strh	r1, [r7, #10]
 80020fe:	4413      	add	r3, r2
 8002100:	2236      	movs	r2, #54	@ 0x36
 8002102:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8002106:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	897b      	ldrh	r3, [r7, #10]
 800210c:	1c59      	adds	r1, r3, #1
 800210e:	8179      	strh	r1, [r7, #10]
 8002110:	4413      	add	r3, r2
 8002112:	2204      	movs	r2, #4
 8002114:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002118:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	8179      	strh	r1, [r7, #10]
 8002122:	4618      	mov	r0, r3
 8002124:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <send_DHCP_DECLINE+0x2a0>)
 8002126:	7819      	ldrb	r1, [r3, #0]
 8002128:	1813      	adds	r3, r2, r0
 800212a:	460a      	mov	r2, r1
 800212c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	897b      	ldrh	r3, [r7, #10]
 8002136:	1c59      	adds	r1, r3, #1
 8002138:	8179      	strh	r1, [r7, #10]
 800213a:	4618      	mov	r0, r3
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <send_DHCP_DECLINE+0x2a0>)
 800213e:	7859      	ldrb	r1, [r3, #1]
 8002140:	1813      	adds	r3, r2, r0
 8002142:	460a      	mov	r2, r1
 8002144:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	897b      	ldrh	r3, [r7, #10]
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	8179      	strh	r1, [r7, #10]
 8002152:	4618      	mov	r0, r3
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <send_DHCP_DECLINE+0x2a0>)
 8002156:	7899      	ldrb	r1, [r3, #2]
 8002158:	1813      	adds	r3, r2, r0
 800215a:	460a      	mov	r2, r1
 800215c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002160:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	1c59      	adds	r1, r3, #1
 8002168:	8179      	strh	r1, [r7, #10]
 800216a:	4618      	mov	r0, r3
 800216c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <send_DHCP_DECLINE+0x2a0>)
 800216e:	78d9      	ldrb	r1, [r3, #3]
 8002170:	1813      	adds	r3, r2, r0
 8002172:	460a      	mov	r2, r1
 8002174:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	897b      	ldrh	r3, [r7, #10]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	8179      	strh	r1, [r7, #10]
 8002182:	4413      	add	r3, r2
 8002184:	22ff      	movs	r2, #255	@ 0xff
 8002186:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800218a:	897b      	ldrh	r3, [r7, #10]
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e009      	b.n	80021a4 <send_DHCP_DECLINE+0x258>
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	33ec      	adds	r3, #236	@ 0xec
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80021aa:	dbf1      	blt.n	8002190 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80021ac:	23ff      	movs	r3, #255	@ 0xff
 80021ae:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80021b0:	23ff      	movs	r3, #255	@ 0xff
 80021b2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80021b4:	23ff      	movs	r3, #255	@ 0xff
 80021b6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80021b8:	23ff      	movs	r3, #255	@ 0xff
 80021ba:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
 80021bc:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <send_DHCP_DECLINE+0x2a4>)
 80021be:	f009 ffd5 	bl	800c16c <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <send_DHCP_DECLINE+0x2a8>)
 80021c4:	7818      	ldrb	r0, [r3, #0]
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <send_DHCP_DECLINE+0x294>)
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2243      	movs	r2, #67	@ 0x43
 80021ce:	9200      	str	r2, [sp, #0]
 80021d0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80021d4:	f003 fdd8 	bl	8005d88 <sendto>
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000de8 	.word	0x20000de8
 80021e4:	20000dec 	.word	0x20000dec
 80021e8:	20000dcc 	.word	0x20000dcc
 80021ec:	20000dc0 	.word	0x20000dc0
 80021f0:	0800d79c 	.word	0x0800d79c
 80021f4:	20000dbd 	.word	0x20000dbd

080021f8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af04      	add	r7, sp, #16
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8002202:	4b9e      	ldr	r3, [pc, #632]	@ (800247c <parseDHCPMSG+0x284>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fffb 	bl	8005202 <getSn_RX_RSR>
 800220c:	4603      	mov	r3, r0
 800220e:	823b      	strh	r3, [r7, #16]
 8002210:	8a3b      	ldrh	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d025      	beq.n	8002262 <parseDHCPMSG+0x6a>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8002216:	4b99      	ldr	r3, [pc, #612]	@ (800247c <parseDHCPMSG+0x284>)
 8002218:	7818      	ldrb	r0, [r3, #0]
 800221a:	4b99      	ldr	r3, [pc, #612]	@ (8002480 <parseDHCPMSG+0x288>)
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	1d3c      	adds	r4, r7, #4
 8002220:	8a3a      	ldrh	r2, [r7, #16]
 8002222:	1cbb      	adds	r3, r7, #2
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4623      	mov	r3, r4
 8002228:	f003 fee2 	bl	8005ff0 <recvfrom>
 800222c:	4603      	mov	r3, r0
 800222e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
 8002230:	793b      	ldrb	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	797b      	ldrb	r3, [r7, #5]
 8002236:	461c      	mov	r4, r3
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	461d      	mov	r5, r3
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	461a      	mov	r2, r3
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4619      	mov	r1, r3
 8002244:	8a3b      	ldrh	r3, [r7, #16]
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	9101      	str	r1, [sp, #4]
 800224a:	9200      	str	r2, [sp, #0]
 800224c:	462b      	mov	r3, r5
 800224e:	4622      	mov	r2, r4
 8002250:	4601      	mov	r1, r0
 8002252:	488c      	ldr	r0, [pc, #560]	@ (8002484 <parseDHCPMSG+0x28c>)
 8002254:	f009 ff22 	bl	800c09c <iprintf>
   #endif   
   }
   else
	   return 0;

	if (svr_port == DHCP_SERVER_PORT) {
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	2b43      	cmp	r3, #67	@ 0x43
 800225c:	f040 81f9 	bne.w	8002652 <parseDHCPMSG+0x45a>
 8002260:	e001      	b.n	8002266 <parseDHCPMSG+0x6e>
	   return 0;
 8002262:	2300      	movs	r3, #0
 8002264:	e1f7      	b.n	8002656 <parseDHCPMSG+0x45e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8002266:	4b86      	ldr	r3, [pc, #536]	@ (8002480 <parseDHCPMSG+0x288>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	7f1a      	ldrb	r2, [r3, #28]
 800226c:	4b86      	ldr	r3, [pc, #536]	@ (8002488 <parseDHCPMSG+0x290>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d124      	bne.n	80022be <parseDHCPMSG+0xc6>
 8002274:	4b82      	ldr	r3, [pc, #520]	@ (8002480 <parseDHCPMSG+0x288>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	7f5a      	ldrb	r2, [r3, #29]
 800227a:	4b83      	ldr	r3, [pc, #524]	@ (8002488 <parseDHCPMSG+0x290>)
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	429a      	cmp	r2, r3
 8002280:	d11d      	bne.n	80022be <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002282:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <parseDHCPMSG+0x288>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	7f9a      	ldrb	r2, [r3, #30]
 8002288:	4b7f      	ldr	r3, [pc, #508]	@ (8002488 <parseDHCPMSG+0x290>)
 800228a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d116      	bne.n	80022be <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002290:	4b7b      	ldr	r3, [pc, #492]	@ (8002480 <parseDHCPMSG+0x288>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	7fda      	ldrb	r2, [r3, #31]
 8002296:	4b7c      	ldr	r3, [pc, #496]	@ (8002488 <parseDHCPMSG+0x290>)
 8002298:	78db      	ldrb	r3, [r3, #3]
 800229a:	429a      	cmp	r2, r3
 800229c:	d10f      	bne.n	80022be <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800229e:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <parseDHCPMSG+0x288>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80022a6:	4b78      	ldr	r3, [pc, #480]	@ (8002488 <parseDHCPMSG+0x290>)
 80022a8:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d107      	bne.n	80022be <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80022ae:	4b74      	ldr	r3, [pc, #464]	@ (8002480 <parseDHCPMSG+0x288>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80022b6:	4b74      	ldr	r3, [pc, #464]	@ (8002488 <parseDHCPMSG+0x290>)
 80022b8:	795b      	ldrb	r3, [r3, #5]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d004      	beq.n	80022c8 <parseDHCPMSG+0xd0>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
 80022be:	4873      	ldr	r0, [pc, #460]	@ (800248c <parseDHCPMSG+0x294>)
 80022c0:	f009 ff54 	bl	800c16c <puts>
#endif
         return 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e1c6      	b.n	8002656 <parseDHCPMSG+0x45e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80022c8:	4b71      	ldr	r3, [pc, #452]	@ (8002490 <parseDHCPMSG+0x298>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <parseDHCPMSG+0xf0>
 80022d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002490 <parseDHCPMSG+0x298>)
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <parseDHCPMSG+0xf0>
 80022d8:	4b6d      	ldr	r3, [pc, #436]	@ (8002490 <parseDHCPMSG+0x298>)
 80022da:	789b      	ldrb	r3, [r3, #2]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <parseDHCPMSG+0xf0>
 80022e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002490 <parseDHCPMSG+0x298>)
 80022e2:	78db      	ldrb	r3, [r3, #3]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02c      	beq.n	8002342 <parseDHCPMSG+0x14a>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80022e8:	793a      	ldrb	r2, [r7, #4]
 80022ea:	4b69      	ldr	r3, [pc, #420]	@ (8002490 <parseDHCPMSG+0x298>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10e      	bne.n	8002310 <parseDHCPMSG+0x118>
 80022f2:	797a      	ldrb	r2, [r7, #5]
 80022f4:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <parseDHCPMSG+0x298>)
 80022f6:	785b      	ldrb	r3, [r3, #1]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d109      	bne.n	8002310 <parseDHCPMSG+0x118>
 80022fc:	79ba      	ldrb	r2, [r7, #6]
 80022fe:	4b64      	ldr	r3, [pc, #400]	@ (8002490 <parseDHCPMSG+0x298>)
 8002300:	789b      	ldrb	r3, [r3, #2]
 8002302:	429a      	cmp	r2, r3
 8002304:	d104      	bne.n	8002310 <parseDHCPMSG+0x118>
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	4b61      	ldr	r3, [pc, #388]	@ (8002490 <parseDHCPMSG+0x298>)
 800230a:	78db      	ldrb	r3, [r3, #3]
 800230c:	429a      	cmp	r2, r3
 800230e:	d018      	beq.n	8002342 <parseDHCPMSG+0x14a>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002310:	793a      	ldrb	r2, [r7, #4]
 8002312:	4b60      	ldr	r3, [pc, #384]	@ (8002494 <parseDHCPMSG+0x29c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002316:	429a      	cmp	r2, r3
 8002318:	d10e      	bne.n	8002338 <parseDHCPMSG+0x140>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800231a:	797a      	ldrb	r2, [r7, #5]
 800231c:	4b5d      	ldr	r3, [pc, #372]	@ (8002494 <parseDHCPMSG+0x29c>)
 800231e:	785b      	ldrb	r3, [r3, #1]
 8002320:	429a      	cmp	r2, r3
 8002322:	d109      	bne.n	8002338 <parseDHCPMSG+0x140>
 8002324:	79ba      	ldrb	r2, [r7, #6]
 8002326:	4b5b      	ldr	r3, [pc, #364]	@ (8002494 <parseDHCPMSG+0x29c>)
 8002328:	789b      	ldrb	r3, [r3, #2]
 800232a:	429a      	cmp	r2, r3
 800232c:	d104      	bne.n	8002338 <parseDHCPMSG+0x140>
 800232e:	79fa      	ldrb	r2, [r7, #7]
 8002330:	4b58      	ldr	r3, [pc, #352]	@ (8002494 <parseDHCPMSG+0x29c>)
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	429a      	cmp	r2, r3
 8002336:	d004      	beq.n	8002342 <parseDHCPMSG+0x14a>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8002338:	4857      	ldr	r0, [pc, #348]	@ (8002498 <parseDHCPMSG+0x2a0>)
 800233a:	f009 ff17 	bl	800c16c <puts>
#endif
                return 0;
 800233e:	2300      	movs	r3, #0
 8002340:	e189      	b.n	8002656 <parseDHCPMSG+0x45e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8002342:	4b4f      	ldr	r3, [pc, #316]	@ (8002480 <parseDHCPMSG+0x288>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	33f0      	adds	r3, #240	@ 0xf0
 800234c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800234e:	8a3b      	ldrh	r3, [r7, #16]
 8002350:	3bf0      	subs	r3, #240	@ 0xf0
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8002358:	e176      	b.n	8002648 <parseDHCPMSG+0x450>

			switch ( *p ) {
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b36      	cmp	r3, #54	@ 0x36
 8002360:	dc76      	bgt.n	8002450 <parseDHCPMSG+0x258>
 8002362:	2b00      	cmp	r3, #0
 8002364:	f2c0 8163 	blt.w	800262e <parseDHCPMSG+0x436>
 8002368:	2b36      	cmp	r3, #54	@ 0x36
 800236a:	f200 8160 	bhi.w	800262e <parseDHCPMSG+0x436>
 800236e:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <parseDHCPMSG+0x17c>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	0800245d 	.word	0x0800245d
 8002378:	0800249d 	.word	0x0800249d
 800237c:	0800262f 	.word	0x0800262f
 8002380:	080024db 	.word	0x080024db
 8002384:	0800262f 	.word	0x0800262f
 8002388:	0800262f 	.word	0x0800262f
 800238c:	08002527 	.word	0x08002527
 8002390:	0800262f 	.word	0x0800262f
 8002394:	0800262f 	.word	0x0800262f
 8002398:	0800262f 	.word	0x0800262f
 800239c:	0800262f 	.word	0x0800262f
 80023a0:	0800262f 	.word	0x0800262f
 80023a4:	0800262f 	.word	0x0800262f
 80023a8:	0800262f 	.word	0x0800262f
 80023ac:	0800262f 	.word	0x0800262f
 80023b0:	0800262f 	.word	0x0800262f
 80023b4:	0800262f 	.word	0x0800262f
 80023b8:	0800262f 	.word	0x0800262f
 80023bc:	0800262f 	.word	0x0800262f
 80023c0:	0800262f 	.word	0x0800262f
 80023c4:	0800262f 	.word	0x0800262f
 80023c8:	0800262f 	.word	0x0800262f
 80023cc:	0800262f 	.word	0x0800262f
 80023d0:	0800262f 	.word	0x0800262f
 80023d4:	0800262f 	.word	0x0800262f
 80023d8:	0800262f 	.word	0x0800262f
 80023dc:	0800262f 	.word	0x0800262f
 80023e0:	0800262f 	.word	0x0800262f
 80023e4:	0800262f 	.word	0x0800262f
 80023e8:	0800262f 	.word	0x0800262f
 80023ec:	0800262f 	.word	0x0800262f
 80023f0:	0800262f 	.word	0x0800262f
 80023f4:	0800262f 	.word	0x0800262f
 80023f8:	0800262f 	.word	0x0800262f
 80023fc:	0800262f 	.word	0x0800262f
 8002400:	0800262f 	.word	0x0800262f
 8002404:	0800262f 	.word	0x0800262f
 8002408:	0800262f 	.word	0x0800262f
 800240c:	0800262f 	.word	0x0800262f
 8002410:	0800262f 	.word	0x0800262f
 8002414:	0800262f 	.word	0x0800262f
 8002418:	0800262f 	.word	0x0800262f
 800241c:	0800262f 	.word	0x0800262f
 8002420:	0800262f 	.word	0x0800262f
 8002424:	0800262f 	.word	0x0800262f
 8002428:	0800262f 	.word	0x0800262f
 800242c:	0800262f 	.word	0x0800262f
 8002430:	0800262f 	.word	0x0800262f
 8002434:	0800262f 	.word	0x0800262f
 8002438:	0800262f 	.word	0x0800262f
 800243c:	0800262f 	.word	0x0800262f
 8002440:	08002573 	.word	0x08002573
 8002444:	0800262f 	.word	0x0800262f
 8002448:	08002465 	.word	0x08002465
 800244c:	080025d5 	.word	0x080025d5
 8002450:	2bff      	cmp	r3, #255	@ 0xff
 8002452:	f040 80ec 	bne.w	800262e <parseDHCPMSG+0x436>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	617b      	str	r3, [r7, #20]
   				break;
 800245a:	e0f5      	b.n	8002648 <parseDHCPMSG+0x450>
            case padOption :
   				p++;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3301      	adds	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
   				break;
 8002462:	e0f1      	b.n	8002648 <parseDHCPMSG+0x450>
   			case dhcpMessageType :
   				p++;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
   				p++;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	617a      	str	r2, [r7, #20]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	74fb      	strb	r3, [r7, #19]
   				break;
 800247a:	e0e5      	b.n	8002648 <parseDHCPMSG+0x450>
 800247c:	20000dbd 	.word	0x20000dbd
 8002480:	20000de8 	.word	0x20000de8
 8002484:	0800d7b4 	.word	0x0800d7b4
 8002488:	20000dec 	.word	0x20000dec
 800248c:	0800d7e4 	.word	0x0800d7e4
 8002490:	20000dc0 	.word	0x20000dc0
 8002494:	20000dc4 	.word	0x20000dc4
 8002498:	0800d814 	.word	0x0800d814
   			case subnetMask :
   				p++;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
   				p++;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	617a      	str	r2, [r7, #20]
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002660 <parseDHCPMSG+0x468>)
 80024b2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	617a      	str	r2, [r7, #20]
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	4b68      	ldr	r3, [pc, #416]	@ (8002660 <parseDHCPMSG+0x468>)
 80024be:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	617a      	str	r2, [r7, #20]
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <parseDHCPMSG+0x468>)
 80024ca:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	617a      	str	r2, [r7, #20]
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	4b62      	ldr	r3, [pc, #392]	@ (8002660 <parseDHCPMSG+0x468>)
 80024d6:	70da      	strb	r2, [r3, #3]
   				break;
 80024d8:	e0b6      	b.n	8002648 <parseDHCPMSG+0x450>
   			case routersOnSubnet :
   				p++;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	617a      	str	r2, [r7, #20]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	617a      	str	r2, [r7, #20]
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002664 <parseDHCPMSG+0x46c>)
 80024f4:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	617a      	str	r2, [r7, #20]
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <parseDHCPMSG+0x46c>)
 8002500:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	617a      	str	r2, [r7, #20]
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b56      	ldr	r3, [pc, #344]	@ (8002664 <parseDHCPMSG+0x46c>)
 800250c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	617a      	str	r2, [r7, #20]
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <parseDHCPMSG+0x46c>)
 8002518:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800251a:	7afb      	ldrb	r3, [r7, #11]
 800251c:	3b04      	subs	r3, #4
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
   				break;
 8002524:	e090      	b.n	8002648 <parseDHCPMSG+0x450>
   			case dns :
   				p++;                  
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	617a      	str	r2, [r7, #20]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	617a      	str	r2, [r7, #20]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <parseDHCPMSG+0x470>)
 8002540:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	617a      	str	r2, [r7, #20]
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <parseDHCPMSG+0x470>)
 800254c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	617a      	str	r2, [r7, #20]
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <parseDHCPMSG+0x470>)
 8002558:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	617a      	str	r2, [r7, #20]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <parseDHCPMSG+0x470>)
 8002564:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	3b04      	subs	r3, #4
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4413      	add	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
   				break;
 8002570:	e06a      	b.n	8002648 <parseDHCPMSG+0x450>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	617a      	str	r2, [r7, #20]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	617a      	str	r2, [r7, #20]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <parseDHCPMSG+0x474>)
 800258e:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002590:	4b36      	ldr	r3, [pc, #216]	@ (800266c <parseDHCPMSG+0x474>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	021a      	lsls	r2, r3, #8
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	6179      	str	r1, [r7, #20]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a32      	ldr	r2, [pc, #200]	@ (800266c <parseDHCPMSG+0x474>)
 80025a2:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80025a4:	4b31      	ldr	r3, [pc, #196]	@ (800266c <parseDHCPMSG+0x474>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1c59      	adds	r1, r3, #1
 80025ae:	6179      	str	r1, [r7, #20]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a2d      	ldr	r2, [pc, #180]	@ (800266c <parseDHCPMSG+0x474>)
 80025b6:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80025b8:	4b2c      	ldr	r3, [pc, #176]	@ (800266c <parseDHCPMSG+0x474>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1c59      	adds	r1, r3, #1
 80025c2:	6179      	str	r1, [r7, #20]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a28      	ldr	r2, [pc, #160]	@ (800266c <parseDHCPMSG+0x474>)
 80025ca:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <parseDHCPMSG+0x474>)
 80025ce:	220a      	movs	r2, #10
 80025d0:	601a      	str	r2, [r3, #0]
 				#endif
   				break;
 80025d2:	e039      	b.n	8002648 <parseDHCPMSG+0x450>
   			case dhcpServerIdentifier :
   				p++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	617a      	str	r2, [r7, #20]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	617a      	str	r2, [r7, #20]
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <parseDHCPMSG+0x478>)
 80025ee:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	617a      	str	r2, [r7, #20]
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <parseDHCPMSG+0x478>)
 80025fa:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	617a      	str	r2, [r7, #20]
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <parseDHCPMSG+0x478>)
 8002606:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	617a      	str	r2, [r7, #20]
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <parseDHCPMSG+0x478>)
 8002612:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002614:	793a      	ldrb	r2, [r7, #4]
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <parseDHCPMSG+0x47c>)
 8002618:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800261a:	797a      	ldrb	r2, [r7, #5]
 800261c:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <parseDHCPMSG+0x47c>)
 800261e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002620:	79ba      	ldrb	r2, [r7, #6]
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <parseDHCPMSG+0x47c>)
 8002624:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002626:	79fa      	ldrb	r2, [r7, #7]
 8002628:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <parseDHCPMSG+0x47c>)
 800262a:	70da      	strb	r2, [r3, #3]
   				break;
 800262c:	e00c      	b.n	8002648 <parseDHCPMSG+0x450>
   			default :
   				p++;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	617a      	str	r2, [r7, #20]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4413      	add	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
   				break;
 8002646:	bf00      	nop
		while ( p < e ) {
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	f4ff ae84 	bcc.w	800235a <parseDHCPMSG+0x162>
			} // switch
		} // while
	} // if
	return	type;
 8002652:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bdb0      	pop	{r4, r5, r7, pc}
 800265e:	bf00      	nop
 8002660:	20000dd4 	.word	0x20000dd4
 8002664:	20000dd0 	.word	0x20000dd0
 8002668:	20000dd8 	.word	0x20000dd8
 800266c:	2000007c 	.word	0x2000007c
 8002670:	20000dc0 	.word	0x20000dc0
 8002674:	20000dc4 	.word	0x20000dc4

08002678 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800267e:	4b8f      	ldr	r3, [pc, #572]	@ (80028bc <DHCP_run+0x244>)
 8002680:	f993 3000 	ldrsb.w	r3, [r3]
 8002684:	2b06      	cmp	r3, #6
 8002686:	d101      	bne.n	800268c <DHCP_run+0x14>
 8002688:	2305      	movs	r3, #5
 800268a:	e112      	b.n	80028b2 <DHCP_run+0x23a>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800268c:	4b8c      	ldr	r3, [pc, #560]	@ (80028c0 <DHCP_run+0x248>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	3301      	adds	r3, #1
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fc0e 	bl	8004ebc <WIZCHIP_READ>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b22      	cmp	r3, #34	@ 0x22
 80026a4:	d006      	beq.n	80026b4 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80026a6:	4b86      	ldr	r3, [pc, #536]	@ (80028c0 <DHCP_run+0x248>)
 80026a8:	7818      	ldrb	r0, [r3, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	2244      	movs	r2, #68	@ 0x44
 80026ae:	2102      	movs	r1, #2
 80026b0:	f002 feea 	bl	8005488 <socket>

	ret = DHCP_RUNNING;
 80026b4:	2301      	movs	r3, #1
 80026b6:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80026b8:	f7ff fd9e 	bl	80021f8 <parseDHCPMSG>
 80026bc:	4603      	mov	r3, r0
 80026be:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80026c0:	4b7e      	ldr	r3, [pc, #504]	@ (80028bc <DHCP_run+0x244>)
 80026c2:	f993 3000 	ldrsb.w	r3, [r3]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	f200 80ef 	bhi.w	80028aa <DHCP_run+0x232>
 80026cc:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <DHCP_run+0x5c>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e9 	.word	0x080026e9
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	08002757 	.word	0x08002757
 80026e0:	080027b3 	.word	0x080027b3
 80026e4:	0800281f 	.word	0x0800281f
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80026e8:	4b76      	ldr	r3, [pc, #472]	@ (80028c4 <DHCP_run+0x24c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80026ee:	4b75      	ldr	r3, [pc, #468]	@ (80028c4 <DHCP_run+0x24c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80026f4:	4b73      	ldr	r3, [pc, #460]	@ (80028c4 <DHCP_run+0x24c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80026fa:	4b72      	ldr	r3, [pc, #456]	@ (80028c4 <DHCP_run+0x24c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002700:	f7fe ffc8 	bl	8001694 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8002704:	4b6d      	ldr	r3, [pc, #436]	@ (80028bc <DHCP_run+0x244>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
   		break;
 800270a:	e0d1      	b.n	80028b0 <DHCP_run+0x238>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800270c:	79bb      	ldrb	r3, [r7, #6]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d11c      	bne.n	800274c <DHCP_run+0xd4>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
 8002712:	486d      	ldr	r0, [pc, #436]	@ (80028c8 <DHCP_run+0x250>)
 8002714:	f009 fd2a 	bl	800c16c <puts>
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8002718:	4b6c      	ldr	r3, [pc, #432]	@ (80028cc <DHCP_run+0x254>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7c1a      	ldrb	r2, [r3, #16]
 800271e:	4b69      	ldr	r3, [pc, #420]	@ (80028c4 <DHCP_run+0x24c>)
 8002720:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002722:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <DHCP_run+0x254>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	7c5a      	ldrb	r2, [r3, #17]
 8002728:	4b66      	ldr	r3, [pc, #408]	@ (80028c4 <DHCP_run+0x24c>)
 800272a:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800272c:	4b67      	ldr	r3, [pc, #412]	@ (80028cc <DHCP_run+0x254>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	7c9a      	ldrb	r2, [r3, #18]
 8002732:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <DHCP_run+0x24c>)
 8002734:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <DHCP_run+0x254>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	7cda      	ldrb	r2, [r3, #19]
 800273c:	4b61      	ldr	r3, [pc, #388]	@ (80028c4 <DHCP_run+0x24c>)
 800273e:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002740:	f7ff f974 	bl	8001a2c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002744:	4b5d      	ldr	r3, [pc, #372]	@ (80028bc <DHCP_run+0x244>)
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800274a:	e0b1      	b.n	80028b0 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 800274c:	f000 f8e0 	bl	8002910 <check_DHCP_timeout>
 8002750:	4603      	mov	r3, r0
 8002752:	71fb      	strb	r3, [r7, #7]
         break;
 8002754:	e0ac      	b.n	80028b0 <DHCP_run+0x238>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d119      	bne.n	8002790 <DHCP_run+0x118>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
 800275c:	485c      	ldr	r0, [pc, #368]	@ (80028d0 <DHCP_run+0x258>)
 800275e:	f009 fd05 	bl	800c16c <puts>
#endif
				if (check_DHCP_leasedIP()) {
 8002762:	f000 f935 	bl	80029d0 <check_DHCP_leasedIP>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <DHCP_run+0x106>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800276c:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <DHCP_run+0x25c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4798      	blx	r3
					reset_DHCP_timeout();
 8002772:	f000 fa05 	bl	8002b80 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <DHCP_run+0x244>)
 8002778:	2203      	movs	r2, #3
 800277a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800277c:	e098      	b.n	80028b0 <DHCP_run+0x238>
					reset_DHCP_timeout();
 800277e:	f000 f9ff 	bl	8002b80 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002782:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <DHCP_run+0x260>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002788:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <DHCP_run+0x244>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
		break;
 800278e:	e08f      	b.n	80028b0 <DHCP_run+0x238>
			} else if (type == DHCP_NAK) {
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d108      	bne.n	80027a8 <DHCP_run+0x130>
				printf("> Receive DHCP_NACK\r\n");
 8002796:	4851      	ldr	r0, [pc, #324]	@ (80028dc <DHCP_run+0x264>)
 8002798:	f009 fce8 	bl	800c16c <puts>
				reset_DHCP_timeout();
 800279c:	f000 f9f0 	bl	8002b80 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80027a0:	4b46      	ldr	r3, [pc, #280]	@ (80028bc <DHCP_run+0x244>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
		break;
 80027a6:	e083      	b.n	80028b0 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 80027a8:	f000 f8b2 	bl	8002910 <check_DHCP_timeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
		break;
 80027b0:	e07e      	b.n	80028b0 <DHCP_run+0x238>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80027b2:	2304      	movs	r3, #4
 80027b4:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80027b6:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <DHCP_run+0x268>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d076      	beq.n	80028ae <DHCP_run+0x236>
 80027c0:	4b47      	ldr	r3, [pc, #284]	@ (80028e0 <DHCP_run+0x268>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	085a      	lsrs	r2, r3, #1
 80027c6:	4b47      	ldr	r3, [pc, #284]	@ (80028e4 <DHCP_run+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d26f      	bcs.n	80028ae <DHCP_run+0x236>
				
#ifdef _DHCP_DEBUG_
				 StateChangeFlag = true;
 80027ce:	4b46      	ldr	r3, [pc, #280]	@ (80028e8 <DHCP_run+0x270>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
				tempflag = false;
 80027d4:	4b45      	ldr	r3, [pc, #276]	@ (80028ec <DHCP_run+0x274>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 				printf("> Maintains the IP address \r\n");
 80027da:	4845      	ldr	r0, [pc, #276]	@ (80028f0 <DHCP_run+0x278>)
 80027dc:	f009 fcc6 	bl	800c16c <puts>
#endif

				type = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80027e4:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <DHCP_run+0x24c>)
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <DHCP_run+0x27c>)
 80027ea:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80027ec:	4b35      	ldr	r3, [pc, #212]	@ (80028c4 <DHCP_run+0x24c>)
 80027ee:	785a      	ldrb	r2, [r3, #1]
 80027f0:	4b40      	ldr	r3, [pc, #256]	@ (80028f4 <DHCP_run+0x27c>)
 80027f2:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80027f4:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <DHCP_run+0x24c>)
 80027f6:	789a      	ldrb	r2, [r3, #2]
 80027f8:	4b3e      	ldr	r3, [pc, #248]	@ (80028f4 <DHCP_run+0x27c>)
 80027fa:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80027fc:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <DHCP_run+0x24c>)
 80027fe:	78da      	ldrb	r2, [r3, #3]
 8002800:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <DHCP_run+0x27c>)
 8002802:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002804:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <DHCP_run+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	4a3b      	ldr	r2, [pc, #236]	@ (80028f8 <DHCP_run+0x280>)
 800280c:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800280e:	f7ff f90d 	bl	8001a2c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8002812:	f000 f9b5 	bl	8002b80 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8002816:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <DHCP_run+0x244>)
 8002818:	2204      	movs	r2, #4
 800281a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800281c:	e047      	b.n	80028ae <DHCP_run+0x236>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800281e:	2304      	movs	r3, #4
 8002820:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d12f      	bne.n	8002888 <DHCP_run+0x210>
				dhcp_retry_count = 0;
 8002828:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <DHCP_run+0x284>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800282e:	4b31      	ldr	r3, [pc, #196]	@ (80028f4 <DHCP_run+0x27c>)
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <DHCP_run+0x24c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d111      	bne.n	800285e <DHCP_run+0x1e6>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800283a:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <DHCP_run+0x27c>)
 800283c:	785a      	ldrb	r2, [r3, #1]
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <DHCP_run+0x24c>)
 8002840:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002842:	429a      	cmp	r2, r3
 8002844:	d10b      	bne.n	800285e <DHCP_run+0x1e6>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002846:	4b2b      	ldr	r3, [pc, #172]	@ (80028f4 <DHCP_run+0x27c>)
 8002848:	789a      	ldrb	r2, [r3, #2]
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <DHCP_run+0x24c>)
 800284c:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d105      	bne.n	800285e <DHCP_run+0x1e6>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002852:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <DHCP_run+0x27c>)
 8002854:	78da      	ldrb	r2, [r3, #3]
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <DHCP_run+0x24c>)
 8002858:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d008      	beq.n	8002870 <DHCP_run+0x1f8>
				{
					ret = DHCP_IP_CHANGED;
 800285e:	2303      	movs	r3, #3
 8002860:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002862:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <DHCP_run+0x288>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4798      	blx	r3
               #ifdef _DHCP_DEBUG_
                  printf(">IP changed.\r\n");
 8002868:	4826      	ldr	r0, [pc, #152]	@ (8002904 <DHCP_run+0x28c>)
 800286a:	f009 fc7f 	bl	800c16c <puts>
 800286e:	e005      	b.n	800287c <DHCP_run+0x204>
					
				}
         #ifdef _DHCP_DEBUG_
            else
            	{
            	  StateChangeFlag = true;
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <DHCP_run+0x270>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
            	  printf(">IP is continued.\r\n");
 8002876:	4824      	ldr	r0, [pc, #144]	@ (8002908 <DHCP_run+0x290>)
 8002878:	f009 fc78 	bl	800c16c <puts>
            	}
         #endif            				
				reset_DHCP_timeout();
 800287c:	f000 f980 	bl	8002b80 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <DHCP_run+0x244>)
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8002886:	e013      	b.n	80028b0 <DHCP_run+0x238>
			} else if (type == DHCP_NAK) {
 8002888:	79bb      	ldrb	r3, [r7, #6]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d108      	bne.n	80028a0 <DHCP_run+0x228>
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 800288e:	481f      	ldr	r0, [pc, #124]	@ (800290c <DHCP_run+0x294>)
 8002890:	f009 fc6c 	bl	800c16c <puts>
				reset_DHCP_timeout();
 8002894:	f000 f974 	bl	8002b80 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <DHCP_run+0x244>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
	   	break;
 800289e:	e007      	b.n	80028b0 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 80028a0:	f000 f836 	bl	8002910 <check_DHCP_timeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
	   	break;
 80028a8:	e002      	b.n	80028b0 <DHCP_run+0x238>
		default :
   		break;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <DHCP_run+0x238>
		break;
 80028ae:	bf00      	nop
	}

	return ret;
 80028b0:	79fb      	ldrb	r3, [r7, #7]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000ddc 	.word	0x20000ddc
 80028c0:	20000dbd 	.word	0x20000dbd
 80028c4:	20000dcc 	.word	0x20000dcc
 80028c8:	0800d854 	.word	0x0800d854
 80028cc:	20000de8 	.word	0x20000de8
 80028d0:	0800d86c 	.word	0x0800d86c
 80028d4:	2000008c 	.word	0x2000008c
 80028d8:	20000094 	.word	0x20000094
 80028dc:	0800d880 	.word	0x0800d880
 80028e0:	2000007c 	.word	0x2000007c
 80028e4:	20000de0 	.word	0x20000de0
 80028e8:	20000dbc 	.word	0x20000dbc
 80028ec:	20000d6c 	.word	0x20000d6c
 80028f0:	0800d898 	.word	0x0800d898
 80028f4:	20000dc8 	.word	0x20000dc8
 80028f8:	20000de4 	.word	0x20000de4
 80028fc:	20000ddd 	.word	0x20000ddd
 8002900:	20000090 	.word	0x20000090
 8002904:	0800d8b8 	.word	0x0800d8b8
 8002908:	0800d8c8 	.word	0x0800d8c8
 800290c:	0800d8dc 	.word	0x0800d8dc

08002910 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8002916:	2301      	movs	r3, #1
 8002918:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <check_DHCP_timeout+0xb0>)
 800291c:	f993 3000 	ldrsb.w	r3, [r3]
 8002920:	2b01      	cmp	r3, #1
 8002922:	dc2d      	bgt.n	8002980 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002924:	4b27      	ldr	r3, [pc, #156]	@ (80029c4 <check_DHCP_timeout+0xb4>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <check_DHCP_timeout+0xb8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d242      	bcs.n	80029b6 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002930:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <check_DHCP_timeout+0xbc>)
 8002932:	f993 3000 	ldrsb.w	r3, [r3]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d00c      	beq.n	8002954 <check_DHCP_timeout+0x44>
 800293a:	2b04      	cmp	r3, #4
 800293c:	dc0d      	bgt.n	800295a <check_DHCP_timeout+0x4a>
 800293e:	2b01      	cmp	r3, #1
 8002940:	d002      	beq.n	8002948 <check_DHCP_timeout+0x38>
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8002946:	e008      	b.n	800295a <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002948:	f7fe fea4 	bl	8001694 <send_DHCP_DISCOVER>
				break;
 800294c:	e006      	b.n	800295c <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800294e:	f7ff f86d 	bl	8001a2c <send_DHCP_REQUEST>
				break;
 8002952:	e003      	b.n	800295c <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002954:	f7ff f86a 	bl	8001a2c <send_DHCP_REQUEST>
				break;
 8002958:	e000      	b.n	800295c <check_DHCP_timeout+0x4c>
				break;
 800295a:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <check_DHCP_timeout+0xb8>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <check_DHCP_timeout+0xb8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330a      	adds	r3, #10
 8002968:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <check_DHCP_timeout+0xb4>)
 800296a:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <check_DHCP_timeout+0xb0>)
 800296e:	f993 3000 	ldrsb.w	r3, [r3]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	b25a      	sxtb	r2, r3
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <check_DHCP_timeout+0xb0>)
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e01a      	b.n	80029b6 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <check_DHCP_timeout+0xbc>)
 8002982:	f993 3000 	ldrsb.w	r3, [r3]
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00c      	beq.n	80029a4 <check_DHCP_timeout+0x94>
 800298a:	2b04      	cmp	r3, #4
 800298c:	dc10      	bgt.n	80029b0 <check_DHCP_timeout+0xa0>
 800298e:	2b01      	cmp	r3, #1
 8002990:	d002      	beq.n	8002998 <check_DHCP_timeout+0x88>
 8002992:	2b02      	cmp	r3, #2
 8002994:	d006      	beq.n	80029a4 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002996:	e00b      	b.n	80029b0 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <check_DHCP_timeout+0xbc>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800299e:	2300      	movs	r3, #0
 80029a0:	71fb      	strb	r3, [r7, #7]
				break;
 80029a2:	e006      	b.n	80029b2 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80029a4:	f7fe fe76 	bl	8001694 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80029a8:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <check_DHCP_timeout+0xbc>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
				break;
 80029ae:	e000      	b.n	80029b2 <check_DHCP_timeout+0xa2>
				break;
 80029b0:	bf00      	nop
		}
		reset_DHCP_timeout();
 80029b2:	f000 f8e5 	bl	8002b80 <reset_DHCP_timeout>
	}
	return ret;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000ddd 	.word	0x20000ddd
 80029c4:	20000080 	.word	0x20000080
 80029c8:	20000de0 	.word	0x20000de0
 80029cc:	20000ddc 	.word	0x20000ddc

080029d0 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80029d6:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029da:	f002 fa6f 	bl	8004ebc <WIZCHIP_READ>
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80029e2:	2103      	movs	r1, #3
 80029e4:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80029e8:	f002 fab4 	bl	8004f54 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80029ec:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <check_DHCP_leasedIP+0x74>)
 80029ee:	7818      	ldrb	r0, [r3, #0]
 80029f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <check_DHCP_leasedIP+0x78>)
 80029f8:	2211      	movs	r2, #17
 80029fa:	4914      	ldr	r1, [pc, #80]	@ (8002a4c <check_DHCP_leasedIP+0x7c>)
 80029fc:	f003 f9c4 	bl	8005d88 <sendto>
 8002a00:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002a0a:	f002 faa3 	bl	8004f54 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f113 0f0d 	cmn.w	r3, #13
 8002a14:	d104      	bne.n	8002a20 <check_DHCP_leasedIP+0x50>
		// UDP send Timeout occurred : allocated IP address is unique, DHCP Success

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
 8002a16:	480e      	ldr	r0, [pc, #56]	@ (8002a50 <check_DHCP_leasedIP+0x80>)
 8002a18:	f009 fba8 	bl	800c16c <puts>
#endif

		return 1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e00c      	b.n	8002a3a <check_DHCP_leasedIP+0x6a>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002a20:	f7ff fa94 	bl	8001f4c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <check_DHCP_leasedIP+0x84>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002a2a:	bf00      	nop
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <check_DHCP_leasedIP+0x84>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d9f9      	bls.n	8002a2c <check_DHCP_leasedIP+0x5c>

		return 0;
 8002a38:	2300      	movs	r3, #0
	}
}	
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000dbd 	.word	0x20000dbd
 8002a48:	20000dcc 	.word	0x20000dcc
 8002a4c:	0800d908 	.word	0x0800d908
 8002a50:	0800d91c 	.word	0x0800d91c
 8002a54:	20000de0 	.word	0x20000de0

08002a58 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002a68:	2206      	movs	r2, #6
 8002a6a:	493f      	ldr	r1, [pc, #252]	@ (8002b68 <DHCP_init+0x110>)
 8002a6c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002a70:	f002 fabe 	bl	8004ff0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002a74:	4b3c      	ldr	r3, [pc, #240]	@ (8002b68 <DHCP_init+0x110>)
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b3b      	ldr	r3, [pc, #236]	@ (8002b68 <DHCP_init+0x110>)
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b39      	ldr	r3, [pc, #228]	@ (8002b68 <DHCP_init+0x110>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <DHCP_init+0x110>)
 8002a8a:	78db      	ldrb	r3, [r3, #3]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <DHCP_init+0x110>)
 8002a92:	791b      	ldrb	r3, [r3, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <DHCP_init+0x110>)
 8002a9a:	795b      	ldrb	r3, [r3, #5]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d117      	bne.n	8002ad4 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002aa4:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <DHCP_init+0x110>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8002b68 <DHCP_init+0x110>)
 8002aac:	2208      	movs	r2, #8
 8002aae:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <DHCP_init+0x110>)
 8002ab2:	22dc      	movs	r2, #220	@ 0xdc
 8002ab4:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <DHCP_init+0x110>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002abc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <DHCP_init+0x110>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002ac2:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <DHCP_init+0x110>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002ac8:	2206      	movs	r2, #6
 8002aca:	4927      	ldr	r1, [pc, #156]	@ (8002b68 <DHCP_init+0x110>)
 8002acc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002ad0:	f002 faee 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002ad4:	4a25      	ldr	r2, [pc, #148]	@ (8002b6c <DHCP_init+0x114>)
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002ada:	4a25      	ldr	r2, [pc, #148]	@ (8002b70 <DHCP_init+0x118>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <DHCP_init+0x11c>)
 8002ae2:	4a25      	ldr	r2, [pc, #148]	@ (8002b78 <DHCP_init+0x120>)
 8002ae4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002ae6:	4b20      	ldr	r3, [pc, #128]	@ (8002b68 <DHCP_init+0x110>)
 8002ae8:	78db      	ldrb	r3, [r3, #3]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <DHCP_init+0x11c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a20      	ldr	r2, [pc, #128]	@ (8002b74 <DHCP_init+0x11c>)
 8002af4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002af6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <DHCP_init+0x110>)
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <DHCP_init+0x11c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <DHCP_init+0x11c>)
 8002b04:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002b06:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <DHCP_init+0x110>)
 8002b08:	795b      	ldrb	r3, [r3, #5]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <DHCP_init+0x11c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <DHCP_init+0x11c>)
 8002b14:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <DHCP_init+0x110>)
 8002b18:	78da      	ldrb	r2, [r3, #3]
 8002b1a:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <DHCP_init+0x110>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	4053      	eors	r3, r2
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b11      	ldr	r3, [pc, #68]	@ (8002b68 <DHCP_init+0x110>)
 8002b24:	795b      	ldrb	r3, [r3, #5]
 8002b26:	4053      	eors	r3, r2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <DHCP_init+0x11c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a10      	ldr	r2, [pc, #64]	@ (8002b74 <DHCP_init+0x11c>)
 8002b34:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002b42:	f002 fab5 	bl	80050b0 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002b52:	f002 faad 	bl	80050b0 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002b56:	f000 f813 	bl	8002b80 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <DHCP_init+0x124>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000dec 	.word	0x20000dec
 8002b6c:	20000dbd 	.word	0x20000dbd
 8002b70:	20000de8 	.word	0x20000de8
 8002b74:	20000de4 	.word	0x20000de4
 8002b78:	12345678 	.word	0x12345678
 8002b7c:	20000ddc 	.word	0x20000ddc

08002b80 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <reset_DHCP_timeout+0x20>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <reset_DHCP_timeout+0x24>)
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <reset_DHCP_timeout+0x28>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000de0 	.word	0x20000de0
 8002ba4:	20000080 	.word	0x20000080
 8002ba8:	20000ddd 	.word	0x20000ddd

08002bac <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <DHCP_time_handler+0x18>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a03      	ldr	r2, [pc, #12]	@ (8002bc4 <DHCP_time_handler+0x18>)
 8002bb8:	6013      	str	r3, [r2, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	20000de0 	.word	0x20000de0

08002bc8 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <getIPfromDHCP+0x3c>)
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <getIPfromDHCP+0x3c>)
 8002bde:	7852      	ldrb	r2, [r2, #1]
 8002be0:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3302      	adds	r3, #2
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <getIPfromDHCP+0x3c>)
 8002be8:	7892      	ldrb	r2, [r2, #2]
 8002bea:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3303      	adds	r3, #3
 8002bf0:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <getIPfromDHCP+0x3c>)
 8002bf2:	78d2      	ldrb	r2, [r2, #3]
 8002bf4:	701a      	strb	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000dcc 	.word	0x20000dcc

08002c08 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002c10:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <getGWfromDHCP+0x3c>)
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a09      	ldr	r2, [pc, #36]	@ (8002c44 <getGWfromDHCP+0x3c>)
 8002c1e:	7852      	ldrb	r2, [r2, #1]
 8002c20:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3302      	adds	r3, #2
 8002c26:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <getGWfromDHCP+0x3c>)
 8002c28:	7892      	ldrb	r2, [r2, #2]
 8002c2a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <getGWfromDHCP+0x3c>)
 8002c32:	78d2      	ldrb	r2, [r2, #3]
 8002c34:	701a      	strb	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000dd0 	.word	0x20000dd0

08002c48 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <getSNfromDHCP+0x3c>)
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <getSNfromDHCP+0x3c>)
 8002c5e:	7852      	ldrb	r2, [r2, #1]
 8002c60:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3302      	adds	r3, #2
 8002c66:	4a07      	ldr	r2, [pc, #28]	@ (8002c84 <getSNfromDHCP+0x3c>)
 8002c68:	7892      	ldrb	r2, [r2, #2]
 8002c6a:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3303      	adds	r3, #3
 8002c70:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <getSNfromDHCP+0x3c>)
 8002c72:	78d2      	ldrb	r2, [r2, #3]
 8002c74:	701a      	strb	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000dd4 	.word	0x20000dd4

08002c88 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <getDNSfromDHCP+0x3c>)
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <getDNSfromDHCP+0x3c>)
 8002c9e:	7852      	ldrb	r2, [r2, #1]
 8002ca0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <getDNSfromDHCP+0x3c>)
 8002ca8:	7892      	ldrb	r2, [r2, #2]
 8002caa:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3303      	adds	r3, #3
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <getDNSfromDHCP+0x3c>)
 8002cb2:	78d2      	ldrb	r2, [r2, #3]
 8002cb4:	701a      	strb	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000dd8 	.word	0x20000dd8

08002cc8 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2b09      	cmp	r3, #9
 8002cde:	d803      	bhi.n	8002ce8 <NibbleToHex+0x20>
    return nibble + '0';
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	3330      	adds	r3, #48	@ 0x30
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e002      	b.n	8002cee <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	3337      	adds	r3, #55	@ 0x37
 8002cec:	b2db      	uxtb	r3, r3
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	4413      	add	r3, r2
 8002d18:	81fb      	strh	r3, [r7, #14]
	return i;
 8002d1a:	89fb      	ldrh	r3, [r7, #14]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b299      	uxth	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	b2ca      	uxtb	r2, r1
 8002d42:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]
	return s;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b08b      	sub	sp, #44	@ 0x2c
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	623a      	str	r2, [r7, #32]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <parse_name+0x34>
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8002d92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002d94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d98:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d9a:	d117      	bne.n	8002dcc <parse_name+0x6e>
		{
			if (!indirect)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <parse_name+0x4a>
				clen++;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002dac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	623a      	str	r2, [r7, #32]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8002dcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02b      	beq.n	8002e2a <parse_name+0xcc>
			break;

		len -= slen + 1;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8002de0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da02      	bge.n	8002dee <parse_name+0x90>
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e038      	b.n	8002e60 <parse_name+0x102>

		if (!indirect) clen += slen;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <parse_name+0xb0>
 8002df4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8002dfc:	e007      	b.n	8002e0e <parse_name+0xb0>
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	1c53      	adds	r3, r2, #1
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	6079      	str	r1, [r7, #4]
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f2      	bne.n	8002dfe <parse_name+0xa0>
		*buf++ = '.';
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	222e      	movs	r2, #46	@ 0x2e
 8002e20:	701a      	strb	r2, [r3, #0]
		nseg++;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3301      	adds	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8002e28:	e7a8      	b.n	8002d7c <parse_name+0x1e>
			break;
 8002e2a:	bf00      	nop
	}

	if (nseg == 0)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	222e      	movs	r2, #46	@ 0x2e
 8002e3a:	701a      	strb	r2, [r3, #0]
		len--;
 8002e3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
	len--;
 8002e52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8002e5e:	69fb      	ldr	r3, [r7, #28]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	372c      	adds	r7, #44	@ 0x2c
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0b4      	sub	sp, #208	@ 0xd0
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002e76:	f107 020c 	add.w	r2, r7, #12
 8002e7a:	23c0      	movs	r3, #192	@ 0xc0
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff6d 	bl	8002d5e <parse_name>
 8002e84:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8002e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d101      	bne.n	8002e96 <dns_question+0x2a>
 8002e92:	2300      	movs	r3, #0
 8002e94:	e00b      	b.n	8002eae <dns_question+0x42>

	cp += len;
 8002e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	603b      	str	r3, [r7, #0]

	return cp;
 8002eac:	683b      	ldr	r3, [r7, #0]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	37d0      	adds	r7, #208	@ 0xd0
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b0b6      	sub	sp, #216	@ 0xd8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002ec2:	f107 0210 	add.w	r2, r7, #16
 8002ec6:	23c0      	movs	r3, #192	@ 0xc0
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff ff47 	bl	8002d5e <parse_name>
 8002ed0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8002ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d101      	bne.n	8002ee2 <dns_answer+0x2c>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e0f9      	b.n	80030d6 <dns_answer+0x220>

	cp += len;
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4413      	add	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	f7ff ff04 	bl	8002cfa <get16>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3302      	adds	r3, #2
 8002efc:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3302      	adds	r3, #2
 8002f02:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3304      	adds	r3, #4
 8002f08:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	60bb      	str	r3, [r7, #8]


	switch (type)
 8002f10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	f000 80da 	beq.w	80030ce <dns_answer+0x218>
 8002f1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	f300 80d7 	bgt.w	80030d2 <dns_answer+0x21c>
 8002f24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d07d      	beq.n	8003028 <dns_answer+0x172>
 8002f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	f300 80ce 	bgt.w	80030d2 <dns_answer+0x21c>
 8002f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	dc26      	bgt.n	8002f8c <dns_answer+0xd6>
 8002f3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f340 80c5 	ble.w	80030d2 <dns_answer+0x21c>
 8002f48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8002f56:	401a      	ands	r2, r3
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2201      	movne	r2, #1
 8002f5e:	2200      	moveq	r2, #0
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d133      	bne.n	8002fce <dns_answer+0x118>
 8002f66:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2201      	movne	r2, #1
 8002f70:	2200      	moveq	r2, #0
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d170      	bne.n	800305a <dns_answer+0x1a4>
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8002f8a:	e0a2      	b.n	80030d2 <dns_answer+0x21c>
	switch (type)
 8002f8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f90:	2b0d      	cmp	r3, #13
 8002f92:	d032      	beq.n	8002ffa <dns_answer+0x144>
		break;
 8002f94:	e09d      	b.n	80030d2 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	60ba      	str	r2, [r7, #8]
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	60ba      	str	r2, [r7, #8]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	3201      	adds	r2, #1
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	60ba      	str	r2, [r7, #8]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	3202      	adds	r2, #2
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	60ba      	str	r2, [r7, #8]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	3203      	adds	r2, #3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	7013      	strb	r3, [r2, #0]
		break;
 8002fcc:	e082      	b.n	80030d4 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8002fce:	f107 0210 	add.w	r2, r7, #16
 8002fd2:	23c0      	movs	r3, #192	@ 0xc0
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fec1 	bl	8002d5e <parse_name>
 8002fdc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8002fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d101      	bne.n	8002fee <dns_answer+0x138>
 8002fea:	2300      	movs	r3, #0
 8002fec:	e073      	b.n	80030d6 <dns_answer+0x220>
		cp += len;
 8002fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
		break;
 8002ff8:	e06c      	b.n	80030d4 <dns_answer+0x21e>
		len = *cp++;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	60ba      	str	r2, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8003006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4413      	add	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	60ba      	str	r2, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 800301c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	4413      	add	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
		break;
 8003026:	e055      	b.n	80030d4 <dns_answer+0x21e>
		cp += 2;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3302      	adds	r3, #2
 800302c:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800302e:	f107 0210 	add.w	r2, r7, #16
 8003032:	23c0      	movs	r3, #192	@ 0xc0
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f7ff fe91 	bl	8002d5e <parse_name>
 800303c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d101      	bne.n	800304e <dns_answer+0x198>
 800304a:	2300      	movs	r3, #0
 800304c:	e043      	b.n	80030d6 <dns_answer+0x220>
		cp += len;
 800304e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
		break;
 8003058:	e03c      	b.n	80030d4 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800305a:	f107 0210 	add.w	r2, r7, #16
 800305e:	23c0      	movs	r3, #192	@ 0xc0
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fe7b 	bl	8002d5e <parse_name>
 8003068:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800306c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d101      	bne.n	800307a <dns_answer+0x1c4>
 8003076:	2300      	movs	r3, #0
 8003078:	e02d      	b.n	80030d6 <dns_answer+0x220>
		cp += len;
 800307a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4413      	add	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8003084:	f107 0210 	add.w	r2, r7, #16
 8003088:	23c0      	movs	r3, #192	@ 0xc0
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff fe66 	bl	8002d5e <parse_name>
 8003092:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d101      	bne.n	80030a4 <dns_answer+0x1ee>
 80030a0:	2300      	movs	r3, #0
 80030a2:	e018      	b.n	80030d6 <dns_answer+0x220>
		cp += len;
 80030a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4413      	add	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3304      	adds	r3, #4
 80030b2:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	3304      	adds	r3, #4
 80030b8:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3304      	adds	r3, #4
 80030be:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3304      	adds	r3, #4
 80030c4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3304      	adds	r3, #4
 80030ca:	60bb      	str	r3, [r7, #8]
		break;
 80030cc:	e002      	b.n	80030d4 <dns_answer+0x21e>
		break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <dns_answer+0x21e>
		break;
 80030d2:	bf00      	nop
	}

	return cp;
 80030d4:	68bb      	ldr	r3, [r7, #8]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	37d8      	adds	r7, #216	@ 0xd8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b088      	sub	sp, #32
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80030ee:	2212      	movs	r2, #18
 80030f0:	2100      	movs	r1, #0
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f009 f94e 	bl	800c394 <memset>

	pdhdr->id = get16(&msg[0]);
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7ff fdfe 	bl	8002cfa <get16>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3302      	adds	r3, #2
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fdf5 	bl	8002cfa <get16>
 8003110:	4603      	mov	r3, r0
 8003112:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8003114:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003118:	2b00      	cmp	r3, #0
 800311a:	da02      	bge.n	8003122 <parseDNSMSG+0x44>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8003122:	8a7b      	ldrh	r3, [r7, #18]
 8003124:	0adb      	lsrs	r3, r3, #11
 8003126:	b29b      	uxth	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8003134:	8a7b      	ldrh	r3, [r7, #18]
 8003136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <parseDNSMSG+0x66>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8003144:	8a7b      	ldrh	r3, [r7, #18]
 8003146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <parseDNSMSG+0x76>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8003154:	8a7b      	ldrh	r3, [r7, #18]
 8003156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <parseDNSMSG+0x86>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8003164:	8a7b      	ldrh	r3, [r7, #18]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <parseDNSMSG+0x96>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8003174:	8a7b      	ldrh	r3, [r7, #18]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3304      	adds	r3, #4
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fdb7 	bl	8002cfa <get16>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3306      	adds	r3, #6
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fdae 	bl	8002cfa <get16>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3308      	adds	r3, #8
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fda5 	bl	8002cfa <get16>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	330a      	adds	r3, #10
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fd9c 	bl	8002cfa <get16>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	330c      	adds	r3, #12
 80031ce:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	83fb      	strh	r3, [r7, #30]
 80031d4:	e00d      	b.n	80031f2 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	f7ff fe47 	bl	8002e6c <dns_question>
 80031de:	61b8      	str	r0, [r7, #24]
#ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <parseDNSMSG+0x10e>
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	e03b      	b.n	8003264 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80031ec:	8bfb      	ldrh	r3, [r7, #30]
 80031ee:	3301      	adds	r3, #1
 80031f0:	83fb      	strh	r3, [r7, #30]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	895b      	ldrh	r3, [r3, #10]
 80031f6:	8bfa      	ldrh	r2, [r7, #30]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3ec      	bcc.n	80031d6 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	83fb      	strh	r3, [r7, #30]
 8003200:	e00e      	b.n	8003220 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff fe55 	bl	8002eb6 <dns_answer>
 800320c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <parseDNSMSG+0x13c>
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	e024      	b.n	8003264 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 800321a:	8bfb      	ldrh	r3, [r7, #30]
 800321c:	3301      	adds	r3, #1
 800321e:	83fb      	strh	r3, [r7, #30]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	899b      	ldrh	r3, [r3, #12]
 8003224:	8bfa      	ldrh	r2, [r7, #30]
 8003226:	429a      	cmp	r2, r3
 8003228:	d3eb      	bcc.n	8003202 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 800322a:	2300      	movs	r3, #0
 800322c:	83fb      	strh	r3, [r7, #30]
 800322e:	e002      	b.n	8003236 <parseDNSMSG+0x158>
 8003230:	8bfb      	ldrh	r3, [r7, #30]
 8003232:	3301      	adds	r3, #1
 8003234:	83fb      	strh	r3, [r7, #30]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	89db      	ldrh	r3, [r3, #14]
 800323a:	8bfa      	ldrh	r2, [r7, #30]
 800323c:	429a      	cmp	r2, r3
 800323e:	d3f7      	bcc.n	8003230 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	83fb      	strh	r3, [r7, #30]
 8003244:	e002      	b.n	800324c <parseDNSMSG+0x16e>
 8003246:	8bfb      	ldrh	r3, [r7, #30]
 8003248:	3301      	adds	r3, #1
 800324a:	83fb      	strh	r3, [r7, #30]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8a1b      	ldrh	r3, [r3, #16]
 8003250:	8bfa      	ldrh	r2, [r7, #30]
 8003252:	429a      	cmp	r2, r3
 8003254:	d3f7      	bcc.n	8003246 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	7a1b      	ldrb	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <parseDNSMSG+0x184>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <parseDNSMSG+0x186>
	else return 0;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b0b8      	sub	sp, #224	@ 0xe0
 8003270:	af00      	add	r7, sp, #0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	4603      	mov	r3, r0
 800327a:	81fb      	strh	r3, [r7, #14]
 800327c:	4613      	mov	r3, r2
 800327e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 8003286:	4b57      	ldr	r3, [pc, #348]	@ (80033e4 <dns_makequery+0x178>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b55      	ldr	r3, [pc, #340]	@ (80033e4 <dns_makequery+0x178>)
 8003290:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8003292:	4b54      	ldr	r3, [pc, #336]	@ (80033e4 <dns_makequery+0x178>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800329c:	f7ff fd44 	bl	8002d28 <put16>
 80032a0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80032a4:	89fb      	ldrh	r3, [r7, #14]
 80032a6:	02db      	lsls	r3, r3, #11
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 80032b4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 80032b8:	4619      	mov	r1, r3
 80032ba:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80032be:	f7ff fd33 	bl	8002d28 <put16>
 80032c2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 80032c6:	2101      	movs	r1, #1
 80032c8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80032cc:	f7ff fd2c 	bl	8002d28 <put16>
 80032d0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80032d4:	2100      	movs	r1, #0
 80032d6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80032da:	f7ff fd25 	bl	8002d28 <put16>
 80032de:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80032e2:	2100      	movs	r1, #0
 80032e4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80032e8:	f7ff fd1e 	bl	8002d28 <put16>
 80032ec:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80032f0:	2100      	movs	r1, #0
 80032f2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80032f6:	f7ff fd17 	bl	8002d28 <put16>
 80032fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f009 f948 	bl	800c59a <strcpy>
	dname = sname;
 800330a:	f107 0310 	add.w	r3, r7, #16
 800330e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 8003312:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003316:	f7fc ff63 	bl	80001e0 <strlen>
 800331a:	4603      	mov	r3, r0
 800331c:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8003320:	212e      	movs	r1, #46	@ 0x2e
 8003322:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003326:	f009 f83d 	bl	800c3a4 <strchr>
 800332a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800332e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <dns_makequery+0xd8>
 8003336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800333a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	81bb      	strh	r3, [r7, #12]
 8003342:	e002      	b.n	800334a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8003344:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8003348:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 800334a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003354:	89ba      	ldrh	r2, [r7, #12]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 800335a:	89bb      	ldrh	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d029      	beq.n	80033b4 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8003360:	89bb      	ldrh	r3, [r7, #12]
 8003362:	461a      	mov	r2, r3
 8003364:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003368:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800336c:	f009 f839 	bl	800c3e2 <strncpy>
		cp += len;
 8003370:	89bb      	ldrh	r3, [r7, #12]
 8003372:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003376:	4413      	add	r3, r2
 8003378:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 800337c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8003384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
			break;
 8003392:	e010      	b.n	80033b6 <dns_makequery+0x14a>
		}
		dname += len+1;
 8003394:	89bb      	ldrh	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800339c:	4413      	add	r3, r2
 800339e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 80033a2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 80033a6:	89bb      	ldrh	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 80033b2:	e7b5      	b.n	8003320 <dns_makequery+0xb4>
		if (len == 0) break;
 80033b4:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 80033b6:	2101      	movs	r1, #1
 80033b8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80033bc:	f7ff fcb4 	bl	8002d28 <put16>
 80033c0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 80033c4:	2101      	movs	r1, #1
 80033c6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80033ca:	f7ff fcad 	bl	8002d28 <put16>
 80033ce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 80033d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	b21b      	sxth	r3, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	37e0      	adds	r7, #224	@ 0xe0
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000dfa 	.word	0x20000dfa

080033e8 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 80033ec:	4b0f      	ldr	r3, [pc, #60]	@ (800342c <check_DNS_timeout+0x44>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d914      	bls.n	800341e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <check_DNS_timeout+0x44>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <check_DNS_timeout+0x48>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d905      	bls.n	800340e <check_DNS_timeout+0x26>
			retry_count = 0;
 8003402:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <check_DNS_timeout+0x48>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8003408:	f04f 33ff 	mov.w	r3, #4294967295
 800340c:	e008      	b.n	8003420 <check_DNS_timeout+0x38>
		}
		retry_count++;
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <check_DNS_timeout+0x48>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	3301      	adds	r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <check_DNS_timeout+0x48>)
 8003418:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800341e:	2301      	movs	r3, #1
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000dfc 	.word	0x20000dfc
 8003430:	20000e00 	.word	0x20000e00

08003434 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8003440:	4a07      	ldr	r2, [pc, #28]	@ (8003460 <DNS_init+0x2c>)
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8003446:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <DNS_init+0x30>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <DNS_init+0x34>)
 800344e:	f241 1222 	movw	r2, #4386	@ 0x1122
 8003452:	801a      	strh	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	20000df8 	.word	0x20000df8
 8003464:	20000df4 	.word	0x20000df4
 8003468:	20000dfa 	.word	0x20000dfa

0800346c <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b090      	sub	sp, #64	@ 0x40
 8003470:	af04      	add	r7, sp, #16
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8003478:	4b5a      	ldr	r3, [pc, #360]	@ (80035e4 <DNS_run+0x178>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 800347e:	4b5a      	ldr	r3, [pc, #360]	@ (80035e8 <DNS_run+0x17c>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8003484:	4b59      	ldr	r3, [pc, #356]	@ (80035ec <DNS_run+0x180>)
 8003486:	7818      	ldrb	r0, [r3, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	2200      	movs	r2, #0
 800348c:	2102      	movs	r1, #2
 800348e:	f001 fffb 	bl	8005488 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	4619      	mov	r1, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3302      	adds	r3, #2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3303      	adds	r3, #3
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4603      	mov	r3, r0
 80034b2:	484f      	ldr	r0, [pc, #316]	@ (80035f0 <DNS_run+0x184>)
 80034b4:	f008 fdf2 	bl	800c09c <iprintf>
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80034b8:	4b4e      	ldr	r3, [pc, #312]	@ (80035f4 <DNS_run+0x188>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7ff fed2 	bl	800326c <dns_makequery>
 80034c8:	4603      	mov	r3, r0
 80034ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80034cc:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <DNS_run+0x180>)
 80034ce:	7818      	ldrb	r0, [r3, #0]
 80034d0:	4b48      	ldr	r3, [pc, #288]	@ (80035f4 <DNS_run+0x188>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80034d6:	2335      	movs	r3, #53	@ 0x35
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f002 fc54 	bl	8005d88 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80034e0:	4b42      	ldr	r3, [pc, #264]	@ (80035ec <DNS_run+0x180>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fe8c 	bl	8005202 <getSn_RX_RSR>
 80034ea:	4603      	mov	r3, r0
 80034ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80034ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03d      	beq.n	8003570 <DNS_run+0x104>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 80034f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fa:	d902      	bls.n	8003502 <DNS_run+0x96>
 80034fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003500:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8003502:	4b3a      	ldr	r3, [pc, #232]	@ (80035ec <DNS_run+0x180>)
 8003504:	7818      	ldrb	r0, [r3, #0]
 8003506:	4b3b      	ldr	r3, [pc, #236]	@ (80035f4 <DNS_run+0x188>)
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	f107 0414 	add.w	r4, r7, #20
 800350e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003510:	f107 0312 	add.w	r3, r7, #18
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4623      	mov	r3, r4
 8003518:	f002 fd6a 	bl	8005ff0 <recvfrom>
 800351c:	4603      	mov	r3, r0
 800351e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
 8003520:	7d3b      	ldrb	r3, [r7, #20]
 8003522:	4618      	mov	r0, r3
 8003524:	7d7b      	ldrb	r3, [r7, #21]
 8003526:	461c      	mov	r4, r3
 8003528:	7dbb      	ldrb	r3, [r7, #22]
 800352a:	461d      	mov	r5, r3
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	461a      	mov	r2, r3
 8003530:	8a7b      	ldrh	r3, [r7, #18]
 8003532:	4619      	mov	r1, r3
 8003534:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003536:	9302      	str	r3, [sp, #8]
 8003538:	9101      	str	r1, [sp, #4]
 800353a:	9200      	str	r2, [sp, #0]
 800353c:	462b      	mov	r3, r5
 800353e:	4622      	mov	r2, r4
 8003540:	4601      	mov	r1, r0
 8003542:	482d      	ldr	r0, [pc, #180]	@ (80035f8 <DNS_run+0x18c>)
 8003544:	f008 fdaa 	bl	800c09c <iprintf>
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <DNS_run+0x188>)
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	f107 0318 	add.w	r3, r7, #24
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fdc3 	bl	80030de <parseDNSMSG>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 800355e:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8003560:	4b22      	ldr	r3, [pc, #136]	@ (80035ec <DNS_run+0x180>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f002 f8a3 	bl	80056b0 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 800356a:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 800356e:	e034      	b.n	80035da <DNS_run+0x16e>
		ret_check_timeout = check_DNS_timeout();
 8003570:	f7ff ff3a 	bl	80033e8 <check_DNS_timeout>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 800357a:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800357e:	2b00      	cmp	r3, #0
 8003580:	da19      	bge.n	80035b6 <DNS_run+0x14a>
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3301      	adds	r3, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3302      	adds	r3, #2
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3303      	adds	r3, #3
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4603      	mov	r3, r0
 80035a2:	4816      	ldr	r0, [pc, #88]	@ (80035fc <DNS_run+0x190>)
 80035a4:	f008 fd7a 	bl	800c09c <iprintf>
			close(DNS_SOCKET);
 80035a8:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <DNS_run+0x180>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 f87f 	bl	80056b0 <close>
			return 0; // timeout occurred
 80035b2:	2300      	movs	r3, #0
 80035b4:	e011      	b.n	80035da <DNS_run+0x16e>
		else if (ret_check_timeout == 0) {
 80035b6:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d190      	bne.n	80034e0 <DNS_run+0x74>
			printf("> DNS Timeout\r\n");
 80035be:	4810      	ldr	r0, [pc, #64]	@ (8003600 <DNS_run+0x194>)
 80035c0:	f008 fdd4 	bl	800c16c <puts>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <DNS_run+0x180>)
 80035c6:	7818      	ldrb	r0, [r3, #0]
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <DNS_run+0x188>)
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80035ce:	2335      	movs	r3, #53	@ 0x35
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f002 fbd8 	bl	8005d88 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80035d8:	e782      	b.n	80034e0 <DNS_run+0x74>
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3730      	adds	r7, #48	@ 0x30
 80035de:	46bd      	mov	sp, r7
 80035e0:	bdb0      	pop	{r4, r5, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000e00 	.word	0x20000e00
 80035e8:	20000dfc 	.word	0x20000dfc
 80035ec:	20000df8 	.word	0x20000df8
 80035f0:	0800d938 	.word	0x0800d938
 80035f4:	20000df4 	.word	0x20000df4
 80035f8:	0800d964 	.word	0x0800d964
 80035fc:	0800d99c 	.word	0x0800d99c
 8003600:	0800d9cc 	.word	0x0800d9cc

08003604 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <DNS_time_handler+0x18>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a03      	ldr	r2, [pc, #12]	@ (800361c <DNS_time_handler+0x18>)
 8003610:	6013      	str	r3, [r2, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000dfc 	.word	0x20000dfc

08003620 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <getNextPacketId+0x1c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	e000      	b.n	8003662 <getNextPacketId+0x1e>
 8003660:	2301      	movs	r3, #1
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8003676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	617b      	str	r3, [r7, #20]
        sent = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800368c:	e018      	b.n	80036c0 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003692:	689c      	ldr	r4, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	18d6      	adds	r6, r2, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fdb5 	bl	8004210 <TimerLeftMS>
 80036a6:	4603      	mov	r3, r0
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4631      	mov	r1, r6
 80036ac:	4628      	mov	r0, r5
 80036ae:	47a0      	blx	r4
 80036b0:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	db0e      	blt.n	80036d6 <sendPacket+0x60>
            break;
        sent += rc;
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	4413      	add	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	da07      	bge.n	80036d8 <sendPacket+0x62>
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fd5f 	bl	800418c <TimerIsExpired>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0dc      	beq.n	800368e <sendPacket+0x18>
 80036d4:	e000      	b.n	80036d8 <sendPacket+0x62>
            break;
 80036d6:	bf00      	nop
    }
    if (sent == length)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d10b      	bne.n	80036f8 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 fd77 	bl	80041e0 <TimerCountdown>
        rc = MQTT_SUCCESS;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e002      	b.n	80036fe <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
 80036fc:	617b      	str	r3, [r7, #20]
    return rc;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003708 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e008      	b.n	8003734 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	3205      	adds	r2, #5
 8003728:	2100      	movs	r1, #0
 800372a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b04      	cmp	r3, #4
 8003738:	ddf3      	ble.n	8003722 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003756:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3358      	adds	r3, #88	@ 0x58
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fcf8 	bl	8004170 <TimerInit>
    TimerInit(&c->last_received);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3360      	adds	r3, #96	@ 0x60
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fcf3 	bl	8004170 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 800378a:	bf00      	nop
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8003792:	b590      	push	{r4, r7, lr}
 8003794:	b08b      	sub	sp, #44	@ 0x2c
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80037a6:	2304      	movs	r3, #4
 80037a8:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	3301      	adds	r3, #1
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dd03      	ble.n	80037cc <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	61bb      	str	r3, [r7, #24]
            goto exit;
 80037ca:	e021      	b.n	8003810 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	685c      	ldr	r4, [r3, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80037d6:	f107 0117 	add.w	r1, r7, #23
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	47a0      	blx	r4
 80037e0:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d112      	bne.n	800380e <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	441a      	add	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	01db      	lsls	r3, r3, #7
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	b25b      	sxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	dbd1      	blt.n	80037b0 <decodePacket+0x1e>
exit:
 800380c:	e000      	b.n	8003810 <decodePacket+0x7e>
            goto exit;
 800380e:	bf00      	nop
    return len;
 8003810:	6a3b      	ldr	r3, [r7, #32]
}
 8003812:	4618      	mov	r0, r3
 8003814:	372c      	adds	r7, #44	@ 0x2c
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}

0800381a <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800381a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381c:	b089      	sub	sp, #36	@ 0x24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
    int len = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003834:	685c      	ldr	r4, [r3, #4]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	695e      	ldr	r6, [r3, #20]
 800383e:	68b8      	ldr	r0, [r7, #8]
 8003840:	f000 fce6 	bl	8004210 <TimerLeftMS>
 8003844:	4603      	mov	r3, r0
 8003846:	2201      	movs	r2, #1
 8003848:	4631      	mov	r1, r6
 800384a:	4628      	mov	r0, r5
 800384c:	47a0      	blx	r4
 800384e:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d15d      	bne.n	8003912 <readPacket+0xf8>
        goto exit;

    len = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800385a:	68b8      	ldr	r0, [r7, #8]
 800385c:	f000 fcd8 	bl	8004210 <TimerLeftMS>
 8003860:	4602      	mov	r2, r0
 8003862:	f107 0310 	add.w	r3, r7, #16
 8003866:	4619      	mov	r1, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff ff92 	bl	8003792 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	3301      	adds	r3, #1
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f001 f82e 	bl	80048da <MQTTPacket_encode>
 800387e:	4602      	mov	r2, r0
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4293      	cmp	r3, r2
 8003892:	d203      	bcs.n	800389c <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8003894:	f06f 0301 	mvn.w	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
        goto exit;
 800389a:	e03d      	b.n	8003918 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	dd20      	ble.n	80038e4 <readPacket+0xca>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	685c      	ldr	r4, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	18d6      	adds	r6, r2, r3
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	68b8      	ldr	r0, [r7, #8]
 80038ba:	f000 fca9 	bl	8004210 <TimerLeftMS>
 80038be:	4603      	mov	r3, r0
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4631      	mov	r1, r6
 80038c4:	4628      	mov	r0, r5
 80038c6:	47a0      	blx	r4
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <readPacket+0xca>
        rc = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
        goto exit;
 80038e2:	e019      	b.n	8003918 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80038ec:	7d3b      	ldrb	r3, [r7, #20]
 80038ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 fc68 	bl	80041e0 <TimerCountdown>
 8003910:	e002      	b.n	8003918 <readPacket+0xfe>
        goto exit;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <readPacket+0xfe>
exit:
 8003916:	bf00      	nop
    return rc;
 8003918:	69fb      	ldr	r3, [r7, #28]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	@ 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003922 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8003922:	b480      	push	{r7}
 8003924:	b087      	sub	sp, #28
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	461a      	mov	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8003942:	e039      	b.n	80039b8 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b2f      	cmp	r3, #47	@ 0x2f
 800394a:	d103      	bne.n	8003954 <isTopicMatched+0x32>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b2f      	cmp	r3, #47	@ 0x2f
 8003952:	d13a      	bne.n	80039ca <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b2b      	cmp	r3, #43	@ 0x2b
 800395a:	d009      	beq.n	8003970 <isTopicMatched+0x4e>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b23      	cmp	r3, #35	@ 0x23
 8003962:	d005      	beq.n	8003970 <isTopicMatched+0x4e>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d12e      	bne.n	80039ce <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b2b      	cmp	r3, #43	@ 0x2b
 8003976:	d112      	bne.n	800399e <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800397e:	e005      	b.n	800398c <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3301      	adds	r3, #1
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d20b      	bcs.n	80039ac <isTopicMatched+0x8a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b2f      	cmp	r3, #47	@ 0x2f
 800399a:	d1f1      	bne.n	8003980 <isTopicMatched+0x5e>
 800399c:	e006      	b.n	80039ac <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b23      	cmp	r3, #35	@ 0x23
 80039a4:	d102      	bne.n	80039ac <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
        curf++;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3301      	adds	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
        curn++;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <isTopicMatched+0xae>
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3bd      	bcc.n	8003944 <isTopicMatched+0x22>
 80039c8:	e002      	b.n	80039d0 <isTopicMatched+0xae>
            break;
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <isTopicMatched+0xae>
            break;
 80039ce:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d105      	bne.n	80039e4 <isTopicMatched+0xc2>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <isTopicMatched+0xc2>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <isTopicMatched+0xc4>
 80039e4:	2300      	movs	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0a:	e03c      	b.n	8003a86 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	3205      	adds	r2, #5
 8003a12:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d032      	beq.n	8003a80 <deliverMessage+0x8c>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1e:	3205      	adds	r2, #5
 8003a20:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003a24:	4619      	mov	r1, r3
 8003a26:	68b8      	ldr	r0, [r7, #8]
 8003a28:	f001 f926 	bl	8004c78 <MQTTPacket_equals>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a36:	3205      	adds	r2, #5
 8003a38:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff6f 	bl	8003922 <isTopicMatched>
 8003a44:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01a      	beq.n	8003a80 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	3305      	adds	r3, #5
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8003a5a:	f107 0318 	add.w	r3, r7, #24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fddc 	bl	8003620 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	3305      	adds	r3, #5
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f107 0218 	add.w	r2, r7, #24
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	3301      	adds	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	ddbf      	ble.n	8003a0c <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d112      	bne.n	8003aba <deliverMessage+0xc6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fdbb 	bl	8003620 <NewMessageData>
        c->defaultMessageHandler(&md);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	f107 0210 	add.w	r2, r7, #16
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	@ 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <keepalive>:


int keepalive(MQTTClient* c)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d03e      	beq.n	8003b56 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3358      	adds	r3, #88	@ 0x58
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb55 	bl	800418c <TimerIsExpired>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <keepalive+0x34>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3360      	adds	r3, #96	@ 0x60
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fb4d 	bl	800418c <TimerIsExpired>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d030      	beq.n	8003b5a <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7f1b      	ldrb	r3, [r3, #28]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e029      	b.n	8003b5c <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fb2f 	bl	8004170 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fb4c 	bl	80041b8 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f000 fe09 	bl	8004742 <MQTTSerialize_pingreq>
 8003b30:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	dd11      	ble.n	8003b5c <keepalive+0x98>
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6939      	ldr	r1, [r7, #16]
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fd98 	bl	8003676 <sendPacket>
 8003b46:	6178      	str	r0, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <keepalive+0x98>
                c->ping_outstanding = 1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	771a      	strb	r2, [r3, #28]
 8003b54:	e002      	b.n	8003b5c <keepalive+0x98>
        goto exit;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <keepalive+0x98>
        }
    }

exit:
 8003b5a:	bf00      	nop
    return rc;
 8003b5c:	697b      	ldr	r3, [r7, #20]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
    int i = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e008      	b.n	8003b8a <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	3205      	adds	r2, #5
 8003b7e:	2100      	movs	r1, #0
 8003b80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	ddf3      	ble.n	8003b78 <MQTTCleanSession+0x12>
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffd3 	bl	8003b66 <MQTTCleanSession>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bca:	b095      	sub	sp, #84	@ 0x54
 8003bcc:	af06      	add	r7, sp, #24
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
    int len = 0,
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = MQTT_SUCCESS;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fe1c 	bl	800381a <readPacket>
 8003be2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	2b0d      	cmp	r3, #13
 8003be8:	d81e      	bhi.n	8003c28 <cycle+0x60>
 8003bea:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <cycle+0x28>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003d7f 	.word	0x08003d7f
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003d7f 	.word	0x08003d7f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003d7f 	.word	0x08003d7f
 8003c04:	08003cfb 	.word	0x08003cfb
 8003c08:	08003cfb 	.word	0x08003cfb
 8003c0c:	08003d7f 	.word	0x08003d7f
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003d7f 	.word	0x08003d7f
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003d7f 	.word	0x08003d7f
 8003c20:	08003c29 	.word	0x08003c29
 8003c24:	08003d77 	.word	0x08003d77
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 8003c2c:	e0b9      	b.n	8003da2 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8003c3a:	4616      	mov	r6, r2
 8003c3c:	f107 0210 	add.w	r2, r7, #16
 8003c40:	1d15      	adds	r5, r2, #4
 8003c42:	f107 0210 	add.w	r2, r7, #16
 8003c46:	1c54      	adds	r4, r2, #1
 8003c48:	f107 010c 	add.w	r1, r7, #12
 8003c4c:	f107 0210 	add.w	r2, r7, #16
 8003c50:	1c90      	adds	r0, r2, #2
 8003c52:	9604      	str	r6, [sp, #16]
 8003c54:	9303      	str	r3, [sp, #12]
 8003c56:	f107 0310 	add.w	r3, r7, #16
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	f107 0310 	add.w	r3, r7, #16
 8003c62:	3308      	adds	r3, #8
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	f107 0320 	add.w	r3, r7, #32
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	4622      	mov	r2, r4
 8003c70:	f000 fd76 	bl	8004760 <MQTTDeserialize_publish>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	f040 8090 	bne.w	8003d9c <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8003c82:	f107 0210 	add.w	r2, r7, #16
 8003c86:	f107 0320 	add.w	r3, r7, #32
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff feb1 	bl	80039f4 <deliverMessage>
            if (msg.qos != QOS0)
 8003c92:	7c3b      	ldrb	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d074      	beq.n	8003d82 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8003c98:	7c3b      	ldrb	r3, [r7, #16]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d10c      	bne.n	8003cb8 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6918      	ldr	r0, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	8abb      	ldrh	r3, [r7, #20]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	2204      	movs	r2, #4
 8003cb0:	f001 f8af 	bl	8004e12 <MQTTSerialize_ack>
 8003cb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8003cb6:	e00e      	b.n	8003cd6 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8003cb8:	7c3b      	ldrb	r3, [r7, #16]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d10b      	bne.n	8003cd6 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6918      	ldr	r0, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	8abb      	ldrh	r3, [r7, #20]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2205      	movs	r2, #5
 8003cd0:	f001 f89f 	bl	8004e12 <MQTTSerialize_ack>
 8003cd4:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dc03      	bgt.n	8003ce4 <cycle+0x11c>
                    rc = FAILURE;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ce2:	e005      	b.n	8003cf0 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fcc4 	bl	8003676 <sendPacket>
 8003cee:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d144      	bne.n	8003d82 <cycle+0x1ba>
                    goto exit; // there was a problem
 8003cf8:	e053      	b.n	8003da2 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695c      	ldr	r4, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f107 020a 	add.w	r2, r7, #10
 8003d06:	f107 0109 	add.w	r1, r7, #9
 8003d0a:	f107 0008 	add.w	r0, r7, #8
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4623      	mov	r3, r4
 8003d12:	f000 fd97 	bl	8004844 <MQTTDeserialize_ack>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d003      	beq.n	8003d24 <cycle+0x15c>
                rc = FAILURE;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d22:	e023      	b.n	8003d6c <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6918      	ldr	r0, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d101      	bne.n	8003d38 <cycle+0x170>
 8003d34:	2206      	movs	r2, #6
 8003d36:	e000      	b.n	8003d3a <cycle+0x172>
 8003d38:	2207      	movs	r2, #7
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f001 f867 	bl	8004e12 <MQTTSerialize_ack>
 8003d44:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dc03      	bgt.n	8003d54 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d52:	e00b      	b.n	8003d6c <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fc8c 	bl	8003676 <sendPacket>
 8003d5e:	6338      	str	r0, [r7, #48]	@ 0x30
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d108      	bne.n	8003d86 <cycle+0x1be>
                goto exit; // there was a problem
 8003d74:	e015      	b.n	8003da2 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
            break;
 8003d7c:	e004      	b.n	8003d88 <cycle+0x1c0>
            break;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <cycle+0x1c0>
            break;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <cycle+0x1c0>
            break;
 8003d86:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fe9b 	bl	8003ac4 <keepalive>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d9a:	e002      	b.n	8003da2 <cycle+0x1da>
                goto exit;
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <cycle+0x1da>
    }

exit:
 8003da0:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <cycle+0x1e6>
        rc = packet_type;
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dac:	e006      	b.n	8003dbc <cycle+0x1f4>
    else if (c->isconnected)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <cycle+0x1f4>
        MQTTCloseSession(c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fef1 	bl	8003b9e <MQTTCloseSession>
    return rc;
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	373c      	adds	r7, #60	@ 0x3c
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc6:	bf00      	nop

08003dc8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f9c8 	bl	8004170 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	f107 030c 	add.w	r3, r7, #12
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f9e5 	bl	80041b8 <TimerCountdownMS>

	do
    {
        if (cycle(c, &timer) < 0)
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fee7 	bl	8003bc8 <cycle>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da03      	bge.n	8003e08 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
 8003e04:	617b      	str	r3, [r7, #20]
            break;
 8003e06:	e007      	b.n	8003e18 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f9bd 	bl	800418c <TimerIsExpired>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ea      	beq.n	8003dee <MQTTYield+0x26>

    return rc;
 8003e18:	697b      	ldr	r3, [r7, #20]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <MQTTIsConnected>:

int MQTTIsConnected(MQTTClient* client)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  return client->isconnected;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f99d 	bl	800418c <TimerIsExpired>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10c      	bne.n	8003e72 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff feb4 	bl	8003bc8 <cycle>
 8003e60:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d004      	beq.n	8003e74 <waitfor+0x3a>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	daed      	bge.n	8003e4c <waitfor+0x12>
 8003e70:	e000      	b.n	8003e74 <waitfor+0x3a>
            break; // we timed out
 8003e72:	bf00      	nop

    return rc;
 8003e74:	697b      	ldr	r3, [r7, #20]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b09e      	sub	sp, #120	@ 0x78
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8003e92:	4a43      	ldr	r2, [pc, #268]	@ (8003fa0 <MQTTConnectWithResults+0x120>)
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	4611      	mov	r1, r2
 8003e9a:	2258      	movs	r2, #88	@ 0x58
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f008 fb84 	bl	800c5aa <memcpy>
    int len = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d164      	bne.n	8003f78 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8003eae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f95c 	bl	8004170 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f978 	bl	80041b8 <TimerCountdownMS>

    if (options == 0)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	8b1b      	ldrh	r3, [r3, #24]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	7e9b      	ldrb	r3, [r3, #26]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f000 f973 	bl	80041e0 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6918      	ldr	r0, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4619      	mov	r1, r3
 8003f06:	f000 faa3 	bl	8004450 <MQTTSerialize_connect>
 8003f0a:	6738      	str	r0, [r7, #112]	@ 0x70
 8003f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dd34      	ble.n	8003f7c <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8003f12:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003f16:	461a      	mov	r2, r3
 8003f18:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fbab 	bl	8003676 <sendPacket>
 8003f20:	6778      	str	r0, [r7, #116]	@ 0x74
 8003f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d12b      	bne.n	8003f80 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8003f28:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2102      	movs	r1, #2
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ff82 	bl	8003e3a <waitfor>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d119      	bne.n	8003f70 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1c58      	adds	r0, r3, #1
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f000 fb67 	bl	8004628 <MQTTDeserialize_connack>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d103      	bne.n	8003f68 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f66:	e00c      	b.n	8003f82 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f6e:	e008      	b.n	8003f82 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295
 8003f74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f76:	e004      	b.n	8003f82 <MQTTConnectWithResults+0x102>
		  goto exit;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <MQTTConnectWithResults+0x102>
        goto exit;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8003f80:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8003f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8003f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3778      	adds	r7, #120	@ 0x78
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	0800d9dc 	.word	0x0800d9dc

08003fa4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8003fae:	f107 030c 	add.w	r3, r7, #12
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ff62 	bl	8003e80 <MQTTConnectWithResults>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8003fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc8:	b097      	sub	sp, #92	@ 0x5c
 8003fca:	af08      	add	r7, sp, #32
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 809b 	beq.w	800412c <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8003ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f8b8 	bl	8004170 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f8d4 	bl	80041b8 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d003      	beq.n	8004020 <MQTTPublish+0x5a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d106      	bne.n	800402e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff fb0f 	bl	8003644 <getNextPacketId>
 8004026:	4603      	mov	r3, r0
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	469c      	mov	ip, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	469e      	mov	lr, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	785d      	ldrb	r5, [r3, #1]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8004050:	9206      	str	r2, [sp, #24]
 8004052:	9305      	str	r3, [sp, #20]
 8004054:	ac02      	add	r4, sp, #8
 8004056:	f107 031c 	add.w	r3, r7, #28
 800405a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800405e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004062:	9601      	str	r6, [sp, #4]
 8004064:	9500      	str	r5, [sp, #0]
 8004066:	4673      	mov	r3, lr
 8004068:	2200      	movs	r2, #0
 800406a:	4661      	mov	r1, ip
 800406c:	6838      	ldr	r0, [r7, #0]
 800406e:	f000 fe5a 	bl	8004d26 <MQTTSerialize_publish>
 8004072:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	dd5a      	ble.n	8004130 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 800407a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800407e:	461a      	mov	r2, r3
 8004080:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff faf7 	bl	8003676 <sendPacket>
 8004088:	6378      	str	r0, [r7, #52]	@ 0x34
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d151      	bne.n	8004134 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d122      	bne.n	80040de <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8004098:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800409c:	461a      	mov	r2, r3
 800409e:	2104      	movs	r1, #4
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7ff feca 	bl	8003e3a <waitfor>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d114      	bne.n	80040d6 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	695c      	ldr	r4, [r3, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f107 021a 	add.w	r2, r7, #26
 80040b8:	f107 0119 	add.w	r1, r7, #25
 80040bc:	f107 0018 	add.w	r0, r7, #24
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4623      	mov	r3, r4
 80040c4:	f000 fbbe 	bl	8004844 <MQTTDeserialize_ack>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d035      	beq.n	800413a <MQTTPublish+0x174>
                rc = FAILURE;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d4:	e031      	b.n	800413a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	637b      	str	r3, [r7, #52]	@ 0x34
 80040dc:	e02d      	b.n	800413a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d128      	bne.n	8004138 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80040e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040ea:	461a      	mov	r2, r3
 80040ec:	2107      	movs	r1, #7
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff fea3 	bl	8003e3a <waitfor>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	d114      	bne.n	8004124 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	695c      	ldr	r4, [r3, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f107 0216 	add.w	r2, r7, #22
 8004106:	f107 0115 	add.w	r1, r7, #21
 800410a:	f107 0014 	add.w	r0, r7, #20
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4623      	mov	r3, r4
 8004112:	f000 fb97 	bl	8004844 <MQTTDeserialize_ack>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d00e      	beq.n	800413a <MQTTPublish+0x174>
                rc = FAILURE;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
 8004122:	e00a      	b.n	800413a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	637b      	str	r3, [r7, #52]	@ 0x34
 800412a:	e006      	b.n	800413a <MQTTPublish+0x174>
		    goto exit;
 800412c:	bf00      	nop
 800412e:	e004      	b.n	800413a <MQTTPublish+0x174>
        goto exit;
 8004130:	bf00      	nop
 8004132:	e002      	b.n	800413a <MQTTPublish+0x174>
        goto exit; // there was a problem
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <MQTTPublish+0x174>
    }

exit:
 8004138:	bf00      	nop
    if (rc == FAILURE)
 800413a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d102      	bne.n	8004148 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff fd2b 	bl	8003b9e <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8004148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800414a:	4618      	mov	r0, r3
 800414c:	373c      	adds	r7, #60	@ 0x3c
 800414e:	46bd      	mov	sp, r7
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004154 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
	MilliTimer++;
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <MilliTimer_Handler+0x18>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a03      	ldr	r2, [pc, #12]	@ (800416c <MilliTimer_Handler+0x18>)
 8004160:	6013      	str	r3, [r2, #0]
}
 8004162:	bf00      	nop
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000e04 	.word	0x20000e04

08004170 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	605a      	str	r2, [r3, #4]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <TimerIsExpired+0x28>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	0fdb      	lsrs	r3, r3, #31
 80041a4:	b2db      	uxtb	r3, r3
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000e04 	.word	0x20000e04

080041b8 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <TimerCountdownMS+0x24>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	605a      	str	r2, [r3, #4]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000e04 	.word	0x20000e04

080041e0 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041f0:	fb03 f202 	mul.w	r2, r3, r2
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <TimerCountdown+0x2c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	605a      	str	r2, [r3, #4]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000e04 	.word	0x20000e04

08004210 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <TimerLeftMS+0x28>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000e04 	.word	0x20000e04

0800423c <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a07      	ldr	r2, [pc, #28]	@ (800426c <NewNetwork+0x30>)
 8004250:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a06      	ldr	r2, [pc, #24]	@ (8004270 <NewNetwork+0x34>)
 8004256:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a06      	ldr	r2, [pc, #24]	@ (8004274 <NewNetwork+0x38>)
 800425c:	60da      	str	r2, [r3, #12]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	08004279 	.word	0x08004279
 8004270:	080042d3 	.word	0x080042d3
 8004274:	0800431b 	.word	0x0800431b

08004278 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	3301      	adds	r3, #1
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fe11 	bl	8004ebc <WIZCHIP_READ>
 800429a:	4603      	mov	r3, r0
 800429c:	2b17      	cmp	r3, #23
 800429e:	d113      	bne.n	80042c8 <w5x00_read+0x50>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 ffab 	bl	8005202 <getSn_RX_RSR>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	b292      	uxth	r2, r2
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 fcae 	bl	8005c20 <recv>
 80042c4:	4603      	mov	r3, r0
 80042c6:	e000      	b.n	80042ca <w5x00_read+0x52>

	return SOCK_ERROR;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	3301      	adds	r3, #1
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fde4 	bl	8004ebc <WIZCHIP_READ>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b17      	cmp	r3, #23
 80042f8:	d10a      	bne.n	8004310 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	b292      	uxth	r2, r2
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fb92 	bl	8005a30 <send>
 800430c:	4603      	mov	r3, r0
 800430e:	e000      	b.n	8004312 <w5x00_write+0x40>

	return SOCK_ERROR;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fb0b 	bl	8005944 <disconnect>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8004344:	f243 0339 	movw	r3, #12345	@ 0x3039
 8004348:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	b2d8      	uxtb	r0, r3
 8004350:	8afa      	ldrh	r2, [r7, #22]
 8004352:	2300      	movs	r3, #0
 8004354:	2101      	movs	r1, #1
 8004356:	f001 f897 	bl	8005488 <socket>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d001      	beq.n	800436a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8004366:	2300      	movs	r3, #0
 8004368:	e00d      	b.n	8004386 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f001 fa09 	bl	800578c <connect>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d001      	beq.n	8004384 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <ConnectNetwork+0x50>

	return SOCK_OK;
 8004384:	2301      	movs	r3, #1
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800438e:	b590      	push	{r4, r7, lr}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
	int len = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7a1b      	ldrb	r3, [r3, #8]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d102      	bne.n	80043a8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80043a2:	230c      	movs	r3, #12
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	e005      	b.n	80043b4 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	7a1b      	ldrb	r3, [r3, #8]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d101      	bne.n	80043b4 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80043b0:	230a      	movs	r3, #10
 80043b2:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	330c      	adds	r3, #12
 80043b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043bc:	f000 fc43 	bl	8004c46 <MQTTstrlen>
 80043c0:	4603      	mov	r3, r0
 80043c2:	3302      	adds	r3, #2
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7edb      	ldrb	r3, [r3, #27]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d013      	beq.n	80043fa <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3324      	adds	r3, #36	@ 0x24
 80043d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043da:	f000 fc34 	bl	8004c46 <MQTTstrlen>
 80043de:	4603      	mov	r3, r0
 80043e0:	1c9c      	adds	r4, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3330      	adds	r3, #48	@ 0x30
 80043e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043ea:	f000 fc2c 	bl	8004c46 <MQTTstrlen>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4423      	add	r3, r4
 80043f2:	3302      	adds	r3, #2
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <MQTTSerialize_connectLength+0x7c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3340      	adds	r3, #64	@ 0x40
 800440e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004412:	f000 fc18 	bl	8004c46 <MQTTstrlen>
 8004416:	4603      	mov	r3, r0
 8004418:	3302      	adds	r3, #2
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <MQTTSerialize_connectLength+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	334c      	adds	r3, #76	@ 0x4c
 8004434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004438:	f000 fc05 	bl	8004c46 <MQTTstrlen>
 800443c:	4603      	mov	r3, r0
 800443e:	3302      	adds	r3, #2
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8004446:	68fb      	ldr	r3, [r7, #12]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}

08004450 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ff8b 	bl	800438e <MQTTSerialize_connectLength>
 8004478:	6238      	str	r0, [r7, #32]
 800447a:	6a38      	ldr	r0, [r7, #32]
 800447c:	f000 fa98 	bl	80049b0 <MQTTPacket_len>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4293      	cmp	r3, r2
 8004486:	da03      	bge.n	8004490 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004488:	f06f 0301 	mvn.w	r3, #1
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800448e:	e0c2      	b.n	8004616 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8004494:	7e3b      	ldrb	r3, [r7, #24]
 8004496:	2201      	movs	r2, #1
 8004498:	f362 1307 	bfi	r3, r2, #4, #4
 800449c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800449e:	7e3a      	ldrb	r2, [r7, #24]
 80044a0:	f107 031c 	add.w	r3, r7, #28
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fb11 	bl	8004ace <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	6a39      	ldr	r1, [r7, #32]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fa12 	bl	80048da <MQTTPacket_encode>
 80044b6:	4602      	mov	r2, r0
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7a1b      	ldrb	r3, [r3, #8]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d10c      	bne.n	80044e0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80044c6:	f107 031c 	add.w	r3, r7, #28
 80044ca:	4955      	ldr	r1, [pc, #340]	@ (8004620 <MQTTSerialize_connect+0x1d0>)
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fb3c 	bl	8004b4a <writeCString>
		writeChar(&ptr, (char) 4);
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	2104      	movs	r1, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 faf8 	bl	8004ace <writeChar>
 80044de:	e00b      	b.n	80044f8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80044e0:	f107 031c 	add.w	r3, r7, #28
 80044e4:	494f      	ldr	r1, [pc, #316]	@ (8004624 <MQTTSerialize_connect+0x1d4>)
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb2f 	bl	8004b4a <writeCString>
		writeChar(&ptr, (char) 3);
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	2103      	movs	r1, #3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 faeb 	bl	8004ace <writeChar>
	}

	flags.all = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7e9b      	ldrb	r3, [r3, #26]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7d3b      	ldrb	r3, [r7, #20]
 8004508:	f362 0341 	bfi	r3, r2, #1, #1
 800450c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7edb      	ldrb	r3, [r3, #27]
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2da      	uxtb	r2, r3
 800451c:	7d3b      	ldrb	r3, [r7, #20]
 800451e:	f362 0382 	bfi	r3, r2, #2, #1
 8004522:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8004524:	7d3b      	ldrb	r3, [r7, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	7d3b      	ldrb	r3, [r7, #20]
 800453e:	f362 03c4 	bfi	r3, r2, #3, #2
 8004542:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	7d3b      	ldrb	r3, [r7, #20]
 8004552:	f362 1345 	bfi	r3, r2, #5, #1
 8004556:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <MQTTSerialize_connect+0x118>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8004568:	7d3b      	ldrb	r3, [r7, #20]
 800456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <MQTTSerialize_connect+0x130>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8004580:	7d3b      	ldrb	r3, [r7, #20]
 8004582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004586:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8004588:	7d3a      	ldrb	r2, [r7, #20]
 800458a:	f107 031c 	add.w	r3, r7, #28
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa9c 	bl	8004ace <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8b1b      	ldrh	r3, [r3, #24]
 800459a:	461a      	mov	r2, r3
 800459c:	f107 031c 	add.w	r3, r7, #28
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 faa8 	bl	8004af8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f107 001c 	add.w	r0, r7, #28
 80045ae:	330c      	adds	r3, #12
 80045b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b2:	f000 fae9 	bl	8004b88 <writeMQTTString>
	if (options->willFlag)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	7edb      	ldrb	r3, [r3, #27]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f107 001c 	add.w	r0, r7, #28
 80045c4:	3324      	adds	r3, #36	@ 0x24
 80045c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c8:	f000 fade 	bl	8004b88 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f107 001c 	add.w	r0, r7, #28
 80045d2:	3330      	adds	r3, #48	@ 0x30
 80045d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d6:	f000 fad7 	bl	8004b88 <writeMQTTString>
	}
	if (flags.bits.username)
 80045da:	7d3b      	ldrb	r3, [r7, #20]
 80045dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f107 001c 	add.w	r0, r7, #28
 80045ec:	3340      	adds	r3, #64	@ 0x40
 80045ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f0:	f000 faca 	bl	8004b88 <writeMQTTString>
	if (flags.bits.password)
 80045f4:	7d3b      	ldrb	r3, [r7, #20]
 80045f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f107 001c 	add.w	r0, r7, #28
 8004606:	334c      	adds	r3, #76	@ 0x4c
 8004608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800460a:	f000 fabd 	bl	8004b88 <writeMQTTString>

	rc = ptr - buf;
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	@ 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	0800da34 	.word	0x0800da34
 8004624:	0800da3c 	.word	0x0800da3c

08004628 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	@ 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800464a:	f107 0318 	add.w	r3, r7, #24
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fa29 	bl	8004aa6 <readChar>
 8004654:	4603      	mov	r3, r0
 8004656:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8004658:	7f3b      	ldrb	r3, [r7, #28]
 800465a:	f023 030f 	bic.w	r3, r3, #15
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b20      	cmp	r3, #32
 8004662:	d12e      	bne.n	80046c2 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f107 0214 	add.w	r2, r7, #20
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f9e9 	bl	8004a44 <MQTTPacket_decodeBuf>
 8004672:	6278      	str	r0, [r7, #36]	@ 0x24
 8004674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4413      	add	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4413      	add	r3, r2
 8004682:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	dd1b      	ble.n	80046c6 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800468e:	f107 0318 	add.w	r3, r7, #24
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa07 	bl	8004aa6 <readChar>
 8004698:	4603      	mov	r3, r0
 800469a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800469c:	7c3b      	ldrb	r3, [r7, #16]
 800469e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80046aa:	f107 0318 	add.w	r3, r7, #24
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f9f9 	bl	8004aa6 <readChar>
 80046b4:	4603      	mov	r3, r0
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	701a      	strb	r2, [r3, #0]

	rc = 1;
 80046bc:	2301      	movs	r3, #1
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	e002      	b.n	80046c8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80046c6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3728      	adds	r7, #40	@ 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b088      	sub	sp, #32
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	dc03      	bgt.n	80046fc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80046f4:	f06f 0301 	mvn.w	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80046fa:	e01d      	b.n	8004738 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	b2da      	uxtb	r2, r3
 8004708:	7e3b      	ldrb	r3, [r7, #24]
 800470a:	f362 1307 	bfi	r3, r2, #4, #4
 800470e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004710:	7e3a      	ldrb	r2, [r7, #24]
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f000 f9d8 	bl	8004ace <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f8d9 	bl	80048da <MQTTPacket_encode>
 8004728:	4602      	mov	r2, r0
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004738:	69fb      	ldr	r3, [r7, #28]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800474c:	220c      	movs	r2, #12
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ffbe 	bl	80046d2 <MQTTSerialize_zero>
 8004756:	4603      	mov	r3, r0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	@ 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004774:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004782:	f107 0318 	add.w	r3, r7, #24
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f98d 	bl	8004aa6 <readChar>
 800478c:	4603      	mov	r3, r0
 800478e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8004790:	7f3b      	ldrb	r3, [r7, #28]
 8004792:	f023 030f 	bic.w	r3, r3, #15
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b30      	cmp	r3, #48	@ 0x30
 800479a:	d14b      	bne.n	8004834 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800479c:	7f3b      	ldrb	r3, [r7, #28]
 800479e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80047aa:	7f3b      	ldrb	r3, [r7, #28]
 80047ac:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80047b8:	7f3b      	ldrb	r3, [r7, #28]
 80047ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f107 0214 	add.w	r2, r7, #20
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f938 	bl	8004a44 <MQTTPacket_decodeBuf>
 80047d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80047d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	4413      	add	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80047e6:	f107 0318 	add.w	r3, r7, #24
 80047ea:	6a3a      	ldr	r2, [r7, #32]
 80047ec:	4619      	mov	r1, r3
 80047ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047f0:	f000 f9f8 	bl	8004be4 <readMQTTLenString>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01e      	beq.n	8004838 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8004800:	2b00      	cmp	r3, #0
 8004802:	db19      	blt.n	8004838 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dd08      	ble.n	800481e <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800480c:	f107 0318 	add.w	r3, r7, #24
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f92d 	bl	8004a70 <readInt>
 8004816:	4603      	mov	r3, r0
 8004818:	b29a      	uxth	r2, r3
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	6a3a      	ldr	r2, [r7, #32]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004826:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	601a      	str	r2, [r3, #0]
	rc = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
 8004832:	e002      	b.n	800483a <MQTTDeserialize_publish+0xda>
		goto exit;
 8004834:	bf00      	nop
 8004836:	e000      	b.n	800483a <MQTTDeserialize_publish+0xda>
		goto exit;
 8004838:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	@ 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	@ 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004862:	f107 0318 	add.w	r3, r7, #24
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f91d 	bl	8004aa6 <readChar>
 800486c:	4603      	mov	r3, r0
 800486e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8004870:	7f3b      	ldrb	r3, [r7, #28]
 8004872:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800487e:	7f3b      	ldrb	r3, [r7, #28]
 8004880:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f107 0214 	add.w	r2, r7, #20
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f8d5 	bl	8004a44 <MQTTPacket_decodeBuf>
 800489a:	6278      	str	r0, [r7, #36]	@ 0x24
 800489c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	6a3a      	ldr	r2, [r7, #32]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	dd0b      	ble.n	80048ce <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 80048b6:	f107 0318 	add.w	r3, r7, #24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f8d8 	bl	8004a70 <readInt>
 80048c0:	4603      	mov	r3, r0
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	801a      	strh	r2, [r3, #0]

	rc = 1;
 80048c8:	2301      	movs	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80048cc:	e000      	b.n	80048d0 <MQTTDeserialize_ack+0x8c>
		goto exit;
 80048ce:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3728      	adds	r7, #40	@ 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	425a      	negs	r2, r3
 80048ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048f4:	bf58      	it	pl
 80048f6:	4253      	negpl	r3, r2
 80048f8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da00      	bge.n	8004902 <MQTTPacket_encode+0x28>
 8004900:	337f      	adds	r3, #127	@ 0x7f
 8004902:	11db      	asrs	r3, r3, #7
 8004904:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dd03      	ble.n	8004914 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800490c:	7afb      	ldrb	r3, [r7, #11]
 800490e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004912:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	60fa      	str	r2, [r7, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	7afa      	ldrb	r2, [r7, #11]
 8004922:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	dcde      	bgt.n	80048e8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3301      	adds	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b04      	cmp	r3, #4
 8004960:	dd03      	ble.n	800496a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	60fb      	str	r3, [r7, #12]
			goto exit;
 8004968:	e01d      	b.n	80049a6 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800496a:	f107 020b 	add.w	r2, r7, #11
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2101      	movs	r1, #1
 8004972:	4610      	mov	r0, r2
 8004974:	4798      	blx	r3
 8004976:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d112      	bne.n	80049a4 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	441a      	add	r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	01db      	lsls	r3, r3, #7
 8004998:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800499a:	7afb      	ldrb	r3, [r7, #11]
 800499c:	b25b      	sxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dbd6      	blt.n	8004950 <MQTTPacket_decode+0x18>
exit:
 80049a2:	e000      	b.n	80049a6 <MQTTPacket_decode+0x6e>
			goto exit;
 80049a4:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 80049a6:	693b      	ldr	r3, [r7, #16]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3301      	adds	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80049c2:	dc03      	bgt.n	80049cc <MQTTPacket_len+0x1c>
		rem_len += 1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3301      	adds	r3, #1
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e012      	b.n	80049f2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049d2:	da03      	bge.n	80049dc <MQTTPacket_len+0x2c>
		rem_len += 2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3302      	adds	r3, #2
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	e00a      	b.n	80049f2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a08      	ldr	r2, [pc, #32]	@ (8004a00 <MQTTPacket_len+0x50>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	dc03      	bgt.n	80049ec <MQTTPacket_len+0x3c>
		rem_len += 3;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3303      	adds	r3, #3
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	e002      	b.n	80049f2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	607b      	str	r3, [r7, #4]
	return rem_len;
 80049f2:	687b      	ldr	r3, [r7, #4]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	001ffffe 	.word	0x001ffffe

08004a04 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e00a      	b.n	8004a2a <bufchar+0x26>
		*c = *bufptr++;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <bufchar+0x3c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	4909      	ldr	r1, [pc, #36]	@ (8004a40 <bufchar+0x3c>)
 8004a1c:	600a      	str	r2, [r1, #0]
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	dbf0      	blt.n	8004a14 <bufchar+0x10>
	return count;
 8004a32:	683b      	ldr	r3, [r7, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20000e08 	.word	0x20000e08

08004a44 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8004a4e:	4a06      	ldr	r2, [pc, #24]	@ (8004a68 <MQTTPacket_decodeBuf+0x24>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	4805      	ldr	r0, [pc, #20]	@ (8004a6c <MQTTPacket_decodeBuf+0x28>)
 8004a58:	f7ff ff6e 	bl	8004938 <MQTTPacket_decode>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000e08 	.word	0x20000e08
 8004a6c:	08004a05 	.word	0x08004a05

08004a70 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	3201      	adds	r2, #1
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1c9a      	adds	r2, r3, #2
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
	return len;
 8004a98:	68bb      	ldr	r3, [r7, #8]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
	return c;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da00      	bge.n	8004b0a <writeInt+0x12>
 8004b08:	33ff      	adds	r3, #255	@ 0xff
 8004b0a:	121b      	asrs	r3, r3, #8
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	425a      	negs	r2, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	bf58      	it	pl
 8004b2a:	4253      	negpl	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8004b54:	6838      	ldr	r0, [r7, #0]
 8004b56:	f7fb fb43 	bl	80001e0 <strlen>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ffc9 	bl	8004af8 <writeInt>
	memcpy(*pptr, string, len);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f007 fd1b 	bl	800c5aa <memcpy>
	*pptr += len;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	441a      	add	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	4638      	mov	r0, r7
 8004b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dd12      	ble.n	8004bc2 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff ffa9 	bl	8004af8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f007 fcfb 	bl	800c5aa <memcpy>
		*pptr += mqttstring.lenstring.len;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	441a      	add	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8004bc0:	e00c      	b.n	8004bdc <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ffbc 	bl	8004b4a <writeCString>
}
 8004bd2:	e003      	b.n	8004bdc <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff ff8e 	bl	8004af8 <writeInt>
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	dd1a      	ble.n	8004c36 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8004c00:	68b8      	ldr	r0, [r7, #8]
 8004c02:	f7ff ff35 	bl	8004a70 <readInt>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6852      	ldr	r2, [r2, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d30c      	bcc.n	8004c36 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	6852      	ldr	r2, [r2, #4]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	601a      	str	r2, [r3, #0]
			rc = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8004c3c:	697b      	ldr	r3, [r7, #20]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	1d3b      	adds	r3, r7, #4
 8004c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fb fabe 	bl	80001e0 <strlen>
 8004c64:	4603      	mov	r3, r0
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e001      	b.n	8004c6e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	617b      	str	r3, [r7, #20]
	return rc;
 8004c6e:	697b      	ldr	r3, [r7, #20]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
		blen = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fa9f 	bl	80001e0 <strlen>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	e005      	b.n	8004cb4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8004cb4:	6838      	ldr	r0, [r7, #0]
 8004cb6:	f7fb fa93 	bl	80001e0 <strlen>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10a      	bne.n	8004cdc <MQTTPacket_equals+0x64>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6938      	ldr	r0, [r7, #16]
 8004cce:	f007 fb76 	bl	800c3be <strncmp>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <MQTTPacket_equals+0x64>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <MQTTPacket_equals+0x66>
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	4638      	mov	r0, r7
 8004cf0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cfe:	f7ff ffa2 	bl	8004c46 <MQTTstrlen>
 8004d02:	4603      	mov	r3, r0
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	4413      	add	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dd02      	ble.n	8004d1c <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	617b      	str	r3, [r7, #20]
	return len;
 8004d1c:	697b      	ldr	r3, [r7, #20]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b08a      	sub	sp, #40	@ 0x28
 8004d2a:	af02      	add	r7, sp, #8
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8004d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7ff ffc8 	bl	8004ce6 <MQTTSerialize_publishLength>
 8004d56:	61b8      	str	r0, [r7, #24]
 8004d58:	69b8      	ldr	r0, [r7, #24]
 8004d5a:	f7ff fe29 	bl	80049b0 <MQTTPacket_len>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	da03      	bge.n	8004d6e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004d66:	f06f 0301 	mvn.w	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004d6c:	e04c      	b.n	8004e08 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8004d6e:	7c3b      	ldrb	r3, [r7, #16]
 8004d70:	2203      	movs	r2, #3
 8004d72:	f362 1307 	bfi	r3, r2, #4, #4
 8004d76:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	7c3b      	ldrb	r3, [r7, #16]
 8004d82:	f362 03c3 	bfi	r3, r2, #3, #1
 8004d86:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	7c3b      	ldrb	r3, [r7, #16]
 8004d92:	f362 0342 	bfi	r3, r2, #1, #2
 8004d96:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8004d98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	7c3b      	ldrb	r3, [r7, #16]
 8004da4:	f362 0300 	bfi	r3, r2, #0, #1
 8004da8:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8004daa:	7c3a      	ldrb	r2, [r7, #16]
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fe8b 	bl	8004ace <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	69b9      	ldr	r1, [r7, #24]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fd8c 	bl	80048da <MQTTPacket_encode>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8004dca:	f107 0014 	add.w	r0, r7, #20
 8004dce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd4:	f7ff fed8 	bl	8004b88 <writeMQTTString>

	if (qos > 0)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	dd06      	ble.n	8004dec <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8004dde:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fe86 	bl	8004af8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df2:	4618      	mov	r0, r3
 8004df4:	f007 fbd9 	bl	800c5aa <memcpy>
	ptr += payloadlen;
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfc:	4413      	add	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004e08:	69fb      	ldr	r3, [r7, #28]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b088      	sub	sp, #32
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	460b      	mov	r3, r1
 8004e22:	71fb      	strb	r3, [r7, #7]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	dc03      	bgt.n	8004e42 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004e3a:	f06f 0301 	mvn.w	r3, #1
 8004e3e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004e40:	e037      	b.n	8004eb2 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	7e3b      	ldrb	r3, [r7, #24]
 8004e4c:	f362 1307 	bfi	r3, r2, #4, #4
 8004e50:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8004e52:	79bb      	ldrb	r3, [r7, #6]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	7e3b      	ldrb	r3, [r7, #24]
 8004e5c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004e60:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	2b06      	cmp	r3, #6
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	7e3b      	ldrb	r3, [r7, #24]
 8004e76:	f362 0342 	bfi	r3, r2, #1, #2
 8004e7a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004e7c:	7e3a      	ldrb	r2, [r7, #24]
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fe22 	bl	8004ace <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd23 	bl	80048da <MQTTPacket_encode>
 8004e94:	4602      	mov	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8004e9c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fe27 	bl	8004af8 <writeInt>
	rc = ptr - buf;
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004ec4:	4b22      	ldr	r3, [pc, #136]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004eca:	4b21      	ldr	r3, [pc, #132]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <WIZCHIP_READ+0x24>
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d114      	bne.n	8004f0a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	0c12      	lsrs	r2, r2, #16
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	4610      	mov	r0, r2
 8004eec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	0a12      	lsrs	r2, r2, #8
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004efc:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
 8004f08:	e011      	b.n	8004f2e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	f107 020c 	add.w	r2, r7, #12
 8004f28:	2103      	movs	r1, #3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	4798      	blx	r3
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f3e:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <WIZCHIP_READ+0x94>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4798      	blx	r3
   return ret;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2000009c 	.word	0x2000009c

08004f54 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004f60:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004f66:	4b21      	ldr	r3, [pc, #132]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f043 0304 	orr.w	r3, r3, #4
 8004f72:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004f74:	4b1d      	ldr	r3, [pc, #116]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d119      	bne.n	8004fb0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	0c12      	lsrs	r2, r2, #16
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	4610      	mov	r0, r2
 8004f88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004f8a:	4b18      	ldr	r3, [pc, #96]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	0a12      	lsrs	r2, r2, #8
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	4610      	mov	r0, r2
 8004f96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004f98:	4b14      	ldr	r3, [pc, #80]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004fa4:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	4610      	mov	r0, r2
 8004fac:	4798      	blx	r3
 8004fae:	e013      	b.n	8004fd8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004fca:	4b08      	ldr	r3, [pc, #32]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fce:	f107 020c 	add.w	r2, r7, #12
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004fd8:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004fde:	4b03      	ldr	r3, [pc, #12]	@ (8004fec <WIZCHIP_WRITE+0x98>)
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	4798      	blx	r3
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	2000009c 	.word	0x2000009c

08004ff0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005004:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800500a:	4b28      	ldr	r3, [pc, #160]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <WIZCHIP_READ_BUF+0x2a>
 8005012:	4b26      	ldr	r3, [pc, #152]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d126      	bne.n	8005068 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800501a:	4b24      	ldr	r3, [pc, #144]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	0c12      	lsrs	r2, r2, #16
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005028:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	0a12      	lsrs	r2, r2, #8
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	4610      	mov	r0, r2
 8005034:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005036:	4b1d      	ldr	r3, [pc, #116]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	4610      	mov	r0, r2
 8005040:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005042:	2300      	movs	r3, #0
 8005044:	82fb      	strh	r3, [r7, #22]
 8005046:	e00a      	b.n	800505e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8005048:	4b18      	ldr	r3, [pc, #96]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	8afa      	ldrh	r2, [r7, #22]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	188c      	adds	r4, r1, r2
 8005052:	4798      	blx	r3
 8005054:	4603      	mov	r3, r0
 8005056:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8005058:	8afb      	ldrh	r3, [r7, #22]
 800505a:	3301      	adds	r3, #1
 800505c:	82fb      	strh	r3, [r7, #22]
 800505e:	8afa      	ldrh	r2, [r7, #22]
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3f0      	bcc.n	8005048 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005066:	e017      	b.n	8005098 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	b2db      	uxtb	r3, r3
 800506e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b2db      	uxtb	r3, r3
 8005076:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800507e:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	f107 0210 	add.w	r2, r7, #16
 8005086:	2103      	movs	r1, #3
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	4611      	mov	r1, r2
 8005094:	68b8      	ldr	r0, [r7, #8]
 8005096:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800509e:	4b03      	ldr	r3, [pc, #12]	@ (80050ac <WIZCHIP_READ_BUF+0xbc>)
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	4798      	blx	r3
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd90      	pop	{r4, r7, pc}
 80050ac:	2000009c 	.word	0x2000009c

080050b0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80050be:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80050c4:	4b29      	ldr	r3, [pc, #164]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80050d2:	4b26      	ldr	r3, [pc, #152]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d126      	bne.n	8005128 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80050da:	4b24      	ldr	r3, [pc, #144]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	0c12      	lsrs	r2, r2, #16
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	4610      	mov	r0, r2
 80050e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80050e8:	4b20      	ldr	r3, [pc, #128]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	0a12      	lsrs	r2, r2, #8
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	4610      	mov	r0, r2
 80050f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80050f6:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	4610      	mov	r0, r2
 8005100:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	82fb      	strh	r3, [r7, #22]
 8005106:	e00a      	b.n	800511e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005108:	4b18      	ldr	r3, [pc, #96]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	8afa      	ldrh	r2, [r7, #22]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	440a      	add	r2, r1
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005118:	8afb      	ldrh	r3, [r7, #22]
 800511a:	3301      	adds	r3, #1
 800511c:	82fb      	strh	r3, [r7, #22]
 800511e:	8afa      	ldrh	r2, [r7, #22]
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3f0      	bcc.n	8005108 <WIZCHIP_WRITE_BUF+0x58>
 8005126:	e017      	b.n	8005158 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	b2db      	uxtb	r3, r3
 800512e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	b2db      	uxtb	r3, r3
 8005136:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800513e:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	f107 0210 	add.w	r2, r7, #16
 8005146:	2103      	movs	r1, #3
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	4611      	mov	r1, r2
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005158:	4b04      	ldr	r3, [pc, #16]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800515e:	4b03      	ldr	r3, [pc, #12]	@ (800516c <WIZCHIP_WRITE_BUF+0xbc>)
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	4798      	blx	r3
}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	2000009c 	.word	0x2000009c

08005170 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800517a:	2300      	movs	r3, #0
 800517c:	81fb      	strh	r3, [r7, #14]
 800517e:	2300      	movs	r3, #0
 8005180:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	3301      	adds	r3, #1
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fe94 	bl	8004ebc <WIZCHIP_READ>
 8005194:	4603      	mov	r3, r0
 8005196:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005198:	89bb      	ldrh	r3, [r7, #12]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	b29c      	uxth	r4, r3
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	3301      	adds	r3, #1
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fe86 	bl	8004ebc <WIZCHIP_READ>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4423      	add	r3, r4
 80051b4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80051b6:	89bb      	ldrh	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d019      	beq.n	80051f0 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	3301      	adds	r3, #1
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fe77 	bl	8004ebc <WIZCHIP_READ>
 80051ce:	4603      	mov	r3, r0
 80051d0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	b29c      	uxth	r4, r3
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	3301      	adds	r3, #1
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fe69 	bl	8004ebc <WIZCHIP_READ>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4423      	add	r3, r4
 80051ee:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80051f0:	89fa      	ldrh	r2, [r7, #14]
 80051f2:	89bb      	ldrh	r3, [r7, #12]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1c4      	bne.n	8005182 <getSn_TX_FSR+0x12>
   return val;
 80051f8:	89fb      	ldrh	r3, [r7, #14]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}

08005202 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005202:	b590      	push	{r4, r7, lr}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	4603      	mov	r3, r0
 800520a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800520c:	2300      	movs	r3, #0
 800520e:	81fb      	strh	r3, [r7, #14]
 8005210:	2300      	movs	r3, #0
 8005212:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	3301      	adds	r3, #1
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff fe4b 	bl	8004ebc <WIZCHIP_READ>
 8005226:	4603      	mov	r3, r0
 8005228:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800522a:	89bb      	ldrh	r3, [r7, #12]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	b29c      	uxth	r4, r3
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	3301      	adds	r3, #1
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fe3d 	bl	8004ebc <WIZCHIP_READ>
 8005242:	4603      	mov	r3, r0
 8005244:	4423      	add	r3, r4
 8005246:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005248:	89bb      	ldrh	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d019      	beq.n	8005282 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	3301      	adds	r3, #1
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fe2e 	bl	8004ebc <WIZCHIP_READ>
 8005260:	4603      	mov	r3, r0
 8005262:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005264:	89fb      	ldrh	r3, [r7, #14]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	b29c      	uxth	r4, r3
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	3301      	adds	r3, #1
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fe20 	bl	8004ebc <WIZCHIP_READ>
 800527c:	4603      	mov	r3, r0
 800527e:	4423      	add	r3, r4
 8005280:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005282:	89fa      	ldrh	r2, [r7, #14]
 8005284:	89bb      	ldrh	r3, [r7, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d1c4      	bne.n	8005214 <getSn_RX_RSR+0x12>
   return val;
 800528a:	89fb      	ldrh	r3, [r7, #14]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}

08005294 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	6039      	str	r1, [r7, #0]
 800529e:	71fb      	strb	r3, [r7, #7]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80052ac:	88bb      	ldrh	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d046      	beq.n	8005340 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	3301      	adds	r3, #1
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fdfc 	bl	8004ebc <WIZCHIP_READ>
 80052c4:	4603      	mov	r3, r0
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	b29c      	uxth	r4, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3301      	adds	r3, #1
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fdf0 	bl	8004ebc <WIZCHIP_READ>
 80052dc:	4603      	mov	r3, r0
 80052de:	4423      	add	r3, r4
 80052e0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	79fa      	ldrb	r2, [r7, #7]
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	3202      	adds	r2, #2
 80052ec:	00d2      	lsls	r2, r2, #3
 80052ee:	4413      	add	r3, r2
 80052f0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80052f2:	88bb      	ldrh	r3, [r7, #4]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	68b8      	ldr	r0, [r7, #8]
 80052fa:	f7ff fed9 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80052fe:	89fa      	ldrh	r2, [r7, #14]
 8005300:	88bb      	ldrh	r3, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3301      	adds	r3, #1
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005312:	461a      	mov	r2, r3
 8005314:	89fb      	ldrh	r3, [r7, #14]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	b29b      	uxth	r3, r3
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f7ff fe18 	bl	8004f54 <WIZCHIP_WRITE>
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	3301      	adds	r3, #1
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005330:	461a      	mov	r2, r3
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7ff fe0b 	bl	8004f54 <WIZCHIP_WRITE>
 800533e:	e000      	b.n	8005342 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005340:	bf00      	nop
}
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}

08005348 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	6039      	str	r1, [r7, #0]
 8005352:	71fb      	strb	r3, [r7, #7]
 8005354:	4613      	mov	r3, r2
 8005356:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005360:	88bb      	ldrh	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d046      	beq.n	80053f4 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3301      	adds	r3, #1
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fda2 	bl	8004ebc <WIZCHIP_READ>
 8005378:	4603      	mov	r3, r0
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	b29c      	uxth	r4, r3
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	3301      	adds	r3, #1
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fd96 	bl	8004ebc <WIZCHIP_READ>
 8005390:	4603      	mov	r3, r0
 8005392:	4423      	add	r3, r4
 8005394:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005396:	89fb      	ldrh	r3, [r7, #14]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	79fa      	ldrb	r2, [r7, #7]
 800539c:	0092      	lsls	r2, r2, #2
 800539e:	3203      	adds	r2, #3
 80053a0:	00d2      	lsls	r2, r2, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80053a6:	88bb      	ldrh	r3, [r7, #4]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	68b8      	ldr	r0, [r7, #8]
 80053ae:	f7ff fe1f 	bl	8004ff0 <WIZCHIP_READ_BUF>
   ptr += len;
 80053b2:	89fa      	ldrh	r2, [r7, #14]
 80053b4:	88bb      	ldrh	r3, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	3301      	adds	r3, #1
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80053c6:	461a      	mov	r2, r3
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7ff fdbe 	bl	8004f54 <WIZCHIP_WRITE>
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	3301      	adds	r3, #1
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80053e4:	461a      	mov	r2, r3
 80053e6:	89fb      	ldrh	r3, [r7, #14]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7ff fdb1 	bl	8004f54 <WIZCHIP_WRITE>
 80053f2:	e000      	b.n	80053f6 <wiz_recv_data+0xae>
   if(len == 0) return;
 80053f4:	bf00      	nop
}
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd90      	pop	{r4, r7, pc}

080053fc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	460a      	mov	r2, r1
 8005406:	71fb      	strb	r3, [r7, #7]
 8005408:	4613      	mov	r3, r2
 800540a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	3301      	adds	r3, #1
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fd4d 	bl	8004ebc <WIZCHIP_READ>
 8005422:	4603      	mov	r3, r0
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	b29c      	uxth	r4, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	3301      	adds	r3, #1
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fd41 	bl	8004ebc <WIZCHIP_READ>
 800543a:	4603      	mov	r3, r0
 800543c:	4423      	add	r3, r4
 800543e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005440:	89fa      	ldrh	r2, [r7, #14]
 8005442:	88bb      	ldrh	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3301      	adds	r3, #1
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005454:	461a      	mov	r2, r3
 8005456:	89fb      	ldrh	r3, [r7, #14]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	b29b      	uxth	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7ff fd77 	bl	8004f54 <WIZCHIP_WRITE>
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	3301      	adds	r3, #1
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005472:	461a      	mov	r2, r3
 8005474:	89fb      	ldrh	r3, [r7, #14]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f7ff fd6a 	bl	8004f54 <WIZCHIP_WRITE>
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	bd90      	pop	{r4, r7, pc}

08005488 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4623      	mov	r3, r4
 8005498:	71fb      	strb	r3, [r7, #7]
 800549a:	4603      	mov	r3, r0
 800549c:	71bb      	strb	r3, [r7, #6]
 800549e:	460b      	mov	r3, r1
 80054a0:	80bb      	strh	r3, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d902      	bls.n	80054b2 <socket+0x2a>
 80054ac:	f04f 33ff 	mov.w	r3, #4294967295
 80054b0:	e0f0      	b.n	8005694 <socket+0x20c>
	switch(protocol)
 80054b2:	79bb      	ldrb	r3, [r7, #6]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d005      	beq.n	80054c4 <socket+0x3c>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	dd11      	ble.n	80054e0 <socket+0x58>
 80054bc:	3b02      	subs	r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d80e      	bhi.n	80054e0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80054c2:	e011      	b.n	80054e8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	2204      	movs	r2, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80054d0:	f7ff fd8e 	bl	8004ff0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <socket+0x5e>
 80054da:	f06f 0302 	mvn.w	r3, #2
 80054de:	e0d9      	b.n	8005694 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80054e0:	f06f 0304 	mvn.w	r3, #4
 80054e4:	e0d6      	b.n	8005694 <socket+0x20c>
	    break;
 80054e6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <socket+0x70>
 80054f2:	f06f 0305 	mvn.w	r3, #5
 80054f6:	e0cd      	b.n	8005694 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d028      	beq.n	8005550 <socket+0xc8>
	{
   	switch(protocol)
 80054fe:	79bb      	ldrb	r3, [r7, #6]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d002      	beq.n	800550a <socket+0x82>
 8005504:	2b02      	cmp	r3, #2
 8005506:	d008      	beq.n	800551a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8005508:	e022      	b.n	8005550 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11a      	bne.n	800554a <socket+0xc2>
 8005514:	f06f 0305 	mvn.w	r3, #5
 8005518:	e0bc      	b.n	8005694 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005528:	2b00      	cmp	r3, #0
 800552a:	db02      	blt.n	8005532 <socket+0xaa>
 800552c:	f06f 0305 	mvn.w	r3, #5
 8005530:	e0b0      	b.n	8005694 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800553c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005540:	2b00      	cmp	r3, #0
 8005542:	db04      	blt.n	800554e <socket+0xc6>
 8005544:	f06f 0305 	mvn.w	r3, #5
 8005548:	e0a4      	b.n	8005694 <socket+0x20c>
   	      break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <socket+0xc8>
   	      break;
 800554e:	bf00      	nop
   	}
   }
	close(sn);
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f8ac 	bl	80056b0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	3301      	adds	r3, #1
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4618      	mov	r0, r3
 8005562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005566:	f023 030f 	bic.w	r3, r3, #15
 800556a:	b25a      	sxtb	r2, r3
 800556c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005570:	4313      	orrs	r3, r2
 8005572:	b25b      	sxtb	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	4619      	mov	r1, r3
 8005578:	f7ff fcec 	bl	8004f54 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800557c:	88bb      	ldrh	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d110      	bne.n	80055a4 <socket+0x11c>
	{
	   port = sock_any_port++;
 8005582:	4b46      	ldr	r3, [pc, #280]	@ (800569c <socket+0x214>)
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	b291      	uxth	r1, r2
 800558a:	4a44      	ldr	r2, [pc, #272]	@ (800569c <socket+0x214>)
 800558c:	8011      	strh	r1, [r2, #0]
 800558e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005590:	4b42      	ldr	r3, [pc, #264]	@ (800569c <socket+0x214>)
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <socket+0x11c>
 800559c:	4b3f      	ldr	r3, [pc, #252]	@ (800569c <socket+0x214>)
 800559e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80055a2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	3301      	adds	r3, #1
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055b0:	461a      	mov	r2, r3
 80055b2:	88bb      	ldrh	r3, [r7, #4]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7ff fcc9 	bl	8004f54 <WIZCHIP_WRITE>
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	3301      	adds	r3, #1
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ce:	461a      	mov	r2, r3
 80055d0:	88bb      	ldrh	r3, [r7, #4]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f7ff fcbc 	bl	8004f54 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	3301      	adds	r3, #1
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fcb2 	bl	8004f54 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80055f0:	bf00      	nop
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	3301      	adds	r3, #1
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fc5c 	bl	8004ebc <WIZCHIP_READ>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f3      	bne.n	80055f2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2201      	movs	r2, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	b21b      	sxth	r3, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	b21a      	sxth	r2, r3
 8005618:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <socket+0x218>)
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b21b      	sxth	r3, r3
 800561e:	4013      	ands	r3, r2
 8005620:	b21b      	sxth	r3, r3
 8005622:	b29a      	uxth	r2, r3
 8005624:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <socket+0x218>)
 8005626:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	f003 0201 	and.w	r2, r3, #1
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	b21a      	sxth	r2, r3
 8005636:	4b1a      	ldr	r3, [pc, #104]	@ (80056a0 <socket+0x218>)
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b21b      	sxth	r3, r3
 800563c:	4313      	orrs	r3, r2
 800563e:	b21b      	sxth	r3, r3
 8005640:	b29a      	uxth	r2, r3
 8005642:	4b17      	ldr	r3, [pc, #92]	@ (80056a0 <socket+0x218>)
 8005644:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	2201      	movs	r2, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	b21b      	sxth	r3, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	b21a      	sxth	r2, r3
 8005654:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <socket+0x21c>)
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b21b      	sxth	r3, r3
 800565a:	4013      	ands	r3, r2
 800565c:	b21b      	sxth	r3, r3
 800565e:	b29a      	uxth	r2, r3
 8005660:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <socket+0x21c>)
 8005662:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	4a10      	ldr	r2, [pc, #64]	@ (80056a8 <socket+0x220>)
 8005668:	2100      	movs	r1, #0
 800566a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <socket+0x224>)
 8005672:	2100      	movs	r1, #0
 8005674:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005676:	bf00      	nop
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	3301      	adds	r3, #1
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fc19 	bl	8004ebc <WIZCHIP_READ>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f3      	beq.n	8005678 <socket+0x1f0>
   return (int8_t)sn;
 8005690:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bd90      	pop	{r4, r7, pc}
 800569c:	20000098 	.word	0x20000098
 80056a0:	20000e0c 	.word	0x20000e0c
 80056a4:	20000e0e 	.word	0x20000e0e
 80056a8:	20000e10 	.word	0x20000e10
 80056ac:	20000e20 	.word	0x20000e20

080056b0 <close>:

int8_t close(uint8_t sn)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d902      	bls.n	80056c6 <close+0x16>
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	e055      	b.n	8005772 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	3301      	adds	r3, #1
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056d2:	2110      	movs	r1, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fc3d 	bl	8004f54 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80056da:	bf00      	nop
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	3301      	adds	r3, #1
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff fbe7 	bl	8004ebc <WIZCHIP_READ>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f3      	bne.n	80056dc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	3301      	adds	r3, #1
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005700:	211f      	movs	r1, #31
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fc26 	bl	8004f54 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2201      	movs	r2, #1
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	b21b      	sxth	r3, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	b21a      	sxth	r2, r3
 8005716:	4b19      	ldr	r3, [pc, #100]	@ (800577c <close+0xcc>)
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b21b      	sxth	r3, r3
 800571c:	4013      	ands	r3, r2
 800571e:	b21b      	sxth	r3, r3
 8005720:	b29a      	uxth	r2, r3
 8005722:	4b16      	ldr	r3, [pc, #88]	@ (800577c <close+0xcc>)
 8005724:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	2201      	movs	r2, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	b21b      	sxth	r3, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	b21a      	sxth	r2, r3
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <close+0xd0>)
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b21b      	sxth	r3, r3
 800573a:	4013      	ands	r3, r2
 800573c:	b21b      	sxth	r3, r3
 800573e:	b29a      	uxth	r2, r3
 8005740:	4b0f      	ldr	r3, [pc, #60]	@ (8005780 <close+0xd0>)
 8005742:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	4a0f      	ldr	r2, [pc, #60]	@ (8005784 <close+0xd4>)
 8005748:	2100      	movs	r1, #0
 800574a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	4a0d      	ldr	r2, [pc, #52]	@ (8005788 <close+0xd8>)
 8005752:	2100      	movs	r1, #0
 8005754:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005756:	bf00      	nop
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	3301      	adds	r3, #1
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fba9 	bl	8004ebc <WIZCHIP_READ>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f3      	bne.n	8005758 <close+0xa8>
	return SOCK_OK;
 8005770:	2301      	movs	r3, #1
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000e0c 	.word	0x20000e0c
 8005780:	20000e0e 	.word	0x20000e0e
 8005784:	20000e10 	.word	0x20000e10
 8005788:	20000e20 	.word	0x20000e20

0800578c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	6039      	str	r1, [r7, #0]
 8005796:	71fb      	strb	r3, [r7, #7]
 8005798:	4613      	mov	r3, r2
 800579a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d902      	bls.n	80057a8 <connect+0x1c>
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	e0c6      	b.n	8005936 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3301      	adds	r3, #1
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fb83 	bl	8004ebc <WIZCHIP_READ>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d002      	beq.n	80057c6 <connect+0x3a>
 80057c0:	f06f 0304 	mvn.w	r3, #4
 80057c4:	e0b7      	b.n	8005936 <connect+0x1aa>
   CHECK_SOCKINIT();
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	3301      	adds	r3, #1
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fb72 	bl	8004ebc <WIZCHIP_READ>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b13      	cmp	r3, #19
 80057dc:	d002      	beq.n	80057e4 <connect+0x58>
 80057de:	f06f 0302 	mvn.w	r3, #2
 80057e2:	e0a8      	b.n	8005936 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	3201      	adds	r2, #1
 80057f2:	7812      	ldrb	r2, [r2, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	3202      	adds	r2, #2
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	4413      	add	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	3203      	adds	r2, #3
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	4413      	add	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d002      	beq.n	8005822 <connect+0x96>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <connect+0x9c>
 8005822:	f06f 030b 	mvn.w	r3, #11
 8005826:	e086      	b.n	8005936 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8005828:	88bb      	ldrh	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <connect+0xa8>
 800582e:	f06f 030a 	mvn.w	r3, #10
 8005832:	e080      	b.n	8005936 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3301      	adds	r3, #1
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005840:	2204      	movs	r2, #4
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fc33 	bl	80050b0 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3301      	adds	r3, #1
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005856:	461a      	mov	r2, r3
 8005858:	88bb      	ldrh	r3, [r7, #4]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	b29b      	uxth	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7ff fb76 	bl	8004f54 <WIZCHIP_WRITE>
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3301      	adds	r3, #1
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8005874:	461a      	mov	r2, r3
 8005876:	88bb      	ldrh	r3, [r7, #4]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7ff fb69 	bl	8004f54 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	3301      	adds	r3, #1
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800588e:	2104      	movs	r1, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fb5f 	bl	8004f54 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005896:	bf00      	nop
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	3301      	adds	r3, #1
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fb09 	bl	8004ebc <WIZCHIP_READ>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f3      	bne.n	8005898 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80058b0:	4b23      	ldr	r3, [pc, #140]	@ (8005940 <connect+0x1b4>)
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	fa42 f303 	asr.w	r3, r2, r3
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d02b      	beq.n	800591c <connect+0x190>
 80058c4:	2300      	movs	r3, #0
 80058c6:	e036      	b.n	8005936 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	3301      	adds	r3, #1
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff faf1 	bl	8004ebc <WIZCHIP_READ>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00c      	beq.n	80058fe <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	3301      	adds	r3, #1
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80058f0:	2108      	movs	r1, #8
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fb2e 	bl	8004f54 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80058f8:	f06f 030c 	mvn.w	r3, #12
 80058fc:	e01b      	b.n	8005936 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	3301      	adds	r3, #1
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fad6 	bl	8004ebc <WIZCHIP_READ>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8005916:	f06f 0303 	mvn.w	r3, #3
 800591a:	e00c      	b.n	8005936 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	3301      	adds	r3, #1
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fac7 	bl	8004ebc <WIZCHIP_READ>
 800592e:	4603      	mov	r3, r0
 8005930:	2b17      	cmp	r3, #23
 8005932:	d1c9      	bne.n	80058c8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8005934:	2301      	movs	r3, #1
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000e0c 	.word	0x20000e0c

08005944 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d902      	bls.n	800595a <disconnect+0x16>
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	e062      	b.n	8005a20 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	3301      	adds	r3, #1
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff faaa 	bl	8004ebc <WIZCHIP_READ>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	2b01      	cmp	r3, #1
 8005970:	d002      	beq.n	8005978 <disconnect+0x34>
 8005972:	f06f 0304 	mvn.w	r3, #4
 8005976:	e053      	b.n	8005a20 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	3301      	adds	r3, #1
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005984:	2108      	movs	r1, #8
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fae4 	bl	8004f54 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800598c:	bf00      	nop
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	3301      	adds	r3, #1
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fa8e 	bl	8004ebc <WIZCHIP_READ>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f3      	bne.n	800598e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	2201      	movs	r2, #1
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	b21b      	sxth	r3, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a28 <disconnect+0xe4>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	4013      	ands	r3, r2
 80059bc:	b21b      	sxth	r3, r3
 80059be:	b29a      	uxth	r2, r3
 80059c0:	4b19      	ldr	r3, [pc, #100]	@ (8005a28 <disconnect+0xe4>)
 80059c2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80059c4:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <disconnect+0xe8>)
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	fa42 f303 	asr.w	r3, r2, r3
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d016      	beq.n	8005a06 <disconnect+0xc2>
 80059d8:	2300      	movs	r3, #0
 80059da:	e021      	b.n	8005a20 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	3301      	adds	r3, #1
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fa67 	bl	8004ebc <WIZCHIP_READ>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <disconnect+0xc2>
	   {
	      close(sn);
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fe58 	bl	80056b0 <close>
	      return SOCKERR_TIMEOUT;
 8005a00:	f06f 030c 	mvn.w	r3, #12
 8005a04:	e00c      	b.n	8005a20 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fa52 	bl	8004ebc <WIZCHIP_READ>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1de      	bne.n	80059dc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8005a1e:	2301      	movs	r3, #1
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000e0e 	.word	0x20000e0e
 8005a2c:	20000e0c 	.word	0x20000e0c

08005a30 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	6039      	str	r1, [r7, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d902      	bls.n	8005a54 <send+0x24>
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	e0dd      	b.n	8005c10 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	3301      	adds	r3, #1
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fa2d 	bl	8004ebc <WIZCHIP_READ>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d002      	beq.n	8005a72 <send+0x42>
 8005a6c:	f06f 0304 	mvn.w	r3, #4
 8005a70:	e0ce      	b.n	8005c10 <send+0x1e0>
   CHECK_SOCKDATA();
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <send+0x4e>
 8005a78:	f06f 030d 	mvn.w	r3, #13
 8005a7c:	e0c8      	b.n	8005c10 <send+0x1e0>
   tmp = getSn_SR(sn);
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	3301      	adds	r3, #1
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fa16 	bl	8004ebc <WIZCHIP_READ>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b17      	cmp	r3, #23
 8005a98:	d005      	beq.n	8005aa6 <send+0x76>
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b1c      	cmp	r3, #28
 8005a9e:	d002      	beq.n	8005aa6 <send+0x76>
 8005aa0:	f06f 0306 	mvn.w	r3, #6
 8005aa4:	e0b4      	b.n	8005c10 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8005aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8005c18 <send+0x1e8>)
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	fa42 f303 	asr.w	r3, r2, r3
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d039      	beq.n	8005b2e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3301      	adds	r3, #1
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff f9f8 	bl	8004ebc <WIZCHIP_READ>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d019      	beq.n	8005b12 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005aea:	2110      	movs	r1, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fa31 	bl	8004f54 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	2201      	movs	r2, #1
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	b21b      	sxth	r3, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	b21a      	sxth	r2, r3
 8005b00:	4b45      	ldr	r3, [pc, #276]	@ (8005c18 <send+0x1e8>)
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b21b      	sxth	r3, r3
 8005b06:	4013      	ands	r3, r2
 8005b08:	b21b      	sxth	r3, r3
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	4b42      	ldr	r3, [pc, #264]	@ (8005c18 <send+0x1e8>)
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	e00d      	b.n	8005b2e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <send+0xfa>
      {
         close(sn);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fdc6 	bl	80056b0 <close>
         return SOCKERR_TIMEOUT;
 8005b24:	f06f 030c 	mvn.w	r3, #12
 8005b28:	e072      	b.n	8005c10 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e070      	b.n	8005c10 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	3301      	adds	r3, #1
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff f9be 	bl	8004ebc <WIZCHIP_READ>
 8005b40:	4603      	mov	r3, r0
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005b46:	88ba      	ldrh	r2, [r7, #4]
 8005b48:	89bb      	ldrh	r3, [r7, #12]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d901      	bls.n	8005b52 <send+0x122>
 8005b4e:	89bb      	ldrh	r3, [r7, #12]
 8005b50:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fb0b 	bl	8005170 <getSn_TX_FSR>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	3301      	adds	r3, #1
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff f9a6 	bl	8004ebc <WIZCHIP_READ>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b17      	cmp	r3, #23
 8005b78:	d009      	beq.n	8005b8e <send+0x15e>
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b1c      	cmp	r3, #28
 8005b7e:	d006      	beq.n	8005b8e <send+0x15e>
      {
         close(sn);
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fd94 	bl	80056b0 <close>
         return SOCKERR_SOCKSTATUS;
 8005b88:	f06f 0306 	mvn.w	r3, #6
 8005b8c:	e040      	b.n	8005c10 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005b8e:	4b23      	ldr	r3, [pc, #140]	@ (8005c1c <send+0x1ec>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	fa42 f303 	asr.w	r3, r2, r3
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <send+0x17e>
 8005ba2:	88ba      	ldrh	r2, [r7, #4]
 8005ba4:	89bb      	ldrh	r3, [r7, #12]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d901      	bls.n	8005bae <send+0x17e>
 8005baa:	2300      	movs	r3, #0
 8005bac:	e030      	b.n	8005c10 <send+0x1e0>
      if(len <= freesize) break;
 8005bae:	88ba      	ldrh	r2, [r7, #4]
 8005bb0:	89bb      	ldrh	r3, [r7, #12]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d900      	bls.n	8005bb8 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8005bb6:	e7cc      	b.n	8005b52 <send+0x122>
      if(len <= freesize) break;
 8005bb8:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005bba:	88ba      	ldrh	r2, [r7, #4]
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fb67 	bl	8005294 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	3301      	adds	r3, #1
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff f9bd 	bl	8004f54 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005bda:	bf00      	nop
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	3301      	adds	r3, #1
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff f967 	bl	8004ebc <WIZCHIP_READ>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f3      	bne.n	8005bdc <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	b21a      	sxth	r2, r3
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <send+0x1e8>)
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b21b      	sxth	r3, r3
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	4b03      	ldr	r3, [pc, #12]	@ (8005c18 <send+0x1e8>)
 8005c0c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005c0e:	88bb      	ldrh	r3, [r7, #4]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000e0e 	.word	0x20000e0e
 8005c1c:	20000e0c 	.word	0x20000e0c

08005c20 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	71fb      	strb	r3, [r7, #7]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d902      	bls.n	8005c44 <recv+0x24>
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c42:	e09b      	b.n	8005d7c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	3301      	adds	r3, #1
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f935 	bl	8004ebc <WIZCHIP_READ>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d002      	beq.n	8005c62 <recv+0x42>
 8005c5c:	f06f 0304 	mvn.w	r3, #4
 8005c60:	e08c      	b.n	8005d7c <recv+0x15c>
   CHECK_SOCKDATA();
 8005c62:	88bb      	ldrh	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <recv+0x4e>
 8005c68:	f06f 030d 	mvn.w	r3, #13
 8005c6c:	e086      	b.n	8005d7c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3301      	adds	r3, #1
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff f91e 	bl	8004ebc <WIZCHIP_READ>
 8005c80:	4603      	mov	r3, r0
 8005c82:	029b      	lsls	r3, r3, #10
 8005c84:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005c86:	89ba      	ldrh	r2, [r7, #12]
 8005c88:	88bb      	ldrh	r3, [r7, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d201      	bcs.n	8005c92 <recv+0x72>
 8005c8e:	89bb      	ldrh	r3, [r7, #12]
 8005c90:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fab4 	bl	8005202 <getSn_RX_RSR>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f906 	bl	8004ebc <WIZCHIP_READ>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2b17      	cmp	r3, #23
 8005cb8:	d026      	beq.n	8005d08 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b1c      	cmp	r3, #28
 8005cbe:	d11c      	bne.n	8005cfa <recv+0xda>
            {
               if(recvsize != 0) break;
 8005cc0:	89bb      	ldrh	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d133      	bne.n	8005d2e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fa51 	bl	8005170 <getSn_TX_FSR>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	461c      	mov	r4, r3
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff f8ec 	bl	8004ebc <WIZCHIP_READ>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	029b      	lsls	r3, r3, #10
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d10d      	bne.n	8005d08 <recv+0xe8>
               {
                  close(sn);
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fcde 	bl	80056b0 <close>
                  return SOCKERR_SOCKSTATUS;
 8005cf4:	f06f 0306 	mvn.w	r3, #6
 8005cf8:	e040      	b.n	8005d7c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fcd7 	bl	80056b0 <close>
               return SOCKERR_SOCKSTATUS;
 8005d02:	f06f 0306 	mvn.w	r3, #6
 8005d06:	e039      	b.n	8005d7c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005d08:	4b1e      	ldr	r3, [pc, #120]	@ (8005d84 <recv+0x164>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	fa42 f303 	asr.w	r3, r2, r3
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <recv+0x106>
 8005d1c:	89bb      	ldrh	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <recv+0x106>
 8005d22:	2300      	movs	r3, #0
 8005d24:	e02a      	b.n	8005d7c <recv+0x15c>
         if(recvsize != 0) break;
 8005d26:	89bb      	ldrh	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8005d2c:	e7b1      	b.n	8005c92 <recv+0x72>
               if(recvsize != 0) break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <recv+0x114>
         if(recvsize != 0) break;
 8005d32:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005d34:	89ba      	ldrh	r2, [r7, #12]
 8005d36:	88bb      	ldrh	r3, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d201      	bcs.n	8005d40 <recv+0x120>
 8005d3c:	89bb      	ldrh	r3, [r7, #12]
 8005d3e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005d40:	88ba      	ldrh	r2, [r7, #4]
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fafe 	bl	8005348 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	3301      	adds	r3, #1
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005d58:	2140      	movs	r1, #64	@ 0x40
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f8fa 	bl	8004f54 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005d60:	bf00      	nop
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	3301      	adds	r3, #1
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff f8a4 	bl	8004ebc <WIZCHIP_READ>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f3      	bne.n	8005d62 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd90      	pop	{r4, r7, pc}
 8005d84:	20000e0c 	.word	0x20000e0c

08005d88 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]
 8005d96:	4613      	mov	r3, r2
 8005d98:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d902      	bls.n	8005dae <sendto+0x26>
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dac:	e11a      	b.n	8005fe4 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	3301      	adds	r3, #1
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff f880 	bl	8004ebc <WIZCHIP_READ>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	3b02      	subs	r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d902      	bls.n	8005dce <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005dc8:	f06f 0304 	mvn.w	r3, #4
 8005dcc:	e10a      	b.n	8005fe4 <sendto+0x25c>
         break;
 8005dce:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005dd0:	89bb      	ldrh	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <sendto+0x54>
 8005dd6:	f06f 030d 	mvn.w	r3, #13
 8005dda:	e103      	b.n	8005fe4 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	3201      	adds	r2, #1
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	3202      	adds	r2, #2
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	3203      	adds	r2, #3
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10e      	bne.n	8005e30 <sendto+0xa8>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	3301      	adds	r3, #1
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff f84e 	bl	8004ebc <WIZCHIP_READ>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d002      	beq.n	8005e30 <sendto+0xa8>
 8005e2a:	f06f 030b 	mvn.w	r3, #11
 8005e2e:	e0d9      	b.n	8005fe4 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005e30:	8c3b      	ldrh	r3, [r7, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10e      	bne.n	8005e54 <sendto+0xcc>
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff f83c 	bl	8004ebc <WIZCHIP_READ>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d002      	beq.n	8005e54 <sendto+0xcc>
 8005e4e:	f06f 030a 	mvn.w	r3, #10
 8005e52:	e0c7      	b.n	8005fe4 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3301      	adds	r3, #1
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff f82b 	bl	8004ebc <WIZCHIP_READ>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
 8005e6c:	2b42      	cmp	r3, #66	@ 0x42
 8005e6e:	d008      	beq.n	8005e82 <sendto+0xfa>
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	2b22      	cmp	r3, #34	@ 0x22
 8005e74:	d005      	beq.n	8005e82 <sendto+0xfa>
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b32      	cmp	r3, #50	@ 0x32
 8005e7a:	d002      	beq.n	8005e82 <sendto+0xfa>
 8005e7c:	f06f 0306 	mvn.w	r3, #6
 8005e80:	e0b0      	b.n	8005fe4 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	3301      	adds	r3, #1
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005e8e:	2204      	movs	r2, #4
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff f90c 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	8c3b      	ldrh	r3, [r7, #32]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f7ff f84f 	bl	8004f54 <WIZCHIP_WRITE>
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	3301      	adds	r3, #1
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	8c3b      	ldrh	r3, [r7, #32]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7ff f842 	bl	8004f54 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe ffed 	bl	8004ebc <WIZCHIP_READ>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005ee8:	89ba      	ldrh	r2, [r7, #12]
 8005eea:	8abb      	ldrh	r3, [r7, #20]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d901      	bls.n	8005ef4 <sendto+0x16c>
 8005ef0:	8abb      	ldrh	r3, [r7, #20]
 8005ef2:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff f93a 	bl	8005170 <getSn_TX_FSR>
 8005efc:	4603      	mov	r3, r0
 8005efe:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	3301      	adds	r3, #1
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe ffd5 	bl	8004ebc <WIZCHIP_READ>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <sendto+0x196>
 8005f18:	f06f 0303 	mvn.w	r3, #3
 8005f1c:	e062      	b.n	8005fe4 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005f1e:	4b33      	ldr	r3, [pc, #204]	@ (8005fec <sendto+0x264>)
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	fa42 f303 	asr.w	r3, r2, r3
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <sendto+0x1b6>
 8005f32:	89ba      	ldrh	r2, [r7, #12]
 8005f34:	8abb      	ldrh	r3, [r7, #20]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d901      	bls.n	8005f3e <sendto+0x1b6>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e052      	b.n	8005fe4 <sendto+0x25c>
      if(len <= freesize) break;
 8005f3e:	89ba      	ldrh	r2, [r7, #12]
 8005f40:	8abb      	ldrh	r3, [r7, #20]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d900      	bls.n	8005f48 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8005f46:	e7d5      	b.n	8005ef4 <sendto+0x16c>
      if(len <= freesize) break;
 8005f48:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8005f4a:	89ba      	ldrh	r2, [r7, #12]
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f99f 	bl	8005294 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005f62:	2120      	movs	r1, #32
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fff5 	bl	8004f54 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005f6a:	bf00      	nop
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	3301      	adds	r3, #1
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe ff9f 	bl	8004ebc <WIZCHIP_READ>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f3      	bne.n	8005f6c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	3301      	adds	r3, #1
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe ff93 	bl	8004ebc <WIZCHIP_READ>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00c      	beq.n	8005fc2 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	3301      	adds	r3, #1
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005fb4:	2110      	movs	r1, #16
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe ffcc 	bl	8004f54 <WIZCHIP_WRITE>
         break;
 8005fbc:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005fbe:	89bb      	ldrh	r3, [r7, #12]
 8005fc0:	e010      	b.n	8005fe4 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0db      	beq.n	8005f84 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005fd8:	2108      	movs	r1, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe ffba 	bl	8004f54 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005fe0:	f06f 030c 	mvn.w	r3, #12
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000e0c 	.word	0x20000e0c

08005ff0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607b      	str	r3, [r7, #4]
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	4613      	mov	r3, r2
 8006000:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8006002:	2300      	movs	r3, #0
 8006004:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b08      	cmp	r3, #8
 800600a:	d902      	bls.n	8006012 <recvfrom+0x22>
 800600c:	f04f 33ff 	mov.w	r3, #4294967295
 8006010:	e1d2      	b.n	80063b8 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	3301      	adds	r3, #1
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe ff4e 	bl	8004ebc <WIZCHIP_READ>
 8006020:	4603      	mov	r3, r0
 8006022:	777b      	strb	r3, [r7, #29]
 8006024:	7f7b      	ldrb	r3, [r7, #29]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	3b02      	subs	r3, #2
 800602c:	2b02      	cmp	r3, #2
 800602e:	d902      	bls.n	8006036 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006030:	f06f 0304 	mvn.w	r3, #4
 8006034:	e1c0      	b.n	80063b8 <recvfrom+0x3c8>
         break;
 8006036:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8006038:	89bb      	ldrh	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <recvfrom+0x54>
 800603e:	f06f 030d 	mvn.w	r3, #13
 8006042:	e1b9      	b.n	80063b8 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	4a87      	ldr	r2, [pc, #540]	@ (8006264 <recvfrom+0x274>)
 8006048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d128      	bne.n	80060a2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff f8d5 	bl	8005202 <getSn_RX_RSR>
 8006058:	4603      	mov	r3, r0
 800605a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	3301      	adds	r3, #1
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe ff27 	bl	8004ebc <WIZCHIP_READ>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <recvfrom+0x8a>
 8006074:	f06f 0303 	mvn.w	r3, #3
 8006078:	e19e      	b.n	80063b8 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800607a:	4b7b      	ldr	r3, [pc, #492]	@ (8006268 <recvfrom+0x278>)
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	fa42 f303 	asr.w	r3, r2, r3
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <recvfrom+0xa8>
 800608e:	8bfb      	ldrh	r3, [r7, #30]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <recvfrom+0xa8>
 8006094:	2300      	movs	r3, #0
 8006096:	e18f      	b.n	80063b8 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8006098:	8bfb      	ldrh	r3, [r7, #30]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d100      	bne.n	80060a0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800609e:	e7d7      	b.n	8006050 <recvfrom+0x60>
         if(pack_len != 0) break;
 80060a0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80060a2:	7f7b      	ldrb	r3, [r7, #29]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d078      	beq.n	800619e <recvfrom+0x1ae>
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	f300 8140 	bgt.w	8006332 <recvfrom+0x342>
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d003      	beq.n	80060be <recvfrom+0xce>
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	f000 80da 	beq.w	8006270 <recvfrom+0x280>
 80060bc:	e139      	b.n	8006332 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	4a68      	ldr	r2, [pc, #416]	@ (8006264 <recvfrom+0x274>)
 80060c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d151      	bne.n	800616e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80060ca:	f107 0114 	add.w	r1, r7, #20
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2208      	movs	r2, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff f938 	bl	8005348 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	3301      	adds	r3, #1
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80060e4:	2140      	movs	r1, #64	@ 0x40
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe ff34 	bl	8004f54 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80060ec:	bf00      	nop
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	3301      	adds	r3, #1
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fede 	bl	8004ebc <WIZCHIP_READ>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f3      	bne.n	80060ee <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8006106:	7d3a      	ldrb	r2, [r7, #20]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3301      	adds	r3, #1
 8006110:	7d7a      	ldrb	r2, [r7, #21]
 8006112:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3302      	adds	r3, #2
 8006118:	7dba      	ldrb	r2, [r7, #22]
 800611a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3303      	adds	r3, #3
 8006120:	7dfa      	ldrb	r2, [r7, #23]
 8006122:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8006124:	7e3b      	ldrb	r3, [r7, #24]
 8006126:	461a      	mov	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	b29b      	uxth	r3, r3
 8006134:	7e7a      	ldrb	r2, [r7, #25]
 8006136:	4413      	add	r3, r2
 8006138:	b29a      	uxth	r2, r3
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800613e:	7eba      	ldrb	r2, [r7, #26]
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	4611      	mov	r1, r2
 8006144:	4a47      	ldr	r2, [pc, #284]	@ (8006264 <recvfrom+0x274>)
 8006146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	4a45      	ldr	r2, [pc, #276]	@ (8006264 <recvfrom+0x274>)
 800614e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	b29a      	uxth	r2, r3
 8006156:	7efb      	ldrb	r3, [r7, #27]
 8006158:	4619      	mov	r1, r3
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	440a      	add	r2, r1
 800615e:	b291      	uxth	r1, r2
 8006160:	4a40      	ldr	r2, [pc, #256]	@ (8006264 <recvfrom+0x274>)
 8006162:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	4a40      	ldr	r2, [pc, #256]	@ (800626c <recvfrom+0x27c>)
 800616a:	2180      	movs	r1, #128	@ 0x80
 800616c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	4a3c      	ldr	r2, [pc, #240]	@ (8006264 <recvfrom+0x274>)
 8006172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006176:	89ba      	ldrh	r2, [r7, #12]
 8006178:	429a      	cmp	r2, r3
 800617a:	d202      	bcs.n	8006182 <recvfrom+0x192>
 800617c:	89bb      	ldrh	r3, [r7, #12]
 800617e:	83fb      	strh	r3, [r7, #30]
 8006180:	e004      	b.n	800618c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	4a37      	ldr	r2, [pc, #220]	@ (8006264 <recvfrom+0x274>)
 8006186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800618a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800618c:	8bfb      	ldrh	r3, [r7, #30]
 800618e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006190:	8bfa      	ldrh	r2, [r7, #30]
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff f8d6 	bl	8005348 <wiz_recv_data>
			break;
 800619c:	e0d5      	b.n	800634a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	4a30      	ldr	r2, [pc, #192]	@ (8006264 <recvfrom+0x274>)
 80061a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d145      	bne.n	8006236 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 80061aa:	f107 0114 	add.w	r1, r7, #20
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2202      	movs	r2, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff f8c8 	bl	8005348 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	3301      	adds	r3, #1
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80061c4:	2140      	movs	r1, #64	@ 0x40
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fec4 	bl	8004f54 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80061cc:	bf00      	nop
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	3301      	adds	r3, #1
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fe6e 	bl	8004ebc <WIZCHIP_READ>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f3      	bne.n	80061ce <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80061e6:	7d3a      	ldrb	r2, [r7, #20]
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <recvfrom+0x274>)
 80061ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <recvfrom+0x274>)
 80061f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	7d7a      	ldrb	r2, [r7, #21]
 8006200:	4413      	add	r3, r2
 8006202:	b29a      	uxth	r2, r3
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	3a02      	subs	r2, #2
 8006208:	b291      	uxth	r1, r2
 800620a:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <recvfrom+0x274>)
 800620c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	4a14      	ldr	r2, [pc, #80]	@ (8006264 <recvfrom+0x274>)
 8006214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006218:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 800621c:	4293      	cmp	r3, r2
 800621e:	d906      	bls.n	800622e <recvfrom+0x23e>
   			{
   			   close(sn);
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fa44 	bl	80056b0 <close>
   			   return SOCKFATAL_PACKLEN;
 8006228:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 800622c:	e0c4      	b.n	80063b8 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	4a0e      	ldr	r2, [pc, #56]	@ (800626c <recvfrom+0x27c>)
 8006232:	2180      	movs	r1, #128	@ 0x80
 8006234:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	4a0a      	ldr	r2, [pc, #40]	@ (8006264 <recvfrom+0x274>)
 800623a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623e:	89ba      	ldrh	r2, [r7, #12]
 8006240:	429a      	cmp	r2, r3
 8006242:	d202      	bcs.n	800624a <recvfrom+0x25a>
 8006244:	89bb      	ldrh	r3, [r7, #12]
 8006246:	83fb      	strh	r3, [r7, #30]
 8006248:	e004      	b.n	8006254 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	4a05      	ldr	r2, [pc, #20]	@ (8006264 <recvfrom+0x274>)
 800624e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006252:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8006254:	8bfa      	ldrh	r2, [r7, #30]
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff f874 	bl	8005348 <wiz_recv_data>
		   break;
 8006260:	e073      	b.n	800634a <recvfrom+0x35a>
 8006262:	bf00      	nop
 8006264:	20000e10 	.word	0x20000e10
 8006268:	20000e0c 	.word	0x20000e0c
 800626c:	20000e20 	.word	0x20000e20
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	4a53      	ldr	r2, [pc, #332]	@ (80063c0 <recvfrom+0x3d0>)
 8006274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d144      	bne.n	8006306 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800627c:	f107 0114 	add.w	r1, r7, #20
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2206      	movs	r2, #6
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff f85f 	bl	8005348 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	3301      	adds	r3, #1
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006296:	2140      	movs	r1, #64	@ 0x40
 8006298:	4618      	mov	r0, r3
 800629a:	f7fe fe5b 	bl	8004f54 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800629e:	bf00      	nop
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	3301      	adds	r3, #1
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fe fe05 	bl	8004ebc <WIZCHIP_READ>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f3      	bne.n	80062a0 <recvfrom+0x2b0>
   			addr[0] = head[0];
 80062b8:	7d3a      	ldrb	r2, [r7, #20]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3301      	adds	r3, #1
 80062c2:	7d7a      	ldrb	r2, [r7, #21]
 80062c4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3302      	adds	r3, #2
 80062ca:	7dba      	ldrb	r2, [r7, #22]
 80062cc:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3303      	adds	r3, #3
 80062d2:	7dfa      	ldrb	r2, [r7, #23]
 80062d4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80062d6:	7e3a      	ldrb	r2, [r7, #24]
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	4611      	mov	r1, r2
 80062dc:	4a38      	ldr	r2, [pc, #224]	@ (80063c0 <recvfrom+0x3d0>)
 80062de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	4a36      	ldr	r2, [pc, #216]	@ (80063c0 <recvfrom+0x3d0>)
 80062e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	7e7b      	ldrb	r3, [r7, #25]
 80062f0:	4619      	mov	r1, r3
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	440a      	add	r2, r1
 80062f6:	b291      	uxth	r1, r2
 80062f8:	4a31      	ldr	r2, [pc, #196]	@ (80063c0 <recvfrom+0x3d0>)
 80062fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	4a30      	ldr	r2, [pc, #192]	@ (80063c4 <recvfrom+0x3d4>)
 8006302:	2180      	movs	r1, #128	@ 0x80
 8006304:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	4a2d      	ldr	r2, [pc, #180]	@ (80063c0 <recvfrom+0x3d0>)
 800630a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800630e:	89ba      	ldrh	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d202      	bcs.n	800631a <recvfrom+0x32a>
 8006314:	89bb      	ldrh	r3, [r7, #12]
 8006316:	83fb      	strh	r3, [r7, #30]
 8006318:	e004      	b.n	8006324 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	4a28      	ldr	r2, [pc, #160]	@ (80063c0 <recvfrom+0x3d0>)
 800631e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006322:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006324:	8bfa      	ldrh	r2, [r7, #30]
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff f80c 	bl	8005348 <wiz_recv_data>
			break;
 8006330:	e00b      	b.n	800634a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8006332:	8bfa      	ldrh	r2, [r7, #30]
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f85f 	bl	80053fc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	491f      	ldr	r1, [pc, #124]	@ (80063c0 <recvfrom+0x3d0>)
 8006342:	8bfa      	ldrh	r2, [r7, #30]
 8006344:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8006348:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	3301      	adds	r3, #1
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006356:	2140      	movs	r1, #64	@ 0x40
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fdfb 	bl	8004f54 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800635e:	bf00      	nop
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	3301      	adds	r3, #1
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fda5 	bl	8004ebc <WIZCHIP_READ>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f3      	bne.n	8006360 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4a11      	ldr	r2, [pc, #68]	@ (80063c0 <recvfrom+0x3d0>)
 800637c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	8bfa      	ldrh	r2, [r7, #30]
 8006384:	1a8a      	subs	r2, r1, r2
 8006386:	b291      	uxth	r1, r2
 8006388:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <recvfrom+0x3d0>)
 800638a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	4a0b      	ldr	r2, [pc, #44]	@ (80063c0 <recvfrom+0x3d0>)
 8006392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <recvfrom+0x3d4>)
 800639e:	5cd2      	ldrb	r2, [r2, r3]
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	b2d1      	uxtb	r1, r2
 80063a8:	4a06      	ldr	r2, [pc, #24]	@ (80063c4 <recvfrom+0x3d4>)
 80063aa:	54d1      	strb	r1, [r2, r3]
 80063ac:	e003      	b.n	80063b6 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	4a04      	ldr	r2, [pc, #16]	@ (80063c4 <recvfrom+0x3d4>)
 80063b2:	2100      	movs	r1, #0
 80063b4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80063b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000e10 	.word	0x20000e10
 80063c4:	20000e20 	.word	0x20000e20

080063c8 <SPIReadWrite>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80063d2:	bf00      	nop
 80063d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <SPIReadWrite+0x4c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d1f8      	bne.n	80063d4 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <SPIReadWrite+0x4c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	79fa      	ldrb	r2, [r7, #7]
 80063ea:	701a      	strb	r2, [r3, #0]
	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 80063ec:	bf00      	nop
 80063ee:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <SPIReadWrite+0x4c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d1f8      	bne.n	80063ee <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <SPIReadWrite+0x4c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	b2db      	uxtb	r3, r3

}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	2000014c 	.word	0x2000014c

08006418 <wizchip_select>:

void wizchip_select(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800641c:	2200      	movs	r2, #0
 800641e:	2102      	movs	r1, #2
 8006420:	4802      	ldr	r0, [pc, #8]	@ (800642c <wizchip_select+0x14>)
 8006422:	f001 f9ef 	bl	8007804 <HAL_GPIO_WritePin>
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40020000 	.word	0x40020000

08006430 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8006434:	2201      	movs	r2, #1
 8006436:	2102      	movs	r1, #2
 8006438:	4802      	ldr	r0, [pc, #8]	@ (8006444 <wizchip_deselect+0x14>)
 800643a:	f001 f9e3 	bl	8007804 <HAL_GPIO_WritePin>
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40020000 	.word	0x40020000

08006448 <wizchip_reset_high>:

void wizchip_reset_high(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 800644c:	2201      	movs	r2, #1
 800644e:	2101      	movs	r1, #1
 8006450:	4802      	ldr	r0, [pc, #8]	@ (800645c <wizchip_reset_high+0x14>)
 8006452:	f001 f9d7 	bl	8007804 <HAL_GPIO_WritePin>
}
 8006456:	bf00      	nop
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40020000 	.word	0x40020000

08006460 <wizchip_reset_low>:

void wizchip_reset_low(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_RESET);
 8006464:	2200      	movs	r2, #0
 8006466:	2101      	movs	r1, #1
 8006468:	4802      	ldr	r0, [pc, #8]	@ (8006474 <wizchip_reset_low+0x14>)
 800646a:	f001 f9cb 	bl	8007804 <HAL_GPIO_WritePin>
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40020000 	.word	0x40020000

08006478 <wizchip_read>:

uint8_t wizchip_read()
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 800647e:	2000      	movs	r0, #0
 8006480:	f7ff ffa2 	bl	80063c8 <SPIReadWrite>
 8006484:	4603      	mov	r3, r0
 8006486:	71fb      	strb	r3, [r7, #7]
	return rb;
 8006488:	79fb      	ldrb	r3, [r7, #7]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	4603      	mov	r3, r0
 800649a:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff ff92 	bl	80063c8 <SPIReadWrite>
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	81fb      	strh	r3, [r7, #14]
 80064bc:	e00c      	b.n	80064d8 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 80064be:	2000      	movs	r0, #0
 80064c0:	f7ff ff82 	bl	80063c8 <SPIReadWrite>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	701a      	strb	r2, [r3, #0]
		pBuf++;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3301      	adds	r3, #1
 80064d0:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80064d2:	89fb      	ldrh	r3, [r7, #14]
 80064d4:	3301      	adds	r3, #1
 80064d6:	81fb      	strh	r3, [r7, #14]
 80064d8:	89fa      	ldrh	r2, [r7, #14]
 80064da:	887b      	ldrh	r3, [r7, #2]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d3ee      	bcc.n	80064be <wizchip_readburst+0x12>
	}
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	81fb      	strh	r3, [r7, #14]
 80064fa:	e00a      	b.n	8006512 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff ff61 	bl	80063c8 <SPIReadWrite>
		pBuf++;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3301      	adds	r3, #1
 800650a:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800650c:	89fb      	ldrh	r3, [r7, #14]
 800650e:	3301      	adds	r3, #1
 8006510:	81fb      	strh	r3, [r7, #14]
 8006512:	89fa      	ldrh	r2, [r7, #14]
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3f0      	bcc.n	80064fc <wizchip_writeburst+0x12>
	}
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <W5500IOInit>:

void W5500IOInit()
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
	//printf("Wiznet_io_Initiallized @ main.c\r\n");
}
 8006528:	bf00      	nop
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <w5500_enter_critical>:

void w5500_enter_critical(void)
{
 8006532:	b480      	push	{r7}
 8006534:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006536:	b672      	cpsid	i
}
 8006538:	bf00      	nop
	__disable_irq();
}
 800653a:	bf00      	nop
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <w5500_exit_critical>:

void w5500_exit_critical(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8006548:	b662      	cpsie	i
}
 800654a:	bf00      	nop
	__enable_irq();
}
 800654c:	bf00      	nop
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <W5500Init>:

void W5500Init()
{
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800655e:	4b2b      	ldr	r3, [pc, #172]	@ (800660c <W5500Init+0xb4>)
 8006560:	1d3c      	adds	r4, r7, #4
 8006562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8006568:	f7ff ffdc 	bl	8006524 <W5500IOInit>

	wizchip_deselect();//CS high by default
 800656c:	f7ff ff60 	bl	8006430 <wizchip_deselect>

	//Send a pulse on reset pin
	wizchip_reset_low();
 8006570:	f7ff ff76 	bl	8006460 <wizchip_reset_low>

	tmp = 0xFF;
 8006574:	23ff      	movs	r3, #255	@ 0xff
 8006576:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8006578:	bf00      	nop
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	1e5a      	subs	r2, r3, #1
 800657e:	75fa      	strb	r2, [r7, #23]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1fa      	bne.n	800657a <W5500Init+0x22>
	wizchip_reset_high();
 8006584:	f7ff ff60 	bl	8006448 <wizchip_reset_high>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8006588:	4921      	ldr	r1, [pc, #132]	@ (8006610 <W5500Init+0xb8>)
 800658a:	4822      	ldr	r0, [pc, #136]	@ (8006614 <W5500Init+0xbc>)
 800658c:	f000 f8e8 	bl	8006760 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8006590:	4921      	ldr	r1, [pc, #132]	@ (8006618 <W5500Init+0xc0>)
 8006592:	4822      	ldr	r0, [pc, #136]	@ (800661c <W5500Init+0xc4>)
 8006594:	f000 f90a 	bl	80067ac <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8006598:	4921      	ldr	r1, [pc, #132]	@ (8006620 <W5500Init+0xc8>)
 800659a:	4822      	ldr	r0, [pc, #136]	@ (8006624 <W5500Init+0xcc>)
 800659c:	f000 f932 	bl	8006804 <reg_wizchip_spiburst_cbfunc>
	reg_wizchip_cris_cbfunc(w5500_enter_critical, w5500_exit_critical);
 80065a0:	4921      	ldr	r1, [pc, #132]	@ (8006628 <W5500Init+0xd0>)
 80065a2:	4822      	ldr	r0, [pc, #136]	@ (800662c <W5500Init+0xd4>)
 80065a4:	f000 f8b6 	bl	8006714 <reg_wizchip_cris_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	2001      	movs	r0, #1
 80065ae:	f000 f955 	bl	800685c <ctlwizchip>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d104      	bne.n	80065c4 <W5500Init+0x6c>
		printf("WIZCHIP Initialized Failed.\r\n");
 80065ba:	481d      	ldr	r0, [pc, #116]	@ (8006630 <W5500Init+0xd8>)
 80065bc:	f005 fdd6 	bl	800c16c <puts>
		while (1);
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <W5500Init+0x68>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 80065c4:	481b      	ldr	r0, [pc, #108]	@ (8006634 <W5500Init+0xdc>)
 80065c6:	f005 fdd1 	bl	800c16c <puts>

	//Check if SPI is working
	printf("Auto-detecting Ethernet Chip on SPI Port...");
 80065ca:	481b      	ldr	r0, [pc, #108]	@ (8006638 <W5500Init+0xe0>)
 80065cc:	f005 fd66 	bl	800c09c <iprintf>
      uint8_t Data = WIZCHIP_READ(VERSIONR);
 80065d0:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 80065d4:	f7fe fc72 	bl	8004ebc <WIZCHIP_READ>
 80065d8:	4603      	mov	r3, r0
 80065da:	75bb      	strb	r3, [r7, #22]
      printf("rtData:%d\n",Data);
 80065dc:	7dbb      	ldrb	r3, [r7, #22]
 80065de:	4619      	mov	r1, r3
 80065e0:	4816      	ldr	r0, [pc, #88]	@ (800663c <W5500Init+0xe4>)
 80065e2:	f005 fd5b 	bl	800c09c <iprintf>
	if( Data == 0x04)
 80065e6:	7dbb      	ldrb	r3, [r7, #22]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d103      	bne.n	80065f4 <W5500Init+0x9c>
	{
		printf("W5500 Found on SPI\r\n");
 80065ec:	4814      	ldr	r0, [pc, #80]	@ (8006640 <W5500Init+0xe8>)
 80065ee:	f005 fdbd 	bl	800c16c <puts>
	{
		printf("W5500 NOT Found on SPI\r\n");
		printf("Double Check SPI Cables\r\n");
		while(1);
	}
}
 80065f2:	e007      	b.n	8006604 <W5500Init+0xac>
		printf("W5500 NOT Found on SPI\r\n");
 80065f4:	4813      	ldr	r0, [pc, #76]	@ (8006644 <W5500Init+0xec>)
 80065f6:	f005 fdb9 	bl	800c16c <puts>
		printf("Double Check SPI Cables\r\n");
 80065fa:	4813      	ldr	r0, [pc, #76]	@ (8006648 <W5500Init+0xf0>)
 80065fc:	f005 fdb6 	bl	800c16c <puts>
		while(1);
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <W5500Init+0xa8>
}
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}
 800660a:	bf00      	nop
 800660c:	0800db08 	.word	0x0800db08
 8006610:	08006431 	.word	0x08006431
 8006614:	08006419 	.word	0x08006419
 8006618:	08006493 	.word	0x08006493
 800661c:	08006479 	.word	0x08006479
 8006620:	080064eb 	.word	0x080064eb
 8006624:	080064ad 	.word	0x080064ad
 8006628:	08006545 	.word	0x08006545
 800662c:	08006533 	.word	0x08006533
 8006630:	0800da44 	.word	0x0800da44
 8006634:	0800da64 	.word	0x0800da64
 8006638:	0800da88 	.word	0x0800da88
 800663c:	0800dab4 	.word	0x0800dab4
 8006640:	0800dac0 	.word	0x0800dac0
 8006644:	0800dad4 	.word	0x0800dad4
 8006648:	0800daec 	.word	0x0800daec

0800664c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800665a:	b480      	push	{r7}
 800665c:	af00      	add	r7, sp, #0
 800665e:	bf00      	nop
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8006676:	b480      	push	{r7}
 8006678:	af00      	add	r7, sp, #0
 800667a:	bf00      	nop
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
 80066c0:	2300      	movs	r3, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	71fb      	strb	r3, [r7, #7]
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	807b      	strh	r3, [r7, #2]
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	807b      	strh	r3, [r7, #2]
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <reg_wizchip_cris_cbfunc+0x16>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 800672a:	4b0a      	ldr	r3, [pc, #40]	@ (8006754 <reg_wizchip_cris_cbfunc+0x40>)
 800672c:	4a0a      	ldr	r2, [pc, #40]	@ (8006758 <reg_wizchip_cris_cbfunc+0x44>)
 800672e:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8006730:	4b08      	ldr	r3, [pc, #32]	@ (8006754 <reg_wizchip_cris_cbfunc+0x40>)
 8006732:	4a0a      	ldr	r2, [pc, #40]	@ (800675c <reg_wizchip_cris_cbfunc+0x48>)
 8006734:	611a      	str	r2, [r3, #16]
 8006736:	e006      	b.n	8006746 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8006738:	4a06      	ldr	r2, [pc, #24]	@ (8006754 <reg_wizchip_cris_cbfunc+0x40>)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 800673e:	4a05      	ldr	r2, [pc, #20]	@ (8006754 <reg_wizchip_cris_cbfunc+0x40>)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6113      	str	r3, [r2, #16]
   }
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	2000009c 	.word	0x2000009c
 8006758:	0800664d 	.word	0x0800664d
 800675c:	0800665b 	.word	0x0800665b

08006760 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <reg_wizchip_cs_cbfunc+0x16>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8006776:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <reg_wizchip_cs_cbfunc+0x40>)
 8006778:	4a0a      	ldr	r2, [pc, #40]	@ (80067a4 <reg_wizchip_cs_cbfunc+0x44>)
 800677a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <reg_wizchip_cs_cbfunc+0x40>)
 800677e:	4a0a      	ldr	r2, [pc, #40]	@ (80067a8 <reg_wizchip_cs_cbfunc+0x48>)
 8006780:	619a      	str	r2, [r3, #24]
 8006782:	e006      	b.n	8006792 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8006784:	4a06      	ldr	r2, [pc, #24]	@ (80067a0 <reg_wizchip_cs_cbfunc+0x40>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800678a:	4a05      	ldr	r2, [pc, #20]	@ (80067a0 <reg_wizchip_cs_cbfunc+0x40>)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6193      	str	r3, [r2, #24]
   }
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	2000009c 	.word	0x2000009c
 80067a4:	08006669 	.word	0x08006669
 80067a8:	08006677 	.word	0x08006677

080067ac <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80067b6:	bf00      	nop
 80067b8:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f9      	beq.n	80067b8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <reg_wizchip_spi_cbfunc+0x24>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80067d2:	4a0a      	ldr	r2, [pc, #40]	@ (80067fc <reg_wizchip_spi_cbfunc+0x50>)
 80067d4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80067d6:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80067d8:	4a09      	ldr	r2, [pc, #36]	@ (8006800 <reg_wizchip_spi_cbfunc+0x54>)
 80067da:	621a      	str	r2, [r3, #32]
 80067dc:	e006      	b.n	80067ec <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80067de:	4a06      	ldr	r2, [pc, #24]	@ (80067f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80067e4:	4a04      	ldr	r2, [pc, #16]	@ (80067f8 <reg_wizchip_spi_cbfunc+0x4c>)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6213      	str	r3, [r2, #32]
   }
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	2000009c 	.word	0x2000009c
 80067fc:	080066bd 	.word	0x080066bd
 8006800:	080066cd 	.word	0x080066cd

08006804 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800680e:	bf00      	nop
 8006810:	4b0f      	ldr	r3, [pc, #60]	@ (8006850 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f9      	beq.n	8006810 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <reg_wizchip_spiburst_cbfunc+0x24>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8006828:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800682a:	4a0a      	ldr	r2, [pc, #40]	@ (8006854 <reg_wizchip_spiburst_cbfunc+0x50>)
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800682e:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006830:	4a09      	ldr	r2, [pc, #36]	@ (8006858 <reg_wizchip_spiburst_cbfunc+0x54>)
 8006832:	629a      	str	r2, [r3, #40]	@ 0x28
 8006834:	e006      	b.n	8006844 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8006836:	4a06      	ldr	r2, [pc, #24]	@ (8006850 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800683c:	4a04      	ldr	r2, [pc, #16]	@ (8006850 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	2000009c 	.word	0x2000009c
 8006854:	080066e3 	.word	0x080066e3
 8006858:	080066fb 	.word	0x080066fb

0800685c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	6039      	str	r1, [r7, #0]
 8006866:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	2b0f      	cmp	r3, #15
 8006878:	f200 80c5 	bhi.w	8006a06 <ctlwizchip+0x1aa>
 800687c:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <ctlwizchip+0x28>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068cb 	.word	0x080068cb
 800688c:	080068f7 	.word	0x080068f7
 8006890:	080068eb 	.word	0x080068eb
 8006894:	08006905 	.word	0x08006905
 8006898:	08006911 	.word	0x08006911
 800689c:	0800691f 	.word	0x0800691f
 80068a0:	08006945 	.word	0x08006945
 80068a4:	08006967 	.word	0x08006967
 80068a8:	080069ab 	.word	0x080069ab
 80068ac:	080069b1 	.word	0x080069b1
 80068b0:	080069b9 	.word	0x080069b9
 80068b4:	08006a0d 	.word	0x08006a0d
 80068b8:	080069c1 	.word	0x080069c1
 80068bc:	080069cf 	.word	0x080069cf
 80068c0:	080069eb 	.word	0x080069eb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80068c4:	f000 f8e8 	bl	8006a98 <wizchip_sw_reset>
         break;
 80068c8:	e0a1      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3308      	adds	r3, #8
 80068d8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f925 	bl	8006b30 <wizchip_init>
 80068e6:	4603      	mov	r3, r0
 80068e8:	e092      	b.n	8006a10 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f9aa 	bl	8006c48 <wizchip_clrinterrupt>
         break;
 80068f4:	e08b      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80068f6:	f000 f9db 	bl	8006cb0 <wizchip_getinterrupt>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	801a      	strh	r2, [r3, #0]
         break;
 8006902:	e084      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 f9f6 	bl	8006cfa <wizchip_setinterruptmask>
         break;         
 800690e:	e07e      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8006910:	f000 fa0e 	bl	8006d30 <wizchip_getinterruptmask>
 8006914:	4603      	mov	r3, r0
 8006916:	461a      	mov	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	801a      	strh	r2, [r3, #0]
         break;
 800691c:	e077      	b.n	8006a0e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	b29b      	uxth	r3, r3
 8006926:	b2db      	uxtb	r3, r3
 8006928:	4619      	mov	r1, r3
 800692a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800692e:	f7fe fb11 	bl	8004f54 <WIZCHIP_WRITE>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800693e:	f7fe fb09 	bl	8004f54 <WIZCHIP_WRITE>
         break;
 8006942:	e064      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8006944:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8006948:	f7fe fab8 	bl	8004ebc <WIZCHIP_READ>
 800694c:	4603      	mov	r3, r0
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	b29c      	uxth	r4, r3
 8006952:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8006956:	f7fe fab1 	bl	8004ebc <WIZCHIP_READ>
 800695a:	4603      	mov	r3, r0
 800695c:	4423      	add	r3, r4
 800695e:	b29a      	uxth	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	801a      	strh	r2, [r3, #0]
         break;
 8006964:	e053      	b.n	8006a0e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006966:	4b2c      	ldr	r3, [pc, #176]	@ (8006a18 <ctlwizchip+0x1bc>)
 8006968:	789a      	ldrb	r2, [r3, #2]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	3301      	adds	r3, #1
 8006972:	4a29      	ldr	r2, [pc, #164]	@ (8006a18 <ctlwizchip+0x1bc>)
 8006974:	78d2      	ldrb	r2, [r2, #3]
 8006976:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	3302      	adds	r3, #2
 800697c:	4a26      	ldr	r2, [pc, #152]	@ (8006a18 <ctlwizchip+0x1bc>)
 800697e:	7912      	ldrb	r2, [r2, #4]
 8006980:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	3303      	adds	r3, #3
 8006986:	4a24      	ldr	r2, [pc, #144]	@ (8006a18 <ctlwizchip+0x1bc>)
 8006988:	7952      	ldrb	r2, [r2, #5]
 800698a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	3304      	adds	r3, #4
 8006990:	4a21      	ldr	r2, [pc, #132]	@ (8006a18 <ctlwizchip+0x1bc>)
 8006992:	7992      	ldrb	r2, [r2, #6]
 8006994:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	3305      	adds	r3, #5
 800699a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a18 <ctlwizchip+0x1bc>)
 800699c:	79d2      	ldrb	r2, [r2, #7]
 800699e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	3306      	adds	r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
         break;
 80069a8:	e031      	b.n	8006a0e <ctlwizchip+0x1b2>

   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80069aa:	f000 fa13 	bl	8006dd4 <wizphy_reset>
         break;
 80069ae:	e02e      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f000 fa36 	bl	8006e22 <wizphy_setphyconf>
         break;
 80069b6:	e02a      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80069b8:	6838      	ldr	r0, [r7, #0]
 80069ba:	f000 fa75 	bl	8006ea8 <wizphy_getphyconf>
         break;
 80069be:	e026      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fad9 	bl	8006f7c <wizphy_setphypmode>
 80069ca:	4603      	mov	r3, r0
 80069cc:	e020      	b.n	8006a10 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80069ce:	f000 f9e8 	bl	8006da2 <wizphy_getphypmode>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	2bff      	cmp	r3, #255	@ 0xff
 80069da:	d102      	bne.n	80069e2 <ctlwizchip+0x186>
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
 80069e0:	e016      	b.n	8006a10 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	7dfa      	ldrb	r2, [r7, #23]
 80069e6:	701a      	strb	r2, [r3, #0]
         break;
 80069e8:	e011      	b.n	8006a0e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80069ea:	f000 f9c4 	bl	8006d76 <wizphy_getphylink>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2bff      	cmp	r3, #255	@ 0xff
 80069f6:	d102      	bne.n	80069fe <ctlwizchip+0x1a2>
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295
 80069fc:	e008      	b.n	8006a10 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7dfa      	ldrb	r2, [r7, #23]
 8006a02:	701a      	strb	r2, [r3, #0]
         break;
 8006a04:	e003      	b.n	8006a0e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	e001      	b.n	8006a10 <ctlwizchip+0x1b4>
         break;
 8006a0c:	bf00      	nop
   }
   return 0;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd90      	pop	{r4, r7, pc}
 8006a18:	2000009c 	.word	0x2000009c

08006a1c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	6039      	str	r1, [r7, #0]
 8006a26:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d82c      	bhi.n	8006a88 <ctlnetwork+0x6c>
 8006a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <ctlnetwork+0x18>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a79 	.word	0x08006a79
 8006a48:	08006a81 	.word	0x08006a81
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8006a4c:	6838      	ldr	r0, [r7, #0]
 8006a4e:	f000 fadf 	bl	8007010 <wizchip_setnetinfo>
         break;
 8006a52:	e01c      	b.n	8006a8e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8006a54:	6838      	ldr	r0, [r7, #0]
 8006a56:	f000 fb1b 	bl	8007090 <wizchip_getnetinfo>
         break;
 8006a5a:	e018      	b.n	8006a8e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fb55 	bl	8007110 <wizchip_setnetmode>
 8006a66:	4603      	mov	r3, r0
 8006a68:	e012      	b.n	8006a90 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8006a6a:	f000 fb73 	bl	8007154 <wizchip_getnetmode>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	701a      	strb	r2, [r3, #0]
         break;
 8006a76:	e00a      	b.n	8006a8e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8006a78:	6838      	ldr	r0, [r7, #0]
 8006a7a:	f000 fb73 	bl	8007164 <wizchip_settimeout>
         break;
 8006a7e:	e006      	b.n	8006a8e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006a80:	6838      	ldr	r0, [r7, #0]
 8006a82:	f000 fb90 	bl	80071a6 <wizchip_gettimeout>
         break;
 8006a86:	e002      	b.n	8006a8e <ctlnetwork+0x72>
      default:
         return -1;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	e000      	b.n	8006a90 <ctlnetwork+0x74>
   }
   return 0;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006aa8:	f7fe faa2 	bl	8004ff0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006aac:	f107 0314 	add.w	r3, r7, #20
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006ab8:	f7fe fa9a 	bl	8004ff0 <WIZCHIP_READ_BUF>
 8006abc:	f107 0310 	add.w	r3, r7, #16
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006ac8:	f7fe fa92 	bl	8004ff0 <WIZCHIP_READ_BUF>
 8006acc:	f107 030c 	add.w	r3, r7, #12
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006ad8:	f7fe fa8a 	bl	8004ff0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8006adc:	2180      	movs	r1, #128	@ 0x80
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f7fe fa38 	bl	8004f54 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f7fe f9e9 	bl	8004ebc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	2206      	movs	r2, #6
 8006aee:	4619      	mov	r1, r3
 8006af0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006af4:	f7fe fadc 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8006af8:	f107 0314 	add.w	r3, r7, #20
 8006afc:	2204      	movs	r2, #4
 8006afe:	4619      	mov	r1, r3
 8006b00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006b04:	f7fe fad4 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8006b08:	f107 0310 	add.w	r3, r7, #16
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006b14:	f7fe facc 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006b24:	f7fe fac4 	bl	80050b0 <WIZCHIP_WRITE_BUF>
}
 8006b28:	bf00      	nop
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006b3e:	f7ff ffab 	bl	8006a98 <wizchip_sw_reset>
   if(txsize)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d03b      	beq.n	8006bc0 <wizchip_init+0x90>
   {
      tmp = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	e015      	b.n	8006b7e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	4413      	add	r3, r2
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	4413      	add	r3, r2
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	dd02      	ble.n	8006b72 <wizchip_init+0x42>
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b70:	e066      	b.n	8006c40 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	3301      	adds	r3, #1
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	73fb      	strb	r3, [r7, #15]
 8006b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b82:	2b07      	cmp	r3, #7
 8006b84:	dde5      	ble.n	8006b52 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
 8006b8a:	e015      	b.n	8006bb8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	3301      	adds	r3, #1
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f7fe f9d4 	bl	8004f54 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	73fb      	strb	r3, [r7, #15]
 8006bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	dde5      	ble.n	8006b8c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d03b      	beq.n	8006c3e <wizchip_init+0x10e>
   {
      tmp = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
 8006bce:	e015      	b.n	8006bfc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	4413      	add	r3, r2
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	dd02      	ble.n	8006bf0 <wizchip_init+0xc0>
 8006bea:	f04f 33ff 	mov.w	r3, #4294967295
 8006bee:	e027      	b.n	8006c40 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c00:	2b07      	cmp	r3, #7
 8006c02:	dde5      	ble.n	8006bd0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
 8006c08:	e015      	b.n	8006c36 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	3301      	adds	r3, #1
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4413      	add	r3, r2
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f7fe f995 	bl	8004f54 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	3301      	adds	r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c3a:	2b07      	cmp	r3, #7
 8006c3c:	dde5      	ble.n	8006c0a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	f023 030f 	bic.w	r3, r3, #15
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	4619      	mov	r1, r3
 8006c68:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006c6c:	f7fe f972 	bl	8004f54 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
 8006c74:	e014      	b.n	8006ca0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8006c76:	7bba      	ldrb	r2, [r7, #14]
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	fa42 f303 	asr.w	r3, r2, r3
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <wizchip_clrinterrupt+0x52>
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006c92:	211f      	movs	r1, #31
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe f95d 	bl	8004f54 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b07      	cmp	r3, #7
 8006ca4:	d9e7      	bls.n	8006c76 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006cc2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006cc6:	f7fe f8f9 	bl	8004ebc <WIZCHIP_READ>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f023 030f 	bic.w	r3, r3, #15
 8006cd0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8006cd2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8006cd6:	f7fe f8f1 	bl	8004ebc <WIZCHIP_READ>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006cde:	79bb      	ldrb	r3, [r7, #6]
 8006ce0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8006ce2:	88bb      	ldrh	r3, [r7, #4]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006cf0:	88bb      	ldrh	r3, [r7, #4]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	4603      	mov	r3, r0
 8006d02:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	4619      	mov	r1, r3
 8006d14:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8006d18:	f7fe f91c 	bl	8004f54 <WIZCHIP_WRITE>
   setSIMR(simr);
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006d24:	f7fe f916 	bl	8004f54 <WIZCHIP_WRITE>
#endif   
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8006d42:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8006d46:	f7fe f8b9 	bl	8004ebc <WIZCHIP_READ>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006d4e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006d52:	f7fe f8b3 	bl	8004ebc <WIZCHIP_READ>
 8006d56:	4603      	mov	r3, r0
 8006d58:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006d5a:	79bb      	ldrb	r3, [r7, #6]
 8006d5c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006d5e:	88bb      	ldrh	r3, [r7, #4]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006d6c:	88bb      	ldrh	r3, [r7, #4]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006d80:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006d84:	f7fe f89a 	bl	8004ebc <WIZCHIP_READ>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8006d92:	2301      	movs	r3, #1
 8006d94:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006dac:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006db0:	f7fe f884 	bl	8004ebc <WIZCHIP_READ>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dba:	2b30      	cmp	r3, #48	@ 0x30
 8006dbc:	d102      	bne.n	8006dc4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	71fb      	strb	r3, [r7, #7]
 8006dc2:	e001      	b.n	8006dc8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8006dda:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006dde:	f7fe f86d 	bl	8004ebc <WIZCHIP_READ>
 8006de2:	4603      	mov	r3, r0
 8006de4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dec:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	4619      	mov	r1, r3
 8006df2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006df6:	f7fe f8ad 	bl	8004f54 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8006dfa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006dfe:	f7fe f85d 	bl	8004ebc <WIZCHIP_READ>
 8006e02:	4603      	mov	r3, r0
 8006e04:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e0c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	4619      	mov	r1, r3
 8006e12:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006e16:	f7fe f89d 	bl	8004f54 <WIZCHIP_WRITE>
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d104      	bne.n	8006e40 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3c:	73fb      	strb	r3, [r7, #15]
 8006e3e:	e003      	b.n	8006e48 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e46:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d104      	bne.n	8006e5a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006e56:	73fb      	strb	r3, [r7, #15]
 8006e58:	e019      	b.n	8006e8e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	78db      	ldrb	r3, [r3, #3]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d10d      	bne.n	8006e7e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	789b      	ldrb	r3, [r3, #2]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d104      	bne.n	8006e74 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	f043 0318 	orr.w	r3, r3, #24
 8006e70:	73fb      	strb	r3, [r7, #15]
 8006e72:	e00c      	b.n	8006e8e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	f043 0308 	orr.w	r3, r3, #8
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	e007      	b.n	8006e8e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	789b      	ldrb	r3, [r3, #2]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d103      	bne.n	8006e8e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	f043 0310 	orr.w	r3, r3, #16
 8006e8c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	4619      	mov	r1, r3
 8006e92:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006e96:	f7fe f85d 	bl	8004f54 <WIZCHIP_WRITE>
   wizphy_reset();
 8006e9a:	f7ff ff9b 	bl	8006dd4 <wizphy_reset>
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006eb4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006eb8:	f7fe f800 	bl	8004ebc <WIZCHIP_READ>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	119b      	asrs	r3, r3, #6
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d001      	beq.n	8006ede <wizphy_getphyconf+0x36>
 8006eda:	2b38      	cmp	r3, #56	@ 0x38
 8006edc:	d103      	bne.n	8006ee6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	705a      	strb	r2, [r3, #1]
         break;
 8006ee4:	e003      	b.n	8006eee <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	705a      	strb	r2, [r3, #1]
         break;
 8006eec:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ef4:	3b10      	subs	r3, #16
 8006ef6:	2b10      	cmp	r3, #16
 8006ef8:	bf8c      	ite	hi
 8006efa:	2201      	movhi	r2, #1
 8006efc:	2200      	movls	r2, #0
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	d10f      	bne.n	8006f24 <wizphy_getphyconf+0x7c>
 8006f04:	4a1b      	ldr	r2, [pc, #108]	@ (8006f74 <wizphy_getphyconf+0xcc>)
 8006f06:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf14      	ite	ne
 8006f12:	2301      	movne	r3, #1
 8006f14:	2300      	moveq	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	709a      	strb	r2, [r3, #2]
         break;
 8006f22:	e003      	b.n	8006f2c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	709a      	strb	r2, [r3, #2]
         break;
 8006f2a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f32:	3b08      	subs	r3, #8
 8006f34:	2b18      	cmp	r3, #24
 8006f36:	bf8c      	ite	hi
 8006f38:	2201      	movhi	r2, #1
 8006f3a:	2200      	movls	r2, #0
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	d10f      	bne.n	8006f62 <wizphy_getphyconf+0xba>
 8006f42:	4a0d      	ldr	r2, [pc, #52]	@ (8006f78 <wizphy_getphyconf+0xd0>)
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	70da      	strb	r2, [r3, #3]
         break;
 8006f60:	e003      	b.n	8006f6a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	70da      	strb	r2, [r3, #3]
         break;
 8006f68:	bf00      	nop
   }
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	00010101 	.word	0x00010101
 8006f78:	01010001 	.word	0x01010001

08006f7c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006f8a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006f8e:	f7fd ff95 	bl	8004ebc <WIZCHIP_READ>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <wizphy_setphypmode+0x2a>
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	e030      	b.n	8007008 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006fac:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d104      	bne.n	8006fbe <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	e003      	b.n	8006fc6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006fc4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006fce:	f7fd ffc1 	bl	8004f54 <WIZCHIP_WRITE>
   wizphy_reset();
 8006fd2:	f7ff feff 	bl	8006dd4 <wizphy_reset>
   tmp = getPHYCFGR();
 8006fd6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006fda:	f7fd ff6f 	bl	8004ebc <WIZCHIP_READ>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d106      	bne.n	8006ff6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d008      	beq.n	8007004 <wizphy_setphypmode+0x88>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e008      	b.n	8007008 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <wizphy_setphypmode+0x88>
 8007000:	2300      	movs	r3, #0
 8007002:	e001      	b.n	8007008 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8007004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2206      	movs	r2, #6
 800701c:	4619      	mov	r1, r3
 800701e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8007022:	f7fe f845 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	330e      	adds	r3, #14
 800702a:	2204      	movs	r2, #4
 800702c:	4619      	mov	r1, r3
 800702e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007032:	f7fe f83d 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	330a      	adds	r3, #10
 800703a:	2204      	movs	r2, #4
 800703c:	4619      	mov	r1, r3
 800703e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8007042:	f7fe f835 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3306      	adds	r3, #6
 800704a:	2204      	movs	r2, #4
 800704c:	4619      	mov	r1, r3
 800704e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007052:	f7fe f82d 	bl	80050b0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7c9a      	ldrb	r2, [r3, #18]
 800705a:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <wizchip_setnetinfo+0x78>)
 800705c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7cda      	ldrb	r2, [r3, #19]
 8007062:	4b09      	ldr	r3, [pc, #36]	@ (8007088 <wizchip_setnetinfo+0x78>)
 8007064:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7d1a      	ldrb	r2, [r3, #20]
 800706a:	4b07      	ldr	r3, [pc, #28]	@ (8007088 <wizchip_setnetinfo+0x78>)
 800706c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	7d5a      	ldrb	r2, [r3, #21]
 8007072:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <wizchip_setnetinfo+0x78>)
 8007074:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7d9a      	ldrb	r2, [r3, #22]
 800707a:	4b04      	ldr	r3, [pc, #16]	@ (800708c <wizchip_setnetinfo+0x7c>)
 800707c:	701a      	strb	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000e28 	.word	0x20000e28
 800708c:	20000e2c 	.word	0x20000e2c

08007090 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2206      	movs	r2, #6
 800709c:	4619      	mov	r1, r3
 800709e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80070a2:	f7fd ffa5 	bl	8004ff0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	330e      	adds	r3, #14
 80070aa:	2204      	movs	r2, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80070b2:	f7fd ff9d 	bl	8004ff0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	330a      	adds	r3, #10
 80070ba:	2204      	movs	r2, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80070c2:	f7fd ff95 	bl	8004ff0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3306      	adds	r3, #6
 80070ca:	2204      	movs	r2, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80070d2:	f7fd ff8d 	bl	8004ff0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80070d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007108 <wizchip_getnetinfo+0x78>)
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80070de:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <wizchip_getnetinfo+0x78>)
 80070e0:	785a      	ldrb	r2, [r3, #1]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80070e6:	4b08      	ldr	r3, [pc, #32]	@ (8007108 <wizchip_getnetinfo+0x78>)
 80070e8:	789a      	ldrb	r2, [r3, #2]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80070ee:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <wizchip_getnetinfo+0x78>)
 80070f0:	78da      	ldrb	r2, [r3, #3]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80070f6:	4b05      	ldr	r3, [pc, #20]	@ (800710c <wizchip_getnetinfo+0x7c>)
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	759a      	strb	r2, [r3, #22]
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000e28 	.word	0x20000e28
 800710c:	20000e2c 	.word	0x20000e2c

08007110 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <wizchip_setnetmode+0x1e>
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	e00e      	b.n	800714c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800712e:	2000      	movs	r0, #0
 8007130:	f7fd fec4 	bl	8004ebc <WIZCHIP_READ>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8007138:	7bfa      	ldrb	r2, [r7, #15]
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	4313      	orrs	r3, r2
 800713e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4619      	mov	r1, r3
 8007144:	2000      	movs	r0, #0
 8007146:	f7fd ff05 	bl	8004f54 <WIZCHIP_WRITE>
   return 0;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8007158:	2000      	movs	r0, #0
 800715a:	f7fd feaf 	bl	8004ebc <WIZCHIP_READ>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}

08007164 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8007176:	f7fd feed 	bl	8004f54 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800718a:	f7fd fee3 	bl	8004f54 <WIZCHIP_WRITE>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800719a:	f7fd fedb 	bl	8004f54 <WIZCHIP_WRITE>
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80071a6:	b590      	push	{r4, r7, lr}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80071ae:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80071b2:	f7fd fe83 	bl	8004ebc <WIZCHIP_READ>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80071be:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80071c2:	f7fd fe7b 	bl	8004ebc <WIZCHIP_READ>
 80071c6:	4603      	mov	r3, r0
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b29c      	uxth	r4, r3
 80071cc:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80071d0:	f7fd fe74 	bl	8004ebc <WIZCHIP_READ>
 80071d4:	4603      	mov	r3, r0
 80071d6:	4423      	add	r3, r4
 80071d8:	b29a      	uxth	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	805a      	strh	r2, [r3, #2]
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd90      	pop	{r4, r7, pc}
	...

080071e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80071e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007220 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80071ec:	f7fa f8d0 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80071f0:	480c      	ldr	r0, [pc, #48]	@ (8007224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80071f2:	490d      	ldr	r1, [pc, #52]	@ (8007228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80071f4:	4a0d      	ldr	r2, [pc, #52]	@ (800722c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80071f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80071f8:	e002      	b.n	8007200 <LoopCopyDataInit>

080071fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80071fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80071fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80071fe:	3304      	adds	r3, #4

08007200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007204:	d3f9      	bcc.n	80071fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007206:	4a0a      	ldr	r2, [pc, #40]	@ (8007230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007208:	4c0a      	ldr	r4, [pc, #40]	@ (8007234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800720a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800720c:	e001      	b.n	8007212 <LoopFillZerobss>

0800720e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800720e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007210:	3204      	adds	r2, #4

08007212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007214:	d3fb      	bcc.n	800720e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8007216:	f005 f999 	bl	800c54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800721a:	f7f9 f9b1 	bl	8000580 <main>
  bx  lr    
 800721e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007220:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8007224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007228:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800722c:	0800dbb0 	.word	0x0800dbb0
  ldr r2, =_sbss
 8007230:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8007234:	20005968 	.word	0x20005968

08007238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007238:	e7fe      	b.n	8007238 <ADC_IRQHandler>
	...

0800723c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007240:	4b0e      	ldr	r3, [pc, #56]	@ (800727c <HAL_Init+0x40>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a0d      	ldr	r2, [pc, #52]	@ (800727c <HAL_Init+0x40>)
 8007246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800724a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800724c:	4b0b      	ldr	r3, [pc, #44]	@ (800727c <HAL_Init+0x40>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a0a      	ldr	r2, [pc, #40]	@ (800727c <HAL_Init+0x40>)
 8007252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007258:	4b08      	ldr	r3, [pc, #32]	@ (800727c <HAL_Init+0x40>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a07      	ldr	r2, [pc, #28]	@ (800727c <HAL_Init+0x40>)
 800725e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007264:	2003      	movs	r0, #3
 8007266:	f000 f8fc 	bl	8007462 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800726a:	200f      	movs	r0, #15
 800726c:	f7f9 ff54 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007270:	f7f9 fe96 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023c00 	.word	0x40023c00

08007280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007284:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <HAL_IncTick+0x20>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <HAL_IncTick+0x24>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4413      	add	r3, r2
 8007290:	4a04      	ldr	r2, [pc, #16]	@ (80072a4 <HAL_IncTick+0x24>)
 8007292:	6013      	str	r3, [r2, #0]
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	200000cc 	.word	0x200000cc
 80072a4:	20000e30 	.word	0x20000e30

080072a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return uwTick;
 80072ac:	4b03      	ldr	r3, [pc, #12]	@ (80072bc <HAL_GetTick+0x14>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000e30 	.word	0x20000e30

080072c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072c8:	f7ff ffee 	bl	80072a8 <HAL_GetTick>
 80072cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d005      	beq.n	80072e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072da:	4b0a      	ldr	r3, [pc, #40]	@ (8007304 <HAL_Delay+0x44>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072e6:	bf00      	nop
 80072e8:	f7ff ffde 	bl	80072a8 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d8f7      	bhi.n	80072e8 <HAL_Delay+0x28>
  {
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200000cc 	.word	0x200000cc

08007308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007318:	4b0c      	ldr	r3, [pc, #48]	@ (800734c <__NVIC_SetPriorityGrouping+0x44>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007324:	4013      	ands	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800733a:	4a04      	ldr	r2, [pc, #16]	@ (800734c <__NVIC_SetPriorityGrouping+0x44>)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	60d3      	str	r3, [r2, #12]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007354:	4b04      	ldr	r3, [pc, #16]	@ (8007368 <__NVIC_GetPriorityGrouping+0x18>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	f003 0307 	and.w	r3, r3, #7
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	e000ed00 	.word	0xe000ed00

0800736c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	db0b      	blt.n	8007396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	f003 021f 	and.w	r2, r3, #31
 8007384:	4907      	ldr	r1, [pc, #28]	@ (80073a4 <__NVIC_EnableIRQ+0x38>)
 8007386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	2001      	movs	r0, #1
 800738e:	fa00 f202 	lsl.w	r2, r0, r2
 8007392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	e000e100 	.word	0xe000e100

080073a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	db0a      	blt.n	80073d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	490c      	ldr	r1, [pc, #48]	@ (80073f4 <__NVIC_SetPriority+0x4c>)
 80073c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c6:	0112      	lsls	r2, r2, #4
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	440b      	add	r3, r1
 80073cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073d0:	e00a      	b.n	80073e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	4908      	ldr	r1, [pc, #32]	@ (80073f8 <__NVIC_SetPriority+0x50>)
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	3b04      	subs	r3, #4
 80073e0:	0112      	lsls	r2, r2, #4
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	440b      	add	r3, r1
 80073e6:	761a      	strb	r2, [r3, #24]
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	e000e100 	.word	0xe000e100
 80073f8:	e000ed00 	.word	0xe000ed00

080073fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b089      	sub	sp, #36	@ 0x24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f1c3 0307 	rsb	r3, r3, #7
 8007416:	2b04      	cmp	r3, #4
 8007418:	bf28      	it	cs
 800741a:	2304      	movcs	r3, #4
 800741c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3304      	adds	r3, #4
 8007422:	2b06      	cmp	r3, #6
 8007424:	d902      	bls.n	800742c <NVIC_EncodePriority+0x30>
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	3b03      	subs	r3, #3
 800742a:	e000      	b.n	800742e <NVIC_EncodePriority+0x32>
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43da      	mvns	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	401a      	ands	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007444:	f04f 31ff 	mov.w	r1, #4294967295
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	fa01 f303 	lsl.w	r3, r1, r3
 800744e:	43d9      	mvns	r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007454:	4313      	orrs	r3, r2
         );
}
 8007456:	4618      	mov	r0, r3
 8007458:	3724      	adds	r7, #36	@ 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff ff4c 	bl	8007308 <__NVIC_SetPriorityGrouping>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800748a:	f7ff ff61 	bl	8007350 <__NVIC_GetPriorityGrouping>
 800748e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	6978      	ldr	r0, [r7, #20]
 8007496:	f7ff ffb1 	bl	80073fc <NVIC_EncodePriority>
 800749a:	4602      	mov	r2, r0
 800749c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff ff80 	bl	80073a8 <__NVIC_SetPriority>
}
 80074a8:	bf00      	nop
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff54 	bl	800736c <__NVIC_EnableIRQ>
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b089      	sub	sp, #36	@ 0x24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074da:	2300      	movs	r3, #0
 80074dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074de:	2300      	movs	r3, #0
 80074e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	e159      	b.n	800779c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074e8:	2201      	movs	r2, #1
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4013      	ands	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	429a      	cmp	r2, r3
 8007502:	f040 8148 	bne.w	8007796 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b01      	cmp	r3, #1
 8007510:	d005      	beq.n	800751e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800751a:	2b02      	cmp	r3, #2
 800751c:	d130      	bne.n	8007580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	2203      	movs	r2, #3
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	4313      	orrs	r3, r2
 8007546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007554:	2201      	movs	r2, #1
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	43db      	mvns	r3, r3
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4013      	ands	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f003 0201 	and.w	r2, r3, #1
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	4313      	orrs	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	2b03      	cmp	r3, #3
 800758a:	d017      	beq.n	80075bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	2203      	movs	r2, #3
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	4013      	ands	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d123      	bne.n	8007610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	08da      	lsrs	r2, r3, #3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3208      	adds	r2, #8
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	220f      	movs	r2, #15
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	4313      	orrs	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	08da      	lsrs	r2, r3, #3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3208      	adds	r2, #8
 800760a:	69b9      	ldr	r1, [r7, #24]
 800760c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	2203      	movs	r2, #3
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	43db      	mvns	r3, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4013      	ands	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 0203 	and.w	r2, r3, #3
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	4313      	orrs	r3, r2
 800763c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80a2 	beq.w	8007796 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	4b57      	ldr	r3, [pc, #348]	@ (80077b4 <HAL_GPIO_Init+0x2e8>)
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	4a56      	ldr	r2, [pc, #344]	@ (80077b4 <HAL_GPIO_Init+0x2e8>)
 800765c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007660:	6453      	str	r3, [r2, #68]	@ 0x44
 8007662:	4b54      	ldr	r3, [pc, #336]	@ (80077b4 <HAL_GPIO_Init+0x2e8>)
 8007664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800766e:	4a52      	ldr	r2, [pc, #328]	@ (80077b8 <HAL_GPIO_Init+0x2ec>)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	3302      	adds	r3, #2
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	220f      	movs	r2, #15
 8007686:	fa02 f303 	lsl.w	r3, r2, r3
 800768a:	43db      	mvns	r3, r3
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	4013      	ands	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a49      	ldr	r2, [pc, #292]	@ (80077bc <HAL_GPIO_Init+0x2f0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d019      	beq.n	80076ce <HAL_GPIO_Init+0x202>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a48      	ldr	r2, [pc, #288]	@ (80077c0 <HAL_GPIO_Init+0x2f4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_GPIO_Init+0x1fe>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a47      	ldr	r2, [pc, #284]	@ (80077c4 <HAL_GPIO_Init+0x2f8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00d      	beq.n	80076c6 <HAL_GPIO_Init+0x1fa>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a46      	ldr	r2, [pc, #280]	@ (80077c8 <HAL_GPIO_Init+0x2fc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d007      	beq.n	80076c2 <HAL_GPIO_Init+0x1f6>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a45      	ldr	r2, [pc, #276]	@ (80077cc <HAL_GPIO_Init+0x300>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d101      	bne.n	80076be <HAL_GPIO_Init+0x1f2>
 80076ba:	2304      	movs	r3, #4
 80076bc:	e008      	b.n	80076d0 <HAL_GPIO_Init+0x204>
 80076be:	2307      	movs	r3, #7
 80076c0:	e006      	b.n	80076d0 <HAL_GPIO_Init+0x204>
 80076c2:	2303      	movs	r3, #3
 80076c4:	e004      	b.n	80076d0 <HAL_GPIO_Init+0x204>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e002      	b.n	80076d0 <HAL_GPIO_Init+0x204>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <HAL_GPIO_Init+0x204>
 80076ce:	2300      	movs	r3, #0
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	f002 0203 	and.w	r2, r2, #3
 80076d6:	0092      	lsls	r2, r2, #2
 80076d8:	4093      	lsls	r3, r2
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076e0:	4935      	ldr	r1, [pc, #212]	@ (80077b8 <HAL_GPIO_Init+0x2ec>)
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	089b      	lsrs	r3, r3, #2
 80076e6:	3302      	adds	r3, #2
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076ee:	4b38      	ldr	r3, [pc, #224]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	43db      	mvns	r3, r3
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	4013      	ands	r3, r2
 80076fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007712:	4a2f      	ldr	r2, [pc, #188]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007718:	4b2d      	ldr	r3, [pc, #180]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	43db      	mvns	r3, r3
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	4013      	ands	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800773c:	4a24      	ldr	r2, [pc, #144]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007742:	4b23      	ldr	r3, [pc, #140]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	43db      	mvns	r3, r3
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	4013      	ands	r3, r2
 8007750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007766:	4a1a      	ldr	r2, [pc, #104]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800776c:	4b18      	ldr	r3, [pc, #96]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	43db      	mvns	r3, r3
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	4013      	ands	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007790:	4a0f      	ldr	r2, [pc, #60]	@ (80077d0 <HAL_GPIO_Init+0x304>)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3301      	adds	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b0f      	cmp	r3, #15
 80077a0:	f67f aea2 	bls.w	80074e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	3724      	adds	r7, #36	@ 0x24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40023800 	.word	0x40023800
 80077b8:	40013800 	.word	0x40013800
 80077bc:	40020000 	.word	0x40020000
 80077c0:	40020400 	.word	0x40020400
 80077c4:	40020800 	.word	0x40020800
 80077c8:	40020c00 	.word	0x40020c00
 80077cc:	40021000 	.word	0x40021000
 80077d0:	40013c00 	.word	0x40013c00

080077d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	887b      	ldrh	r3, [r7, #2]
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
 80077f0:	e001      	b.n	80077f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
 8007810:	4613      	mov	r3, r2
 8007812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007814:	787b      	ldrb	r3, [r7, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007820:	e003      	b.n	800782a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007822:	887b      	ldrh	r3, [r7, #2]
 8007824:	041a      	lsls	r2, r3, #16
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	619a      	str	r2, [r3, #24]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e267      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d075      	beq.n	8007942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007856:	4b88      	ldr	r3, [pc, #544]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 030c 	and.w	r3, r3, #12
 800785e:	2b04      	cmp	r3, #4
 8007860:	d00c      	beq.n	800787c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007862:	4b85      	ldr	r3, [pc, #532]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800786a:	2b08      	cmp	r3, #8
 800786c:	d112      	bne.n	8007894 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800786e:	4b82      	ldr	r3, [pc, #520]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007876:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800787a:	d10b      	bne.n	8007894 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800787c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d05b      	beq.n	8007940 <HAL_RCC_OscConfig+0x108>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d157      	bne.n	8007940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e242      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800789c:	d106      	bne.n	80078ac <HAL_RCC_OscConfig+0x74>
 800789e:	4b76      	ldr	r3, [pc, #472]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a75      	ldr	r2, [pc, #468]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e01d      	b.n	80078e8 <HAL_RCC_OscConfig+0xb0>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078b4:	d10c      	bne.n	80078d0 <HAL_RCC_OscConfig+0x98>
 80078b6:	4b70      	ldr	r3, [pc, #448]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a6f      	ldr	r2, [pc, #444]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	4b6d      	ldr	r3, [pc, #436]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6c      	ldr	r2, [pc, #432]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e00b      	b.n	80078e8 <HAL_RCC_OscConfig+0xb0>
 80078d0:	4b69      	ldr	r3, [pc, #420]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a68      	ldr	r2, [pc, #416]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	4b66      	ldr	r3, [pc, #408]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a65      	ldr	r2, [pc, #404]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d013      	beq.n	8007918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f0:	f7ff fcda 	bl	80072a8 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078f8:	f7ff fcd6 	bl	80072a8 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b64      	cmp	r3, #100	@ 0x64
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e207      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800790a:	4b5b      	ldr	r3, [pc, #364]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0xc0>
 8007916:	e014      	b.n	8007942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007918:	f7ff fcc6 	bl	80072a8 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007920:	f7ff fcc2 	bl	80072a8 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b64      	cmp	r3, #100	@ 0x64
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e1f3      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007932:	4b51      	ldr	r3, [pc, #324]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f0      	bne.n	8007920 <HAL_RCC_OscConfig+0xe8>
 800793e:	e000      	b.n	8007942 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d063      	beq.n	8007a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800794e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 030c 	and.w	r3, r3, #12
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800795a:	4b47      	ldr	r3, [pc, #284]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007962:	2b08      	cmp	r3, #8
 8007964:	d11c      	bne.n	80079a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007966:	4b44      	ldr	r3, [pc, #272]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d116      	bne.n	80079a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007972:	4b41      	ldr	r3, [pc, #260]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_RCC_OscConfig+0x152>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d001      	beq.n	800798a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e1c7      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4937      	ldr	r1, [pc, #220]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800799e:	e03a      	b.n	8007a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d020      	beq.n	80079ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079a8:	4b34      	ldr	r3, [pc, #208]	@ (8007a7c <HAL_RCC_OscConfig+0x244>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ae:	f7ff fc7b 	bl	80072a8 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079b6:	f7ff fc77 	bl	80072a8 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e1a8      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d4:	4b28      	ldr	r3, [pc, #160]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4925      	ldr	r1, [pc, #148]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	600b      	str	r3, [r1, #0]
 80079e8:	e015      	b.n	8007a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ea:	4b24      	ldr	r3, [pc, #144]	@ (8007a7c <HAL_RCC_OscConfig+0x244>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7ff fc5a 	bl	80072a8 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f8:	f7ff fc56 	bl	80072a8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e187      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1f0      	bne.n	80079f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d036      	beq.n	8007a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d016      	beq.n	8007a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a2a:	4b15      	ldr	r3, [pc, #84]	@ (8007a80 <HAL_RCC_OscConfig+0x248>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a30:	f7ff fc3a 	bl	80072a8 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a38:	f7ff fc36 	bl	80072a8 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e167      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f0      	beq.n	8007a38 <HAL_RCC_OscConfig+0x200>
 8007a56:	e01b      	b.n	8007a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a58:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <HAL_RCC_OscConfig+0x248>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a5e:	f7ff fc23 	bl	80072a8 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a64:	e00e      	b.n	8007a84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a66:	f7ff fc1f 	bl	80072a8 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d907      	bls.n	8007a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e150      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	42470000 	.word	0x42470000
 8007a80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a84:	4b88      	ldr	r3, [pc, #544]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ea      	bne.n	8007a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8097 	beq.w	8007bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aa2:	4b81      	ldr	r3, [pc, #516]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10f      	bne.n	8007ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	4b7d      	ldr	r3, [pc, #500]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007abe:	4b7a      	ldr	r3, [pc, #488]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ac6:	60bb      	str	r3, [r7, #8]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aca:	2301      	movs	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ace:	4b77      	ldr	r3, [pc, #476]	@ (8007cac <HAL_RCC_OscConfig+0x474>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d118      	bne.n	8007b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ada:	4b74      	ldr	r3, [pc, #464]	@ (8007cac <HAL_RCC_OscConfig+0x474>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a73      	ldr	r2, [pc, #460]	@ (8007cac <HAL_RCC_OscConfig+0x474>)
 8007ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ae6:	f7ff fbdf 	bl	80072a8 <HAL_GetTick>
 8007aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aec:	e008      	b.n	8007b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aee:	f7ff fbdb 	bl	80072a8 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e10c      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b00:	4b6a      	ldr	r3, [pc, #424]	@ (8007cac <HAL_RCC_OscConfig+0x474>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0f0      	beq.n	8007aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d106      	bne.n	8007b22 <HAL_RCC_OscConfig+0x2ea>
 8007b14:	4b64      	ldr	r3, [pc, #400]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b18:	4a63      	ldr	r2, [pc, #396]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b20:	e01c      	b.n	8007b5c <HAL_RCC_OscConfig+0x324>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d10c      	bne.n	8007b44 <HAL_RCC_OscConfig+0x30c>
 8007b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	4a5e      	ldr	r2, [pc, #376]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b30:	f043 0304 	orr.w	r3, r3, #4
 8007b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b36:	4b5c      	ldr	r3, [pc, #368]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b42:	e00b      	b.n	8007b5c <HAL_RCC_OscConfig+0x324>
 8007b44:	4b58      	ldr	r3, [pc, #352]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b48:	4a57      	ldr	r2, [pc, #348]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b4a:	f023 0301 	bic.w	r3, r3, #1
 8007b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b50:	4b55      	ldr	r3, [pc, #340]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b54:	4a54      	ldr	r2, [pc, #336]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b56:	f023 0304 	bic.w	r3, r3, #4
 8007b5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d015      	beq.n	8007b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b64:	f7ff fba0 	bl	80072a8 <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6a:	e00a      	b.n	8007b82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6c:	f7ff fb9c 	bl	80072a8 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e0cb      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b82:	4b49      	ldr	r3, [pc, #292]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ee      	beq.n	8007b6c <HAL_RCC_OscConfig+0x334>
 8007b8e:	e014      	b.n	8007bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b90:	f7ff fb8a 	bl	80072a8 <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b96:	e00a      	b.n	8007bae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b98:	f7ff fb86 	bl	80072a8 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e0b5      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bae:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1ee      	bne.n	8007b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d105      	bne.n	8007bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc0:	4b39      	ldr	r3, [pc, #228]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	4a38      	ldr	r2, [pc, #224]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80a1 	beq.w	8007d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bd6:	4b34      	ldr	r3, [pc, #208]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 030c 	and.w	r3, r3, #12
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d05c      	beq.n	8007c9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d141      	bne.n	8007c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bea:	4b31      	ldr	r3, [pc, #196]	@ (8007cb0 <HAL_RCC_OscConfig+0x478>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf0:	f7ff fb5a 	bl	80072a8 <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7ff fb56 	bl	80072a8 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e087      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0a:	4b27      	ldr	r3, [pc, #156]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69da      	ldr	r2, [r3, #28]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c24:	019b      	lsls	r3, r3, #6
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	061b      	lsls	r3, r3, #24
 8007c3a:	491b      	ldr	r1, [pc, #108]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c40:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb0 <HAL_RCC_OscConfig+0x478>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c46:	f7ff fb2f 	bl	80072a8 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4e:	f7ff fb2b 	bl	80072a8 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e05c      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c60:	4b11      	ldr	r3, [pc, #68]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCC_OscConfig+0x416>
 8007c6c:	e054      	b.n	8007d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c6e:	4b10      	ldr	r3, [pc, #64]	@ (8007cb0 <HAL_RCC_OscConfig+0x478>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c74:	f7ff fb18 	bl	80072a8 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c7c:	f7ff fb14 	bl	80072a8 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e045      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f0      	bne.n	8007c7c <HAL_RCC_OscConfig+0x444>
 8007c9a:	e03d      	b.n	8007d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d107      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e038      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
 8007ca8:	40023800 	.word	0x40023800
 8007cac:	40007000 	.word	0x40007000
 8007cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d24 <HAL_RCC_OscConfig+0x4ec>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d028      	beq.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d121      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d11a      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d111      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d107      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d001      	beq.n	8007d18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40023800 	.word	0x40023800

08007d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e0cc      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d3c:	4b68      	ldr	r3, [pc, #416]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d90c      	bls.n	8007d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4a:	4b65      	ldr	r3, [pc, #404]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d52:	4b63      	ldr	r3, [pc, #396]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0b8      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d020      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d7c:	4b59      	ldr	r3, [pc, #356]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a58      	ldr	r2, [pc, #352]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d94:	4b53      	ldr	r3, [pc, #332]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4a52      	ldr	r2, [pc, #328]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da0:	4b50      	ldr	r3, [pc, #320]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	494d      	ldr	r1, [pc, #308]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d044      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc6:	4b47      	ldr	r3, [pc, #284]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d119      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e07f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d003      	beq.n	8007de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d107      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e06f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e067      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e06:	4b37      	ldr	r3, [pc, #220]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f023 0203 	bic.w	r2, r3, #3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4934      	ldr	r1, [pc, #208]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e18:	f7ff fa46 	bl	80072a8 <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1e:	e00a      	b.n	8007e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e20:	f7ff fa42 	bl	80072a8 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e04f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e36:	4b2b      	ldr	r3, [pc, #172]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 020c 	and.w	r2, r3, #12
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d1eb      	bne.n	8007e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e48:	4b25      	ldr	r3, [pc, #148]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d20c      	bcs.n	8007e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e56:	4b22      	ldr	r3, [pc, #136]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e5e:	4b20      	ldr	r3, [pc, #128]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e032      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e7c:	4b19      	ldr	r3, [pc, #100]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4916      	ldr	r1, [pc, #88]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	490e      	ldr	r1, [pc, #56]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eae:	f000 f821 	bl	8007ef4 <HAL_RCC_GetSysClockFreq>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	091b      	lsrs	r3, r3, #4
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	490a      	ldr	r1, [pc, #40]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8007ec0:	5ccb      	ldrb	r3, [r1, r3]
 8007ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec6:	4a09      	ldr	r2, [pc, #36]	@ (8007eec <HAL_RCC_ClockConfig+0x1c4>)
 8007ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007eca:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7f9 f922 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40023c00 	.word	0x40023c00
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	0800db54 	.word	0x0800db54
 8007eec:	20000078 	.word	0x20000078
 8007ef0:	200000c8 	.word	0x200000c8

08007ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ef8:	b090      	sub	sp, #64	@ 0x40
 8007efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f0c:	4b59      	ldr	r3, [pc, #356]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 030c 	and.w	r3, r3, #12
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d00d      	beq.n	8007f34 <HAL_RCC_GetSysClockFreq+0x40>
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	f200 80a1 	bhi.w	8008060 <HAL_RCC_GetSysClockFreq+0x16c>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_RCC_GetSysClockFreq+0x34>
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d003      	beq.n	8007f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007f26:	e09b      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f28:	4b53      	ldr	r3, [pc, #332]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f2c:	e09b      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f2e:	4b53      	ldr	r3, [pc, #332]	@ (800807c <HAL_RCC_GetSysClockFreq+0x188>)
 8007f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f32:	e098      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f34:	4b4f      	ldr	r3, [pc, #316]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d028      	beq.n	8007f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	099b      	lsrs	r3, r3, #6
 8007f50:	2200      	movs	r2, #0
 8007f52:	623b      	str	r3, [r7, #32]
 8007f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4b47      	ldr	r3, [pc, #284]	@ (800807c <HAL_RCC_GetSysClockFreq+0x188>)
 8007f60:	fb03 f201 	mul.w	r2, r3, r1
 8007f64:	2300      	movs	r3, #0
 8007f66:	fb00 f303 	mul.w	r3, r0, r3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	4a43      	ldr	r2, [pc, #268]	@ (800807c <HAL_RCC_GetSysClockFreq+0x188>)
 8007f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8007f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f74:	460a      	mov	r2, r1
 8007f76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7a:	4413      	add	r3, r2
 8007f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f80:	2200      	movs	r2, #0
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f8e:	f7f8 f97f 	bl	8000290 <__aeabi_uldivmod>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4613      	mov	r3, r2
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f9a:	e053      	b.n	8008044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f9c:	4b35      	ldr	r3, [pc, #212]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	099b      	lsrs	r3, r3, #6
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	617a      	str	r2, [r7, #20]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007fae:	f04f 0b00 	mov.w	fp, #0
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	465b      	mov	r3, fp
 8007fb6:	f04f 0000 	mov.w	r0, #0
 8007fba:	f04f 0100 	mov.w	r1, #0
 8007fbe:	0159      	lsls	r1, r3, #5
 8007fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fc4:	0150      	lsls	r0, r2, #5
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	ebb2 080a 	subs.w	r8, r2, sl
 8007fce:	eb63 090b 	sbc.w	r9, r3, fp
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8007fea:	eb63 0509 	sbc.w	r5, r3, r9
 8007fee:	f04f 0200 	mov.w	r2, #0
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	00eb      	lsls	r3, r5, #3
 8007ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ffc:	00e2      	lsls	r2, r4, #3
 8007ffe:	4614      	mov	r4, r2
 8008000:	461d      	mov	r5, r3
 8008002:	eb14 030a 	adds.w	r3, r4, sl
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	eb45 030b 	adc.w	r3, r5, fp
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800801a:	4629      	mov	r1, r5
 800801c:	028b      	lsls	r3, r1, #10
 800801e:	4621      	mov	r1, r4
 8008020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008024:	4621      	mov	r1, r4
 8008026:	028a      	lsls	r2, r1, #10
 8008028:	4610      	mov	r0, r2
 800802a:	4619      	mov	r1, r3
 800802c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802e:	2200      	movs	r2, #0
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	60fa      	str	r2, [r7, #12]
 8008034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008038:	f7f8 f92a 	bl	8000290 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4613      	mov	r3, r2
 8008042:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008044:	4b0b      	ldr	r3, [pc, #44]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x180>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	3301      	adds	r3, #1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800805e:	e002      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <HAL_RCC_GetSysClockFreq+0x184>)
 8008062:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008068:	4618      	mov	r0, r3
 800806a:	3740      	adds	r7, #64	@ 0x40
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008072:	bf00      	nop
 8008074:	40023800 	.word	0x40023800
 8008078:	00f42400 	.word	0x00f42400
 800807c:	017d7840 	.word	0x017d7840

08008080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008084:	4b03      	ldr	r3, [pc, #12]	@ (8008094 <HAL_RCC_GetHCLKFreq+0x14>)
 8008086:	681b      	ldr	r3, [r3, #0]
}
 8008088:	4618      	mov	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000078 	.word	0x20000078

08008098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800809c:	f7ff fff0 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0a9b      	lsrs	r3, r3, #10
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4903      	ldr	r1, [pc, #12]	@ (80080bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ae:	5ccb      	ldrb	r3, [r1, r3]
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40023800 	.word	0x40023800
 80080bc:	0800db64 	.word	0x0800db64

080080c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080c4:	f7ff ffdc 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	0b5b      	lsrs	r3, r3, #13
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	4903      	ldr	r1, [pc, #12]	@ (80080e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d6:	5ccb      	ldrb	r3, [r1, r3]
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40023800 	.word	0x40023800
 80080e4:	0800db64 	.word	0x0800db64

080080e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	220f      	movs	r2, #15
 80080f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080f8:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <HAL_RCC_GetClockConfig+0x5c>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0203 	and.w	r2, r3, #3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008104:	4b0f      	ldr	r3, [pc, #60]	@ (8008144 <HAL_RCC_GetClockConfig+0x5c>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008110:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <HAL_RCC_GetClockConfig+0x5c>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <HAL_RCC_GetClockConfig+0x5c>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	08db      	lsrs	r3, r3, #3
 8008122:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800812a:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <HAL_RCC_GetClockConfig+0x60>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0207 	and.w	r2, r3, #7
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	40023800 	.word	0x40023800
 8008148:	40023c00 	.word	0x40023c00

0800814c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e07b      	b.n	8008256 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008162:	2b00      	cmp	r3, #0
 8008164:	d108      	bne.n	8008178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800816e:	d009      	beq.n	8008184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	61da      	str	r2, [r3, #28]
 8008176:	e005      	b.n	8008184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7f8 ff2a 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008208:	ea42 0103 	orr.w	r1, r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008210:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	0c1b      	lsrs	r3, r3, #16
 8008222:	f003 0104 	and.w	r1, r3, #4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	f003 0210 	and.w	r2, r3, #16
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e041      	b.n	80082f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f839 	bl	80082fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3304      	adds	r3, #4
 800829a:	4619      	mov	r1, r3
 800829c:	4610      	mov	r0, r2
 800829e:	f000 f9b1 	bl	8008604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	d001      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e044      	b.n	80083b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a1e      	ldr	r2, [pc, #120]	@ (80083c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x6c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008352:	d013      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x6c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1a      	ldr	r2, [pc, #104]	@ (80083c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x6c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a19      	ldr	r2, [pc, #100]	@ (80083c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x6c>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a17      	ldr	r2, [pc, #92]	@ (80083cc <HAL_TIM_Base_Start_IT+0xbc>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x6c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a16      	ldr	r2, [pc, #88]	@ (80083d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d111      	bne.n	80083a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b06      	cmp	r3, #6
 800838c:	d010      	beq.n	80083b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0201 	orr.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839e:	e007      	b.n	80083b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	40000c00 	.word	0x40000c00
 80083d0:	40014000 	.word	0x40014000

080083d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d020      	beq.n	8008438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01b      	beq.n	8008438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f06f 0202 	mvn.w	r2, #2
 8008408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8d2 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 8008424:	e005      	b.n	8008432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8c4 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f8d5 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	d020      	beq.n	8008484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0204 	mvn.w	r2, #4
 8008454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f8ac 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 8008470:	e005      	b.n	800847e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f89e 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8af 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 0308 	and.w	r3, r3, #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d020      	beq.n	80084d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01b      	beq.n	80084d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0208 	mvn.w	r2, #8
 80084a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2204      	movs	r2, #4
 80084a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f886 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 80084bc:	e005      	b.n	80084ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f878 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f889 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d020      	beq.n	800851c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0210 	mvn.w	r2, #16
 80084ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2208      	movs	r2, #8
 80084f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f860 	bl	80085c8 <HAL_TIM_IC_CaptureCallback>
 8008508:	e005      	b.n	8008516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f852 	bl	80085b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f863 	bl	80085dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00c      	beq.n	8008540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d007      	beq.n	8008540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f06f 0201 	mvn.w	r2, #1
 8008538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7f8 fd02 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00c      	beq.n	8008564 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800855c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f8e6 	bl	8008730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d007      	beq.n	8008588 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f834 	bl	80085f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00c      	beq.n	80085ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0220 	mvn.w	r2, #32
 80085a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8b8 	bl	800871c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a3a      	ldr	r2, [pc, #232]	@ (8008700 <TIM_Base_SetConfig+0xfc>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d00f      	beq.n	800863c <TIM_Base_SetConfig+0x38>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008622:	d00b      	beq.n	800863c <TIM_Base_SetConfig+0x38>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a37      	ldr	r2, [pc, #220]	@ (8008704 <TIM_Base_SetConfig+0x100>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d007      	beq.n	800863c <TIM_Base_SetConfig+0x38>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a36      	ldr	r2, [pc, #216]	@ (8008708 <TIM_Base_SetConfig+0x104>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d003      	beq.n	800863c <TIM_Base_SetConfig+0x38>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a35      	ldr	r2, [pc, #212]	@ (800870c <TIM_Base_SetConfig+0x108>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d108      	bne.n	800864e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2b      	ldr	r2, [pc, #172]	@ (8008700 <TIM_Base_SetConfig+0xfc>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01b      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865c:	d017      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a28      	ldr	r2, [pc, #160]	@ (8008704 <TIM_Base_SetConfig+0x100>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a27      	ldr	r2, [pc, #156]	@ (8008708 <TIM_Base_SetConfig+0x104>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00f      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a26      	ldr	r2, [pc, #152]	@ (800870c <TIM_Base_SetConfig+0x108>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00b      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a25      	ldr	r2, [pc, #148]	@ (8008710 <TIM_Base_SetConfig+0x10c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d007      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a24      	ldr	r2, [pc, #144]	@ (8008714 <TIM_Base_SetConfig+0x110>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d003      	beq.n	800868e <TIM_Base_SetConfig+0x8a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a23      	ldr	r2, [pc, #140]	@ (8008718 <TIM_Base_SetConfig+0x114>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d108      	bne.n	80086a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008700 <TIM_Base_SetConfig+0xfc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d103      	bne.n	80086d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d105      	bne.n	80086f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f023 0201 	bic.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	611a      	str	r2, [r3, #16]
  }
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40014000 	.word	0x40014000
 8008714:	40014400 	.word	0x40014400
 8008718:	40014800 	.word	0x40014800

0800871c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e042      	b.n	80087dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7f8 fc8c 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2224      	movs	r2, #36	@ 0x24
 8008774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f973 	bl	8008a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800879c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695a      	ldr	r2, [r3, #20]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08a      	sub	sp, #40	@ 0x28
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	4613      	mov	r3, r2
 80087f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b20      	cmp	r3, #32
 8008802:	d175      	bne.n	80088f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_UART_Transmit+0x2c>
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e06e      	b.n	80088f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2221      	movs	r2, #33	@ 0x21
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008822:	f7fe fd41 	bl	80072a8 <HAL_GetTick>
 8008826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800883c:	d108      	bne.n	8008850 <HAL_UART_Transmit+0x6c>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d104      	bne.n	8008850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	e003      	b.n	8008858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008858:	e02e      	b.n	80088b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2200      	movs	r2, #0
 8008862:	2180      	movs	r1, #128	@ 0x80
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 f848 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e03a      	b.n	80088f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10b      	bne.n	800889a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	3302      	adds	r3, #2
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e007      	b.n	80088aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1cb      	bne.n	800885a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2140      	movs	r1, #64	@ 0x40
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f814 	bl	80088fa <UART_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e006      	b.n	80088f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	e000      	b.n	80088f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80088f0:	2302      	movs	r3, #2
  }
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800890a:	e03b      	b.n	8008984 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d037      	beq.n	8008984 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008914:	f7fe fcc8 	bl	80072a8 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	6a3a      	ldr	r2, [r7, #32]
 8008920:	429a      	cmp	r2, r3
 8008922:	d302      	bcc.n	800892a <UART_WaitOnFlagUntilTimeout+0x30>
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e03a      	b.n	80089a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d023      	beq.n	8008984 <UART_WaitOnFlagUntilTimeout+0x8a>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b80      	cmp	r3, #128	@ 0x80
 8008940:	d020      	beq.n	8008984 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b40      	cmp	r3, #64	@ 0x40
 8008946:	d01d      	beq.n	8008984 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b08      	cmp	r3, #8
 8008954:	d116      	bne.n	8008984 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008956:	2300      	movs	r3, #0
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f81d 	bl	80089ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2208      	movs	r2, #8
 8008976:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e00f      	b.n	80089a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4013      	ands	r3, r2
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	429a      	cmp	r2, r3
 8008992:	bf0c      	ite	eq
 8008994:	2301      	moveq	r3, #1
 8008996:	2300      	movne	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d0b4      	beq.n	800890c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b095      	sub	sp, #84	@ 0x54
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e5      	bne.n	80089b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3314      	adds	r3, #20
 80089ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3314      	adds	r3, #20
 8008a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d119      	bne.n	8008a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	330c      	adds	r3, #12
 8008a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 0310 	bic.w	r3, r3, #16
 8008a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a44:	61ba      	str	r2, [r7, #24]
 8008a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6979      	ldr	r1, [r7, #20]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	613b      	str	r3, [r7, #16]
   return(result);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e5      	bne.n	8008a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a66:	bf00      	nop
 8008a68:	3754      	adds	r7, #84	@ 0x54
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a78:	b0c0      	sub	sp, #256	@ 0x100
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a90:	68d9      	ldr	r1, [r3, #12]
 8008a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	ea40 0301 	orr.w	r3, r0, r1
 8008a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008acc:	f021 010c 	bic.w	r1, r1, #12
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ada:	430b      	orrs	r3, r1
 8008adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aee:	6999      	ldr	r1, [r3, #24]
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	ea40 0301 	orr.w	r3, r0, r1
 8008afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	4b8f      	ldr	r3, [pc, #572]	@ (8008d40 <UART_SetConfig+0x2cc>)
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d005      	beq.n	8008b14 <UART_SetConfig+0xa0>
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8008d44 <UART_SetConfig+0x2d0>)
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d104      	bne.n	8008b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b14:	f7ff fad4 	bl	80080c0 <HAL_RCC_GetPCLK2Freq>
 8008b18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b1c:	e003      	b.n	8008b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b1e:	f7ff fabb 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 8008b22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b30:	f040 810c 	bne.w	8008d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b46:	4622      	mov	r2, r4
 8008b48:	462b      	mov	r3, r5
 8008b4a:	1891      	adds	r1, r2, r2
 8008b4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b4e:	415b      	adcs	r3, r3
 8008b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b56:	4621      	mov	r1, r4
 8008b58:	eb12 0801 	adds.w	r8, r2, r1
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	eb43 0901 	adc.w	r9, r3, r1
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b76:	4690      	mov	r8, r2
 8008b78:	4699      	mov	r9, r3
 8008b7a:	4623      	mov	r3, r4
 8008b7c:	eb18 0303 	adds.w	r3, r8, r3
 8008b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b84:	462b      	mov	r3, r5
 8008b86:	eb49 0303 	adc.w	r3, r9, r3
 8008b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	18db      	adds	r3, r3, r3
 8008ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ba8:	4613      	mov	r3, r2
 8008baa:	eb42 0303 	adc.w	r3, r2, r3
 8008bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008bb8:	f7f7 fb6a 	bl	8000290 <__aeabi_uldivmod>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4b61      	ldr	r3, [pc, #388]	@ (8008d48 <UART_SetConfig+0x2d4>)
 8008bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	011c      	lsls	r4, r3, #4
 8008bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	1891      	adds	r1, r2, r2
 8008be2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008be4:	415b      	adcs	r3, r3
 8008be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008bec:	4641      	mov	r1, r8
 8008bee:	eb12 0a01 	adds.w	sl, r2, r1
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c0c:	4692      	mov	sl, r2
 8008c0e:	469b      	mov	fp, r3
 8008c10:	4643      	mov	r3, r8
 8008c12:	eb1a 0303 	adds.w	r3, sl, r3
 8008c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8008c20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	18db      	adds	r3, r3, r3
 8008c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c3e:	4613      	mov	r3, r2
 8008c40:	eb42 0303 	adc.w	r3, r2, r3
 8008c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c4e:	f7f7 fb1f 	bl	8000290 <__aeabi_uldivmod>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4611      	mov	r1, r2
 8008c58:	4b3b      	ldr	r3, [pc, #236]	@ (8008d48 <UART_SetConfig+0x2d4>)
 8008c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	2264      	movs	r2, #100	@ 0x64
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	1acb      	subs	r3, r1, r3
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c6e:	4b36      	ldr	r3, [pc, #216]	@ (8008d48 <UART_SetConfig+0x2d4>)
 8008c70:	fba3 2302 	umull	r2, r3, r3, r2
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c7c:	441c      	add	r4, r3
 8008c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c90:	4642      	mov	r2, r8
 8008c92:	464b      	mov	r3, r9
 8008c94:	1891      	adds	r1, r2, r2
 8008c96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c98:	415b      	adcs	r3, r3
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	1851      	adds	r1, r2, r1
 8008ca4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	414b      	adcs	r3, r1
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008cb8:	4659      	mov	r1, fp
 8008cba:	00cb      	lsls	r3, r1, #3
 8008cbc:	4651      	mov	r1, sl
 8008cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cc2:	4651      	mov	r1, sl
 8008cc4:	00ca      	lsls	r2, r1, #3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4642      	mov	r2, r8
 8008cce:	189b      	adds	r3, r3, r2
 8008cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	460a      	mov	r2, r1
 8008cd8:	eb42 0303 	adc.w	r3, r2, r3
 8008cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	18db      	adds	r3, r3, r3
 8008cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	eb42 0303 	adc.w	r3, r2, r3
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d0a:	f7f7 fac1 	bl	8000290 <__aeabi_uldivmod>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <UART_SetConfig+0x2d4>)
 8008d14:	fba3 1302 	umull	r1, r3, r3, r2
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	2164      	movs	r1, #100	@ 0x64
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	3332      	adds	r3, #50	@ 0x32
 8008d26:	4a08      	ldr	r2, [pc, #32]	@ (8008d48 <UART_SetConfig+0x2d4>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	f003 0207 	and.w	r2, r3, #7
 8008d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4422      	add	r2, r4
 8008d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d3c:	e106      	b.n	8008f4c <UART_SetConfig+0x4d8>
 8008d3e:	bf00      	nop
 8008d40:	40011000 	.word	0x40011000
 8008d44:	40011400 	.word	0x40011400
 8008d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d5e:	4642      	mov	r2, r8
 8008d60:	464b      	mov	r3, r9
 8008d62:	1891      	adds	r1, r2, r2
 8008d64:	6239      	str	r1, [r7, #32]
 8008d66:	415b      	adcs	r3, r3
 8008d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d6e:	4641      	mov	r1, r8
 8008d70:	1854      	adds	r4, r2, r1
 8008d72:	4649      	mov	r1, r9
 8008d74:	eb43 0501 	adc.w	r5, r3, r1
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	00eb      	lsls	r3, r5, #3
 8008d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d86:	00e2      	lsls	r2, r4, #3
 8008d88:	4614      	mov	r4, r2
 8008d8a:	461d      	mov	r5, r3
 8008d8c:	4643      	mov	r3, r8
 8008d8e:	18e3      	adds	r3, r4, r3
 8008d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d94:	464b      	mov	r3, r9
 8008d96:	eb45 0303 	adc.w	r3, r5, r3
 8008d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008daa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dba:	4629      	mov	r1, r5
 8008dbc:	008b      	lsls	r3, r1, #2
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	008a      	lsls	r2, r1, #2
 8008dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008dcc:	f7f7 fa60 	bl	8000290 <__aeabi_uldivmod>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4b60      	ldr	r3, [pc, #384]	@ (8008f58 <UART_SetConfig+0x4e4>)
 8008dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008dda:	095b      	lsrs	r3, r3, #5
 8008ddc:	011c      	lsls	r4, r3, #4
 8008dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008de8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008df0:	4642      	mov	r2, r8
 8008df2:	464b      	mov	r3, r9
 8008df4:	1891      	adds	r1, r2, r2
 8008df6:	61b9      	str	r1, [r7, #24]
 8008df8:	415b      	adcs	r3, r3
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e00:	4641      	mov	r1, r8
 8008e02:	1851      	adds	r1, r2, r1
 8008e04:	6139      	str	r1, [r7, #16]
 8008e06:	4649      	mov	r1, r9
 8008e08:	414b      	adcs	r3, r1
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e18:	4659      	mov	r1, fp
 8008e1a:	00cb      	lsls	r3, r1, #3
 8008e1c:	4651      	mov	r1, sl
 8008e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e22:	4651      	mov	r1, sl
 8008e24:	00ca      	lsls	r2, r1, #3
 8008e26:	4610      	mov	r0, r2
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	189b      	adds	r3, r3, r2
 8008e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e34:	464b      	mov	r3, r9
 8008e36:	460a      	mov	r2, r1
 8008e38:	eb42 0303 	adc.w	r3, r2, r3
 8008e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e4c:	f04f 0200 	mov.w	r2, #0
 8008e50:	f04f 0300 	mov.w	r3, #0
 8008e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e58:	4649      	mov	r1, r9
 8008e5a:	008b      	lsls	r3, r1, #2
 8008e5c:	4641      	mov	r1, r8
 8008e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e62:	4641      	mov	r1, r8
 8008e64:	008a      	lsls	r2, r1, #2
 8008e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e6a:	f7f7 fa11 	bl	8000290 <__aeabi_uldivmod>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	4b38      	ldr	r3, [pc, #224]	@ (8008f58 <UART_SetConfig+0x4e4>)
 8008e76:	fba3 2301 	umull	r2, r3, r3, r1
 8008e7a:	095b      	lsrs	r3, r3, #5
 8008e7c:	2264      	movs	r2, #100	@ 0x64
 8008e7e:	fb02 f303 	mul.w	r3, r2, r3
 8008e82:	1acb      	subs	r3, r1, r3
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	3332      	adds	r3, #50	@ 0x32
 8008e88:	4a33      	ldr	r2, [pc, #204]	@ (8008f58 <UART_SetConfig+0x4e4>)
 8008e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e94:	441c      	add	r4, r3
 8008e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	1891      	adds	r1, r2, r2
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	415b      	adcs	r3, r3
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	1851      	adds	r1, r2, r1
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	4649      	mov	r1, r9
 8008ebc:	414b      	adcs	r3, r1
 8008ebe:	607b      	str	r3, [r7, #4]
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ecc:	4659      	mov	r1, fp
 8008ece:	00cb      	lsls	r3, r1, #3
 8008ed0:	4651      	mov	r1, sl
 8008ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ed6:	4651      	mov	r1, sl
 8008ed8:	00ca      	lsls	r2, r1, #3
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	460a      	mov	r2, r1
 8008eea:	eb42 0303 	adc.w	r3, r2, r3
 8008eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008efa:	667a      	str	r2, [r7, #100]	@ 0x64
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f08:	4649      	mov	r1, r9
 8008f0a:	008b      	lsls	r3, r1, #2
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f12:	4641      	mov	r1, r8
 8008f14:	008a      	lsls	r2, r1, #2
 8008f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f1a:	f7f7 f9b9 	bl	8000290 <__aeabi_uldivmod>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4b0d      	ldr	r3, [pc, #52]	@ (8008f58 <UART_SetConfig+0x4e4>)
 8008f24:	fba3 1302 	umull	r1, r3, r3, r2
 8008f28:	095b      	lsrs	r3, r3, #5
 8008f2a:	2164      	movs	r1, #100	@ 0x64
 8008f2c:	fb01 f303 	mul.w	r3, r1, r3
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	3332      	adds	r3, #50	@ 0x32
 8008f36:	4a08      	ldr	r2, [pc, #32]	@ (8008f58 <UART_SetConfig+0x4e4>)
 8008f38:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3c:	095b      	lsrs	r3, r3, #5
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4422      	add	r2, r4
 8008f4a:	609a      	str	r2, [r3, #8]
}
 8008f4c:	bf00      	nop
 8008f4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f52:	46bd      	mov	sp, r7
 8008f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f58:	51eb851f 	.word	0x51eb851f

08008f5c <__NVIC_SetPriority>:
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	db0a      	blt.n	8008f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	490c      	ldr	r1, [pc, #48]	@ (8008fa8 <__NVIC_SetPriority+0x4c>)
 8008f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7a:	0112      	lsls	r2, r2, #4
 8008f7c:	b2d2      	uxtb	r2, r2
 8008f7e:	440b      	add	r3, r1
 8008f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008f84:	e00a      	b.n	8008f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	4908      	ldr	r1, [pc, #32]	@ (8008fac <__NVIC_SetPriority+0x50>)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	3b04      	subs	r3, #4
 8008f94:	0112      	lsls	r2, r2, #4
 8008f96:	b2d2      	uxtb	r2, r2
 8008f98:	440b      	add	r3, r1
 8008f9a:	761a      	strb	r2, [r3, #24]
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	e000e100 	.word	0xe000e100
 8008fac:	e000ed00 	.word	0xe000ed00

08008fb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008fb4:	4b05      	ldr	r3, [pc, #20]	@ (8008fcc <SysTick_Handler+0x1c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008fb8:	f001 ff34 	bl	800ae24 <xTaskGetSchedulerState>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d001      	beq.n	8008fc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008fc2:	f002 fd29 	bl	800ba18 <xPortSysTickHandler>
  }
}
 8008fc6:	bf00      	nop
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	e000e010 	.word	0xe000e010

08008fd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	f06f 0004 	mvn.w	r0, #4
 8008fda:	f7ff ffbf 	bl	8008f5c <__NVIC_SetPriority>
#endif
}
 8008fde:	bf00      	nop
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fea:	f3ef 8305 	mrs	r3, IPSR
 8008fee:	603b      	str	r3, [r7, #0]
  return(result);
 8008ff0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ff6:	f06f 0305 	mvn.w	r3, #5
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	e00c      	b.n	8009018 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <osKernelInitialize+0x44>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009006:	4b08      	ldr	r3, [pc, #32]	@ (8009028 <osKernelInitialize+0x44>)
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800900c:	2300      	movs	r3, #0
 800900e:	607b      	str	r3, [r7, #4]
 8009010:	e002      	b.n	8009018 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009012:	f04f 33ff 	mov.w	r3, #4294967295
 8009016:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009018:	687b      	ldr	r3, [r7, #4]
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20000e34 	.word	0x20000e34

0800902c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009032:	f3ef 8305 	mrs	r3, IPSR
 8009036:	603b      	str	r3, [r7, #0]
  return(result);
 8009038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <osKernelStart+0x1a>
    stat = osErrorISR;
 800903e:	f06f 0305 	mvn.w	r3, #5
 8009042:	607b      	str	r3, [r7, #4]
 8009044:	e010      	b.n	8009068 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009046:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <osKernelStart+0x48>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d109      	bne.n	8009062 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800904e:	f7ff ffbf 	bl	8008fd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009052:	4b08      	ldr	r3, [pc, #32]	@ (8009074 <osKernelStart+0x48>)
 8009054:	2202      	movs	r2, #2
 8009056:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009058:	f001 fa80 	bl	800a55c <vTaskStartScheduler>
      stat = osOK;
 800905c:	2300      	movs	r3, #0
 800905e:	607b      	str	r3, [r7, #4]
 8009060:	e002      	b.n	8009068 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
 8009066:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009068:	687b      	ldr	r3, [r7, #4]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000e34 	.word	0x20000e34

08009078 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009078:	b580      	push	{r7, lr}
 800907a:	b08e      	sub	sp, #56	@ 0x38
 800907c:	af04      	add	r7, sp, #16
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009084:	2300      	movs	r3, #0
 8009086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009088:	f3ef 8305 	mrs	r3, IPSR
 800908c:	617b      	str	r3, [r7, #20]
  return(result);
 800908e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009090:	2b00      	cmp	r3, #0
 8009092:	d17e      	bne.n	8009192 <osThreadNew+0x11a>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d07b      	beq.n	8009192 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800909a:	2380      	movs	r3, #128	@ 0x80
 800909c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800909e:	2318      	movs	r3, #24
 80090a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80090a6:	f04f 33ff 	mov.w	r3, #4294967295
 80090aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d045      	beq.n	800913e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <osThreadNew+0x48>
        name = attr->name;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d008      	beq.n	80090e6 <osThreadNew+0x6e>
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	2b38      	cmp	r3, #56	@ 0x38
 80090d8:	d805      	bhi.n	80090e6 <osThreadNew+0x6e>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <osThreadNew+0x72>
        return (NULL);
 80090e6:	2300      	movs	r3, #0
 80090e8:	e054      	b.n	8009194 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	089b      	lsrs	r3, r3, #2
 80090f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <osThreadNew+0xa8>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	2ba7      	cmp	r3, #167	@ 0xa7
 8009108:	d90a      	bls.n	8009120 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800910e:	2b00      	cmp	r3, #0
 8009110:	d006      	beq.n	8009120 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <osThreadNew+0xa8>
        mem = 1;
 800911a:	2301      	movs	r3, #1
 800911c:	61bb      	str	r3, [r7, #24]
 800911e:	e010      	b.n	8009142 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10c      	bne.n	8009142 <osThreadNew+0xca>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d108      	bne.n	8009142 <osThreadNew+0xca>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <osThreadNew+0xca>
          mem = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	e001      	b.n	8009142 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d110      	bne.n	800916a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009150:	9202      	str	r2, [sp, #8]
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6a3a      	ldr	r2, [r7, #32]
 800915c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f001 f808 	bl	800a174 <xTaskCreateStatic>
 8009164:	4603      	mov	r3, r0
 8009166:	613b      	str	r3, [r7, #16]
 8009168:	e013      	b.n	8009192 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d110      	bne.n	8009192 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	b29a      	uxth	r2, r3
 8009174:	f107 0310 	add.w	r3, r7, #16
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f001 f856 	bl	800a234 <xTaskCreate>
 8009188:	4603      	mov	r3, r0
 800918a:	2b01      	cmp	r3, #1
 800918c:	d001      	beq.n	8009192 <osThreadNew+0x11a>
            hTask = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009192:	693b      	ldr	r3, [r7, #16]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3728      	adds	r7, #40	@ 0x28
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a4:	f3ef 8305 	mrs	r3, IPSR
 80091a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80091aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <osDelay+0x1c>
    stat = osErrorISR;
 80091b0:	f06f 0305 	mvn.w	r3, #5
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	e007      	b.n	80091c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f994 	bl	800a4f0 <vTaskDelay>
    }
  }

  return (stat);
 80091c8:	68fb      	ldr	r3, [r7, #12]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b08a      	sub	sp, #40	@ 0x28
 80091d6:	af02      	add	r7, sp, #8
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e2:	f3ef 8305 	mrs	r3, IPSR
 80091e6:	613b      	str	r3, [r7, #16]
  return(result);
 80091e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d15f      	bne.n	80092ae <osMessageQueueNew+0xdc>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d05c      	beq.n	80092ae <osMessageQueueNew+0xdc>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d059      	beq.n	80092ae <osMessageQueueNew+0xdc>
    mem = -1;
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295
 80091fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d029      	beq.n	800925a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <osMessageQueueNew+0x62>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b4f      	cmp	r3, #79	@ 0x4f
 8009214:	d90e      	bls.n	8009234 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00a      	beq.n	8009234 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	fb01 f303 	mul.w	r3, r1, r3
 800922a:	429a      	cmp	r2, r3
 800922c:	d302      	bcc.n	8009234 <osMessageQueueNew+0x62>
        mem = 1;
 800922e:	2301      	movs	r3, #1
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	e014      	b.n	800925e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d110      	bne.n	800925e <osMessageQueueNew+0x8c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10c      	bne.n	800925e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d104      	bne.n	800925e <osMessageQueueNew+0x8c>
          mem = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	e001      	b.n	800925e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d10b      	bne.n	800927c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2100      	movs	r1, #0
 800926e:	9100      	str	r1, [sp, #0]
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fa30 	bl	80096d8 <xQueueGenericCreateStatic>
 8009278:	61f8      	str	r0, [r7, #28]
 800927a:	e008      	b.n	800928e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009282:	2200      	movs	r2, #0
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 faa3 	bl	80097d2 <xQueueGenericCreate>
 800928c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00c      	beq.n	80092ae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e001      	b.n	80092a6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80092a6:	6979      	ldr	r1, [r7, #20]
 80092a8:	69f8      	ldr	r0, [r7, #28]
 80092aa:	f000 ff05 	bl	800a0b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80092ae:	69fb      	ldr	r3, [r7, #28]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	4613      	mov	r3, r2
 80092c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092d0:	f3ef 8305 	mrs	r3, IPSR
 80092d4:	617b      	str	r3, [r7, #20]
  return(result);
 80092d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d028      	beq.n	800932e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <osMessageQueuePut+0x36>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <osMessageQueuePut+0x36>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80092ee:	f06f 0303 	mvn.w	r3, #3
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	e038      	b.n	8009368 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092fa:	f107 0210 	add.w	r2, r7, #16
 80092fe:	2300      	movs	r3, #0
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	69b8      	ldr	r0, [r7, #24]
 8009304:	f000 fbc6 	bl	8009a94 <xQueueGenericSendFromISR>
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d003      	beq.n	8009316 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800930e:	f06f 0302 	mvn.w	r3, #2
 8009312:	61fb      	str	r3, [r7, #28]
 8009314:	e028      	b.n	8009368 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d025      	beq.n	8009368 <osMessageQueuePut+0xb0>
 800931c:	4b15      	ldr	r3, [pc, #84]	@ (8009374 <osMessageQueuePut+0xbc>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	e01c      	b.n	8009368 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <osMessageQueuePut+0x82>
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800933a:	f06f 0303 	mvn.w	r3, #3
 800933e:	61fb      	str	r3, [r7, #28]
 8009340:	e012      	b.n	8009368 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009342:	2300      	movs	r3, #0
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	69b8      	ldr	r0, [r7, #24]
 800934a:	f000 faa1 	bl	8009890 <xQueueGenericSend>
 800934e:	4603      	mov	r3, r0
 8009350:	2b01      	cmp	r3, #1
 8009352:	d009      	beq.n	8009368 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800935a:	f06f 0301 	mvn.w	r3, #1
 800935e:	61fb      	str	r3, [r7, #28]
 8009360:	e002      	b.n	8009368 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009362:	f06f 0302 	mvn.w	r3, #2
 8009366:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009368:	69fb      	ldr	r3, [r7, #28]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800938a:	2300      	movs	r3, #0
 800938c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800938e:	f3ef 8305 	mrs	r3, IPSR
 8009392:	617b      	str	r3, [r7, #20]
  return(result);
 8009394:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009396:	2b00      	cmp	r3, #0
 8009398:	d028      	beq.n	80093ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <osMessageQueueGet+0x34>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <osMessageQueueGet+0x34>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80093ac:	f06f 0303 	mvn.w	r3, #3
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	e037      	b.n	8009424 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	461a      	mov	r2, r3
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	69b8      	ldr	r0, [r7, #24]
 80093c2:	f000 fce7 	bl	8009d94 <xQueueReceiveFromISR>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d003      	beq.n	80093d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80093cc:	f06f 0302 	mvn.w	r3, #2
 80093d0:	61fb      	str	r3, [r7, #28]
 80093d2:	e027      	b.n	8009424 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d024      	beq.n	8009424 <osMessageQueueGet+0xac>
 80093da:	4b15      	ldr	r3, [pc, #84]	@ (8009430 <osMessageQueueGet+0xb8>)
 80093dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	e01b      	b.n	8009424 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <osMessageQueueGet+0x80>
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d103      	bne.n	8009400 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80093f8:	f06f 0303 	mvn.w	r3, #3
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	e011      	b.n	8009424 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	69b8      	ldr	r0, [r7, #24]
 8009406:	f000 fbe3 	bl	8009bd0 <xQueueReceive>
 800940a:	4603      	mov	r3, r0
 800940c:	2b01      	cmp	r3, #1
 800940e:	d009      	beq.n	8009424 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009416:	f06f 0301 	mvn.w	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	e002      	b.n	8009424 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800941e:	f06f 0302 	mvn.w	r3, #2
 8009422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009424:	69fb      	ldr	r3, [r7, #28]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a07      	ldr	r2, [pc, #28]	@ (8009460 <vApplicationGetIdleTaskMemory+0x2c>)
 8009444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4a06      	ldr	r2, [pc, #24]	@ (8009464 <vApplicationGetIdleTaskMemory+0x30>)
 800944a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2280      	movs	r2, #128	@ 0x80
 8009450:	601a      	str	r2, [r3, #0]
}
 8009452:	bf00      	nop
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20000e38 	.word	0x20000e38
 8009464:	20000ee0 	.word	0x20000ee0

08009468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a07      	ldr	r2, [pc, #28]	@ (8009494 <vApplicationGetTimerTaskMemory+0x2c>)
 8009478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	4a06      	ldr	r2, [pc, #24]	@ (8009498 <vApplicationGetTimerTaskMemory+0x30>)
 800947e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009486:	601a      	str	r2, [r3, #0]
}
 8009488:	bf00      	nop
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	200010e0 	.word	0x200010e0
 8009498:	20001188 	.word	0x20001188

0800949c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f103 0208 	add.w	r2, r3, #8
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f103 0208 	add.w	r2, r3, #8
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f103 0208 	add.w	r2, r3, #8
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009554:	d103      	bne.n	800955e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	e00c      	b.n	8009578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3308      	adds	r3, #8
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e002      	b.n	800956c <vListInsert+0x2e>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	429a      	cmp	r2, r3
 8009576:	d2f6      	bcs.n	8009566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	601a      	str	r2, [r3, #0]
}
 80095a4:	bf00      	nop
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	6892      	ldr	r2, [r2, #8]
 80095c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6852      	ldr	r2, [r2, #4]
 80095d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d103      	bne.n	80095e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	1e5a      	subs	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	e7fd      	b.n	800962c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009630:	f002 f962 	bl	800b8f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963c:	68f9      	ldr	r1, [r7, #12]
 800963e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009660:	3b01      	subs	r3, #1
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009666:	fb01 f303 	mul.w	r3, r1, r3
 800966a:	441a      	add	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	22ff      	movs	r2, #255	@ 0xff
 8009674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	22ff      	movs	r2, #255	@ 0xff
 800967c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d114      	bne.n	80096b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01a      	beq.n	80096c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3310      	adds	r3, #16
 8009692:	4618      	mov	r0, r3
 8009694:	f001 fa00 	bl	800aa98 <xTaskRemoveFromEventList>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d012      	beq.n	80096c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800969e:	4b0d      	ldr	r3, [pc, #52]	@ (80096d4 <xQueueGenericReset+0xd0>)
 80096a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	e009      	b.n	80096c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3310      	adds	r3, #16
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fef1 	bl	800949c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3324      	adds	r3, #36	@ 0x24
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff feec 	bl	800949c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096c4:	f002 f94a 	bl	800b95c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096c8:	2301      	movs	r3, #1
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08e      	sub	sp, #56	@ 0x38
 80096dc:	af02      	add	r7, sp, #8
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	e7fd      	b.n	800971e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <xQueueGenericCreateStatic+0x56>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <xQueueGenericCreateStatic+0x5a>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericCreateStatic+0x5c>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10b      	bne.n	8009750 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	e7fd      	b.n	800974c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <xQueueGenericCreateStatic+0x84>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <xQueueGenericCreateStatic+0x88>
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <xQueueGenericCreateStatic+0x8a>
 8009760:	2300      	movs	r3, #0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10b      	bne.n	800977e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	61fb      	str	r3, [r7, #28]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800977e:	2350      	movs	r3, #80	@ 0x50
 8009780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b50      	cmp	r3, #80	@ 0x50
 8009786:	d00b      	beq.n	80097a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	61bb      	str	r3, [r7, #24]
}
 800979a:	bf00      	nop
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80097a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00d      	beq.n	80097c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	4613      	mov	r3, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f840 	bl	8009848 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3730      	adds	r7, #48	@ 0x30
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b08a      	sub	sp, #40	@ 0x28
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	4613      	mov	r3, r2
 80097de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <xQueueGenericCreate+0x2c>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	613b      	str	r3, [r7, #16]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	fb02 f303 	mul.w	r3, r2, r3
 8009806:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3350      	adds	r3, #80	@ 0x50
 800980c:	4618      	mov	r0, r3
 800980e:	f002 f995 	bl	800bb3c <pvPortMalloc>
 8009812:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d011      	beq.n	800983e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	3350      	adds	r3, #80	@ 0x50
 8009822:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800982c:	79fa      	ldrb	r2, [r7, #7]
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	4613      	mov	r3, r2
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 f805 	bl	8009848 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800983e:	69bb      	ldr	r3, [r7, #24]
	}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d103      	bne.n	8009864 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	e002      	b.n	800986a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009876:	2101      	movs	r1, #1
 8009878:	69b8      	ldr	r0, [r7, #24]
 800987a:	f7ff fec3 	bl	8009604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08e      	sub	sp, #56	@ 0x38
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800989e:	2300      	movs	r3, #0
 80098a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10b      	bne.n	80098c4 <xQueueGenericSend+0x34>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <xQueueGenericSend+0x42>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <xQueueGenericSend+0x46>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <xQueueGenericSend+0x48>
 80098d6:	2300      	movs	r3, #0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10b      	bne.n	80098f4 <xQueueGenericSend+0x64>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	e7fd      	b.n	80098f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d103      	bne.n	8009902 <xQueueGenericSend+0x72>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <xQueueGenericSend+0x76>
 8009902:	2301      	movs	r3, #1
 8009904:	e000      	b.n	8009908 <xQueueGenericSend+0x78>
 8009906:	2300      	movs	r3, #0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10b      	bne.n	8009924 <xQueueGenericSend+0x94>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	623b      	str	r3, [r7, #32]
}
 800991e:	bf00      	nop
 8009920:	bf00      	nop
 8009922:	e7fd      	b.n	8009920 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009924:	f001 fa7e 	bl	800ae24 <xTaskGetSchedulerState>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <xQueueGenericSend+0xa4>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <xQueueGenericSend+0xa8>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <xQueueGenericSend+0xaa>
 8009938:	2300      	movs	r3, #0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10b      	bne.n	8009956 <xQueueGenericSend+0xc6>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	61fb      	str	r3, [r7, #28]
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	e7fd      	b.n	8009952 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009956:	f001 ffcf 	bl	800b8f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009962:	429a      	cmp	r2, r3
 8009964:	d302      	bcc.n	800996c <xQueueGenericSend+0xdc>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d129      	bne.n	80099c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009972:	f000 fa91 	bl	8009e98 <prvCopyDataToQueue>
 8009976:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d010      	beq.n	80099a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	3324      	adds	r3, #36	@ 0x24
 8009984:	4618      	mov	r0, r3
 8009986:	f001 f887 	bl	800aa98 <xTaskRemoveFromEventList>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d013      	beq.n	80099b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009990:	4b3f      	ldr	r3, [pc, #252]	@ (8009a90 <xQueueGenericSend+0x200>)
 8009992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	e00a      	b.n	80099b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80099a8:	4b39      	ldr	r3, [pc, #228]	@ (8009a90 <xQueueGenericSend+0x200>)
 80099aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099b8:	f001 ffd0 	bl	800b95c <vPortExitCritical>
				return pdPASS;
 80099bc:	2301      	movs	r3, #1
 80099be:	e063      	b.n	8009a88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d103      	bne.n	80099ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099c6:	f001 ffc9 	bl	800b95c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e05c      	b.n	8009a88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099d4:	f107 0314 	add.w	r3, r7, #20
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 f8c1 	bl	800ab60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099de:	2301      	movs	r3, #1
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099e2:	f001 ffbb 	bl	800b95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099e6:	f000 fe29 	bl	800a63c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ea:	f001 ff85 	bl	800b8f8 <vPortEnterCritical>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099f4:	b25b      	sxtb	r3, r3
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fa:	d103      	bne.n	8009a04 <xQueueGenericSend+0x174>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a0a:	b25b      	sxtb	r3, r3
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d103      	bne.n	8009a1a <xQueueGenericSend+0x18a>
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a1a:	f001 ff9f 	bl	800b95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a1e:	1d3a      	adds	r2, r7, #4
 8009a20:	f107 0314 	add.w	r3, r7, #20
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 f8b0 	bl	800ab8c <xTaskCheckForTimeOut>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d124      	bne.n	8009a7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a34:	f000 fb28 	bl	800a088 <prvIsQueueFull>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d018      	beq.n	8009a70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	3310      	adds	r3, #16
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 ffd4 	bl	800a9f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a4e:	f000 fab3 	bl	8009fb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a52:	f000 fe01 	bl	800a658 <xTaskResumeAll>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f47f af7c 	bne.w	8009956 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a90 <xQueueGenericSend+0x200>)
 8009a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	e772      	b.n	8009956 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a72:	f000 faa1 	bl	8009fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a76:	f000 fdef 	bl	800a658 <xTaskResumeAll>
 8009a7a:	e76c      	b.n	8009956 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a7e:	f000 fa9b 	bl	8009fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a82:	f000 fde9 	bl	800a658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3738      	adds	r7, #56	@ 0x38
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b090      	sub	sp, #64	@ 0x40
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10b      	bne.n	8009ac4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <xQueueGenericSendFromISR+0x3e>
 8009aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <xQueueGenericSendFromISR+0x42>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <xQueueGenericSendFromISR+0x44>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10b      	bne.n	8009af4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009aee:	bf00      	nop
 8009af0:	bf00      	nop
 8009af2:	e7fd      	b.n	8009af0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d103      	bne.n	8009b02 <xQueueGenericSendFromISR+0x6e>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <xQueueGenericSendFromISR+0x72>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <xQueueGenericSendFromISR+0x74>
 8009b06:	2300      	movs	r3, #0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10b      	bne.n	8009b24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	623b      	str	r3, [r7, #32]
}
 8009b1e:	bf00      	nop
 8009b20:	bf00      	nop
 8009b22:	e7fd      	b.n	8009b20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b24:	f001 ffc8 	bl	800bab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b28:	f3ef 8211 	mrs	r2, BASEPRI
 8009b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	61fa      	str	r2, [r7, #28]
 8009b3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d302      	bcc.n	8009b56 <xQueueGenericSendFromISR+0xc2>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d12f      	bne.n	8009bb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b6c:	f000 f994 	bl	8009e98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d112      	bne.n	8009ba0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d016      	beq.n	8009bb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b84:	3324      	adds	r3, #36	@ 0x24
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 ff86 	bl	800aa98 <xTaskRemoveFromEventList>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00e      	beq.n	8009bb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00b      	beq.n	8009bb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	e007      	b.n	8009bb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	b25a      	sxtb	r2, r3
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009bb4:	e001      	b.n	8009bba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009bc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3740      	adds	r7, #64	@ 0x40
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08c      	sub	sp, #48	@ 0x30
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <xQueueReceive+0x32>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	623b      	str	r3, [r7, #32]
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	e7fd      	b.n	8009bfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d103      	bne.n	8009c10 <xQueueReceive+0x40>
 8009c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <xQueueReceive+0x44>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e000      	b.n	8009c16 <xQueueReceive+0x46>
 8009c14:	2300      	movs	r3, #0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10b      	bne.n	8009c32 <xQueueReceive+0x62>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	61fb      	str	r3, [r7, #28]
}
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	e7fd      	b.n	8009c2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c32:	f001 f8f7 	bl	800ae24 <xTaskGetSchedulerState>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <xQueueReceive+0x72>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <xQueueReceive+0x76>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <xQueueReceive+0x78>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10b      	bne.n	8009c64 <xQueueReceive+0x94>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	61bb      	str	r3, [r7, #24]
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	e7fd      	b.n	8009c60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c64:	f001 fe48 	bl	800b8f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01f      	beq.n	8009cb4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c78:	f000 f978 	bl	8009f6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	1e5a      	subs	r2, r3, #1
 8009c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00f      	beq.n	8009cac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	3310      	adds	r3, #16
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 ff01 	bl	800aa98 <xTaskRemoveFromEventList>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d007      	beq.n	8009cac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8009d90 <xQueueReceive+0x1c0>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cac:	f001 fe56 	bl	800b95c <vPortExitCritical>
				return pdPASS;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e069      	b.n	8009d88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cba:	f001 fe4f 	bl	800b95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e062      	b.n	8009d88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d106      	bne.n	8009cd6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cc8:	f107 0310 	add.w	r3, r7, #16
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 ff47 	bl	800ab60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cd6:	f001 fe41 	bl	800b95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cda:	f000 fcaf 	bl	800a63c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cde:	f001 fe0b 	bl	800b8f8 <vPortEnterCritical>
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d103      	bne.n	8009cf8 <xQueueReceive+0x128>
 8009cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d103      	bne.n	8009d0e <xQueueReceive+0x13e>
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d0e:	f001 fe25 	bl	800b95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d12:	1d3a      	adds	r2, r7, #4
 8009d14:	f107 0310 	add.w	r3, r7, #16
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 ff36 	bl	800ab8c <xTaskCheckForTimeOut>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d123      	bne.n	8009d6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d28:	f000 f998 	bl	800a05c <prvIsQueueEmpty>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d017      	beq.n	8009d62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	3324      	adds	r3, #36	@ 0x24
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fe5a 	bl	800a9f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d42:	f000 f939 	bl	8009fb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d46:	f000 fc87 	bl	800a658 <xTaskResumeAll>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d189      	bne.n	8009c64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d50:	4b0f      	ldr	r3, [pc, #60]	@ (8009d90 <xQueueReceive+0x1c0>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	e780      	b.n	8009c64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d64:	f000 f928 	bl	8009fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d68:	f000 fc76 	bl	800a658 <xTaskResumeAll>
 8009d6c:	e77a      	b.n	8009c64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d70:	f000 f922 	bl	8009fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d74:	f000 fc70 	bl	800a658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d7a:	f000 f96f 	bl	800a05c <prvIsQueueEmpty>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f43f af6f 	beq.w	8009c64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3730      	adds	r7, #48	@ 0x30
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08e      	sub	sp, #56	@ 0x38
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	623b      	str	r3, [r7, #32]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d103      	bne.n	8009dd0 <xQueueReceiveFromISR+0x3c>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xQueueReceiveFromISR+0x40>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <xQueueReceiveFromISR+0x42>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	61fb      	str	r3, [r7, #28]
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	e7fd      	b.n	8009dee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009df2:	f001 fe61 	bl	800bab8 <vPortValidateInterruptPriority>
	__asm volatile
 8009df6:	f3ef 8211 	mrs	r2, BASEPRI
 8009dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	61ba      	str	r2, [r7, #24]
 8009e0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d02f      	beq.n	8009e7e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e2c:	f000 f89e 	bl	8009f6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e32:	1e5a      	subs	r2, r3, #1
 8009e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e40:	d112      	bne.n	8009e68 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d016      	beq.n	8009e78 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	3310      	adds	r3, #16
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fe22 	bl	800aa98 <xTaskRemoveFromEventList>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e007      	b.n	8009e78 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	b25a      	sxtb	r2, r3
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7c:	e001      	b.n	8009e82 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f383 8811 	msr	BASEPRI, r3
}
 8009e8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3738      	adds	r7, #56	@ 0x38
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10d      	bne.n	8009ed2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d14d      	bne.n	8009f5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 ffcc 	bl	800ae60 <xTaskPriorityDisinherit>
 8009ec8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	609a      	str	r2, [r3, #8]
 8009ed0:	e043      	b.n	8009f5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d119      	bne.n	8009f0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6858      	ldr	r0, [r3, #4]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	f002 fb61 	bl	800c5aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	441a      	add	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d32b      	bcc.n	8009f5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	e026      	b.n	8009f5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68d8      	ldr	r0, [r3, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f14:	461a      	mov	r2, r3
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	f002 fb47 	bl	800c5aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f24:	425b      	negs	r3, r3
 8009f26:	441a      	add	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d207      	bcs.n	8009f48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f40:	425b      	negs	r3, r3
 8009f42:	441a      	add	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d105      	bne.n	8009f5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f62:	697b      	ldr	r3, [r7, #20]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d018      	beq.n	8009fb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f86:	441a      	add	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d303      	bcc.n	8009fa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68d9      	ldr	r1, [r3, #12]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6838      	ldr	r0, [r7, #0]
 8009fac:	f002 fafd 	bl	800c5aa <memcpy>
	}
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fc0:	f001 fc9a 	bl	800b8f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fcc:	e011      	b.n	8009ff2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d012      	beq.n	8009ffc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3324      	adds	r3, #36	@ 0x24
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fd5c 	bl	800aa98 <xTaskRemoveFromEventList>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fe6:	f000 fe35 	bl	800ac54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	dce9      	bgt.n	8009fce <prvUnlockQueue+0x16>
 8009ffa:	e000      	b.n	8009ffe <prvUnlockQueue+0x46>
					break;
 8009ffc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	22ff      	movs	r2, #255	@ 0xff
 800a002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a006:	f001 fca9 	bl	800b95c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a00a:	f001 fc75 	bl	800b8f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a014:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a016:	e011      	b.n	800a03c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d012      	beq.n	800a046 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3310      	adds	r3, #16
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fd37 	bl	800aa98 <xTaskRemoveFromEventList>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a030:	f000 fe10 	bl	800ac54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	3b01      	subs	r3, #1
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a03c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a040:	2b00      	cmp	r3, #0
 800a042:	dce9      	bgt.n	800a018 <prvUnlockQueue+0x60>
 800a044:	e000      	b.n	800a048 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a046:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	22ff      	movs	r2, #255	@ 0xff
 800a04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a050:	f001 fc84 	bl	800b95c <vPortExitCritical>
}
 800a054:	bf00      	nop
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a064:	f001 fc48 	bl	800b8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d102      	bne.n	800a076 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e001      	b.n	800a07a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a07a:	f001 fc6f 	bl	800b95c <vPortExitCritical>

	return xReturn;
 800a07e:	68fb      	ldr	r3, [r7, #12]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a090:	f001 fc32 	bl	800b8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d102      	bne.n	800a0a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e001      	b.n	800a0aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0aa:	f001 fc57 	bl	800b95c <vPortExitCritical>

	return xReturn;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	e014      	b.n	800a0f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800a108 <vQueueAddToRegistry+0x50>)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10b      	bne.n	800a0ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0d4:	490c      	ldr	r1, [pc, #48]	@ (800a108 <vQueueAddToRegistry+0x50>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0de:	4a0a      	ldr	r2, [pc, #40]	@ (800a108 <vQueueAddToRegistry+0x50>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0ea:	e006      	b.n	800a0fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b07      	cmp	r3, #7
 800a0f6:	d9e7      	bls.n	800a0c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	20001588 	.word	0x20001588

0800a10c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a11c:	f001 fbec 	bl	800b8f8 <vPortEnterCritical>
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a126:	b25b      	sxtb	r3, r3
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d103      	bne.n	800a136 <vQueueWaitForMessageRestricted+0x2a>
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d103      	bne.n	800a14c <vQueueWaitForMessageRestricted+0x40>
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a14c:	f001 fc06 	bl	800b95c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	3324      	adds	r3, #36	@ 0x24
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fc6d 	bl	800aa40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a166:	6978      	ldr	r0, [r7, #20]
 800a168:	f7ff ff26 	bl	8009fb8 <prvUnlockQueue>
	}
 800a16c:	bf00      	nop
 800a16e:	3718      	adds	r7, #24
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08e      	sub	sp, #56	@ 0x38
 800a178:	af04      	add	r7, sp, #16
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	623b      	str	r3, [r7, #32]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <xTaskCreateStatic+0x4a>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	61fb      	str	r3, [r7, #28]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1be:	23a8      	movs	r3, #168	@ 0xa8
 800a1c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2ba8      	cmp	r3, #168	@ 0xa8
 800a1c6:	d00b      	beq.n	800a1e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	61bb      	str	r3, [r7, #24]
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	e7fd      	b.n	800a1dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01e      	beq.n	800a226 <xTaskCreateStatic+0xb2>
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01b      	beq.n	800a226 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a200:	2300      	movs	r3, #0
 800a202:	9303      	str	r3, [sp, #12]
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a206:	9302      	str	r3, [sp, #8]
 800a208:	f107 0314 	add.w	r3, r7, #20
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f851 	bl	800a2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a21e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a220:	f000 f8f6 	bl	800a410 <prvAddNewTaskToReadyList>
 800a224:	e001      	b.n	800a22a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a22a:	697b      	ldr	r3, [r7, #20]
	}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3728      	adds	r7, #40	@ 0x28
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08c      	sub	sp, #48	@ 0x30
 800a238:	af04      	add	r7, sp, #16
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	603b      	str	r3, [r7, #0]
 800a240:	4613      	mov	r3, r2
 800a242:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a244:	88fb      	ldrh	r3, [r7, #6]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 fc77 	bl	800bb3c <pvPortMalloc>
 800a24e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00e      	beq.n	800a274 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a256:	20a8      	movs	r0, #168	@ 0xa8
 800a258:	f001 fc70 	bl	800bb3c <pvPortMalloc>
 800a25c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	631a      	str	r2, [r3, #48]	@ 0x30
 800a26a:	e005      	b.n	800a278 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a26c:	6978      	ldr	r0, [r7, #20]
 800a26e:	f001 fd33 	bl	800bcd8 <vPortFree>
 800a272:	e001      	b.n	800a278 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d017      	beq.n	800a2ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a286:	88fa      	ldrh	r2, [r7, #6]
 800a288:	2300      	movs	r3, #0
 800a28a:	9303      	str	r3, [sp, #12]
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 f80f 	bl	800a2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2a2:	69f8      	ldr	r0, [r7, #28]
 800a2a4:	f000 f8b4 	bl	800a410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	e002      	b.n	800a2b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
	}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	21a5      	movs	r1, #165	@ 0xa5
 800a2da:	f002 f85b 	bl	800c394 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00b      	beq.n	800a31a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	617b      	str	r3, [r7, #20]
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01f      	beq.n	800a360 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a320:	2300      	movs	r3, #0
 800a322:	61fb      	str	r3, [r7, #28]
 800a324:	e012      	b.n	800a34c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	7819      	ldrb	r1, [r3, #0]
 800a32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	4413      	add	r3, r2
 800a334:	3334      	adds	r3, #52	@ 0x34
 800a336:	460a      	mov	r2, r1
 800a338:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	4413      	add	r3, r2
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d006      	beq.n	800a354 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	3301      	adds	r3, #1
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	2b0f      	cmp	r3, #15
 800a350:	d9e9      	bls.n	800a326 <prvInitialiseNewTask+0x66>
 800a352:	e000      	b.n	800a356 <prvInitialiseNewTask+0x96>
			{
				break;
 800a354:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a35e:	e003      	b.n	800a368 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	2b37      	cmp	r3, #55	@ 0x37
 800a36c:	d901      	bls.n	800a372 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a36e:	2337      	movs	r3, #55	@ 0x37
 800a370:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a376:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a37c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	2200      	movs	r2, #0
 800a382:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	3304      	adds	r3, #4
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff f8a7 	bl	80094dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	3318      	adds	r3, #24
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff f8a2 	bl	80094dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a39c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	3354      	adds	r3, #84	@ 0x54
 800a3c2:	224c      	movs	r2, #76	@ 0x4c
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f001 ffe4 	bl	800c394 <memset>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	4a0d      	ldr	r2, [pc, #52]	@ (800a404 <prvInitialiseNewTask+0x144>)
 800a3d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	4a0c      	ldr	r2, [pc, #48]	@ (800a408 <prvInitialiseNewTask+0x148>)
 800a3d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	4a0c      	ldr	r2, [pc, #48]	@ (800a40c <prvInitialiseNewTask+0x14c>)
 800a3dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	68f9      	ldr	r1, [r7, #12]
 800a3e2:	69b8      	ldr	r0, [r7, #24]
 800a3e4:	f001 f95a 	bl	800b69c <pxPortInitialiseStack>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3fa:	bf00      	nop
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	2000581c 	.word	0x2000581c
 800a408:	20005884 	.word	0x20005884
 800a40c:	200058ec 	.word	0x200058ec

0800a410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a418:	f001 fa6e 	bl	800b8f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a41c:	4b2d      	ldr	r3, [pc, #180]	@ (800a4d4 <prvAddNewTaskToReadyList+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	4a2c      	ldr	r2, [pc, #176]	@ (800a4d4 <prvAddNewTaskToReadyList+0xc4>)
 800a424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a426:	4b2c      	ldr	r3, [pc, #176]	@ (800a4d8 <prvAddNewTaskToReadyList+0xc8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a42e:	4a2a      	ldr	r2, [pc, #168]	@ (800a4d8 <prvAddNewTaskToReadyList+0xc8>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a434:	4b27      	ldr	r3, [pc, #156]	@ (800a4d4 <prvAddNewTaskToReadyList+0xc4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d110      	bne.n	800a45e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a43c:	f000 fc2e 	bl	800ac9c <prvInitialiseTaskLists>
 800a440:	e00d      	b.n	800a45e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a442:	4b26      	ldr	r3, [pc, #152]	@ (800a4dc <prvAddNewTaskToReadyList+0xcc>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d109      	bne.n	800a45e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a44a:	4b23      	ldr	r3, [pc, #140]	@ (800a4d8 <prvAddNewTaskToReadyList+0xc8>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	429a      	cmp	r2, r3
 800a456:	d802      	bhi.n	800a45e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a458:	4a1f      	ldr	r2, [pc, #124]	@ (800a4d8 <prvAddNewTaskToReadyList+0xc8>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a45e:	4b20      	ldr	r3, [pc, #128]	@ (800a4e0 <prvAddNewTaskToReadyList+0xd0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3301      	adds	r3, #1
 800a464:	4a1e      	ldr	r2, [pc, #120]	@ (800a4e0 <prvAddNewTaskToReadyList+0xd0>)
 800a466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a468:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e0 <prvAddNewTaskToReadyList+0xd0>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a474:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e4 <prvAddNewTaskToReadyList+0xd4>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d903      	bls.n	800a484 <prvAddNewTaskToReadyList+0x74>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a480:	4a18      	ldr	r2, [pc, #96]	@ (800a4e4 <prvAddNewTaskToReadyList+0xd4>)
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4a15      	ldr	r2, [pc, #84]	@ (800a4e8 <prvAddNewTaskToReadyList+0xd8>)
 800a492:	441a      	add	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f7ff f82b 	bl	80094f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4a0:	f001 fa5c 	bl	800b95c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a4dc <prvAddNewTaskToReadyList+0xcc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00e      	beq.n	800a4ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d8 <prvAddNewTaskToReadyList+0xc8>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d207      	bcs.n	800a4ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a4ec <prvAddNewTaskToReadyList+0xdc>)
 800a4bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20001a9c 	.word	0x20001a9c
 800a4d8:	200015c8 	.word	0x200015c8
 800a4dc:	20001aa8 	.word	0x20001aa8
 800a4e0:	20001ab8 	.word	0x20001ab8
 800a4e4:	20001aa4 	.word	0x20001aa4
 800a4e8:	200015cc 	.word	0x200015cc
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d018      	beq.n	800a534 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a502:	4b14      	ldr	r3, [pc, #80]	@ (800a554 <vTaskDelay+0x64>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00b      	beq.n	800a522 <vTaskDelay+0x32>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	60bb      	str	r3, [r7, #8]
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	e7fd      	b.n	800a51e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a522:	f000 f88b 	bl	800a63c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a526:	2100      	movs	r1, #0
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fd09 	bl	800af40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a52e:	f000 f893 	bl	800a658 <xTaskResumeAll>
 800a532:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d107      	bne.n	800a54a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a53a:	4b07      	ldr	r3, [pc, #28]	@ (800a558 <vTaskDelay+0x68>)
 800a53c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a54a:	bf00      	nop
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20001ac4 	.word	0x20001ac4
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08a      	sub	sp, #40	@ 0x28
 800a560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a56a:	463a      	mov	r2, r7
 800a56c:	1d39      	adds	r1, r7, #4
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe ff5e 	bl	8009434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	9202      	str	r2, [sp, #8]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	2300      	movs	r3, #0
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	2300      	movs	r3, #0
 800a588:	460a      	mov	r2, r1
 800a58a:	4924      	ldr	r1, [pc, #144]	@ (800a61c <vTaskStartScheduler+0xc0>)
 800a58c:	4824      	ldr	r0, [pc, #144]	@ (800a620 <vTaskStartScheduler+0xc4>)
 800a58e:	f7ff fdf1 	bl	800a174 <xTaskCreateStatic>
 800a592:	4603      	mov	r3, r0
 800a594:	4a23      	ldr	r2, [pc, #140]	@ (800a624 <vTaskStartScheduler+0xc8>)
 800a596:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a598:	4b22      	ldr	r3, [pc, #136]	@ (800a624 <vTaskStartScheduler+0xc8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e001      	b.n	800a5aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d102      	bne.n	800a5b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5b0:	f000 fd1a 	bl	800afe8 <xTimerCreateTimerTask>
 800a5b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d11b      	bne.n	800a5f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	613b      	str	r3, [r7, #16]
}
 800a5ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5d0:	4b15      	ldr	r3, [pc, #84]	@ (800a628 <vTaskStartScheduler+0xcc>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3354      	adds	r3, #84	@ 0x54
 800a5d6:	4a15      	ldr	r2, [pc, #84]	@ (800a62c <vTaskStartScheduler+0xd0>)
 800a5d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5da:	4b15      	ldr	r3, [pc, #84]	@ (800a630 <vTaskStartScheduler+0xd4>)
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5e2:	4b14      	ldr	r3, [pc, #80]	@ (800a634 <vTaskStartScheduler+0xd8>)
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5e8:	4b13      	ldr	r3, [pc, #76]	@ (800a638 <vTaskStartScheduler+0xdc>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5ee:	f001 f8df 	bl	800b7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5f2:	e00f      	b.n	800a614 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fa:	d10b      	bne.n	800a614 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60fb      	str	r3, [r7, #12]
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <vTaskStartScheduler+0xb4>
}
 800a614:	bf00      	nop
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	0800db18 	.word	0x0800db18
 800a620:	0800ac6d 	.word	0x0800ac6d
 800a624:	20001ac0 	.word	0x20001ac0
 800a628:	200015c8 	.word	0x200015c8
 800a62c:	200000e0 	.word	0x200000e0
 800a630:	20001abc 	.word	0x20001abc
 800a634:	20001aa8 	.word	0x20001aa8
 800a638:	20001aa0 	.word	0x20001aa0

0800a63c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a63c:	b480      	push	{r7}
 800a63e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a640:	4b04      	ldr	r3, [pc, #16]	@ (800a654 <vTaskSuspendAll+0x18>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	4a03      	ldr	r2, [pc, #12]	@ (800a654 <vTaskSuspendAll+0x18>)
 800a648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a64a:	bf00      	nop
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	20001ac4 	.word	0x20001ac4

0800a658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a666:	4b42      	ldr	r3, [pc, #264]	@ (800a770 <xTaskResumeAll+0x118>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <xTaskResumeAll+0x2e>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	603b      	str	r3, [r7, #0]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a686:	f001 f937 	bl	800b8f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a68a:	4b39      	ldr	r3, [pc, #228]	@ (800a770 <xTaskResumeAll+0x118>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3b01      	subs	r3, #1
 800a690:	4a37      	ldr	r2, [pc, #220]	@ (800a770 <xTaskResumeAll+0x118>)
 800a692:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a694:	4b36      	ldr	r3, [pc, #216]	@ (800a770 <xTaskResumeAll+0x118>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d162      	bne.n	800a762 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a69c:	4b35      	ldr	r3, [pc, #212]	@ (800a774 <xTaskResumeAll+0x11c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d05e      	beq.n	800a762 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6a4:	e02f      	b.n	800a706 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a6:	4b34      	ldr	r3, [pc, #208]	@ (800a778 <xTaskResumeAll+0x120>)
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3318      	adds	r3, #24
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe ff7c 	bl	80095b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fe ff77 	bl	80095b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c6:	4b2d      	ldr	r3, [pc, #180]	@ (800a77c <xTaskResumeAll+0x124>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d903      	bls.n	800a6d6 <xTaskResumeAll+0x7e>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a77c <xTaskResumeAll+0x124>)
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6da:	4613      	mov	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4a27      	ldr	r2, [pc, #156]	@ (800a780 <xTaskResumeAll+0x128>)
 800a6e4:	441a      	add	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f7fe ff02 	bl	80094f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f6:	4b23      	ldr	r3, [pc, #140]	@ (800a784 <xTaskResumeAll+0x12c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d302      	bcc.n	800a706 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a700:	4b21      	ldr	r3, [pc, #132]	@ (800a788 <xTaskResumeAll+0x130>)
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a706:	4b1c      	ldr	r3, [pc, #112]	@ (800a778 <xTaskResumeAll+0x120>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1cb      	bne.n	800a6a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a714:	f000 fb66 	bl	800ade4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a718:	4b1c      	ldr	r3, [pc, #112]	@ (800a78c <xTaskResumeAll+0x134>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d010      	beq.n	800a746 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a724:	f000 f846 	bl	800a7b4 <xTaskIncrementTick>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a72e:	4b16      	ldr	r3, [pc, #88]	@ (800a788 <xTaskResumeAll+0x130>)
 800a730:	2201      	movs	r2, #1
 800a732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3b01      	subs	r3, #1
 800a738:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1f1      	bne.n	800a724 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a740:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <xTaskResumeAll+0x134>)
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a746:	4b10      	ldr	r3, [pc, #64]	@ (800a788 <xTaskResumeAll+0x130>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d009      	beq.n	800a762 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a74e:	2301      	movs	r3, #1
 800a750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a752:	4b0f      	ldr	r3, [pc, #60]	@ (800a790 <xTaskResumeAll+0x138>)
 800a754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a762:	f001 f8fb 	bl	800b95c <vPortExitCritical>

	return xAlreadyYielded;
 800a766:	68bb      	ldr	r3, [r7, #8]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20001ac4 	.word	0x20001ac4
 800a774:	20001a9c 	.word	0x20001a9c
 800a778:	20001a5c 	.word	0x20001a5c
 800a77c:	20001aa4 	.word	0x20001aa4
 800a780:	200015cc 	.word	0x200015cc
 800a784:	200015c8 	.word	0x200015c8
 800a788:	20001ab0 	.word	0x20001ab0
 800a78c:	20001aac 	.word	0x20001aac
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a79a:	4b05      	ldr	r3, [pc, #20]	@ (800a7b0 <xTaskGetTickCount+0x1c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7a0:	687b      	ldr	r3, [r7, #4]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20001aa0 	.word	0x20001aa0

0800a7b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7be:	4b4f      	ldr	r3, [pc, #316]	@ (800a8fc <xTaskIncrementTick+0x148>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 8090 	bne.w	800a8e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7c8:	4b4d      	ldr	r3, [pc, #308]	@ (800a900 <xTaskIncrementTick+0x14c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7d0:	4a4b      	ldr	r2, [pc, #300]	@ (800a900 <xTaskIncrementTick+0x14c>)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d121      	bne.n	800a820 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7dc:	4b49      	ldr	r3, [pc, #292]	@ (800a904 <xTaskIncrementTick+0x150>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00b      	beq.n	800a7fe <xTaskIncrementTick+0x4a>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	603b      	str	r3, [r7, #0]
}
 800a7f8:	bf00      	nop
 800a7fa:	bf00      	nop
 800a7fc:	e7fd      	b.n	800a7fa <xTaskIncrementTick+0x46>
 800a7fe:	4b41      	ldr	r3, [pc, #260]	@ (800a904 <xTaskIncrementTick+0x150>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	4b40      	ldr	r3, [pc, #256]	@ (800a908 <xTaskIncrementTick+0x154>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a3e      	ldr	r2, [pc, #248]	@ (800a904 <xTaskIncrementTick+0x150>)
 800a80a:	6013      	str	r3, [r2, #0]
 800a80c:	4a3e      	ldr	r2, [pc, #248]	@ (800a908 <xTaskIncrementTick+0x154>)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	4b3e      	ldr	r3, [pc, #248]	@ (800a90c <xTaskIncrementTick+0x158>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	4a3c      	ldr	r2, [pc, #240]	@ (800a90c <xTaskIncrementTick+0x158>)
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	f000 fae2 	bl	800ade4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a820:	4b3b      	ldr	r3, [pc, #236]	@ (800a910 <xTaskIncrementTick+0x15c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	d349      	bcc.n	800a8be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a82a:	4b36      	ldr	r3, [pc, #216]	@ (800a904 <xTaskIncrementTick+0x150>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d104      	bne.n	800a83e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a834:	4b36      	ldr	r3, [pc, #216]	@ (800a910 <xTaskIncrementTick+0x15c>)
 800a836:	f04f 32ff 	mov.w	r2, #4294967295
 800a83a:	601a      	str	r2, [r3, #0]
					break;
 800a83c:	e03f      	b.n	800a8be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a83e:	4b31      	ldr	r3, [pc, #196]	@ (800a904 <xTaskIncrementTick+0x150>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d203      	bcs.n	800a85e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a856:	4a2e      	ldr	r2, [pc, #184]	@ (800a910 <xTaskIncrementTick+0x15c>)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a85c:	e02f      	b.n	800a8be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	3304      	adds	r3, #4
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fea4 	bl	80095b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	3318      	adds	r3, #24
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe fe9b 	bl	80095b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87e:	4b25      	ldr	r3, [pc, #148]	@ (800a914 <xTaskIncrementTick+0x160>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d903      	bls.n	800a88e <xTaskIncrementTick+0xda>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88a:	4a22      	ldr	r2, [pc, #136]	@ (800a914 <xTaskIncrementTick+0x160>)
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4a1f      	ldr	r2, [pc, #124]	@ (800a918 <xTaskIncrementTick+0x164>)
 800a89c:	441a      	add	r2, r3
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	f7fe fe26 	bl	80094f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a91c <xTaskIncrementTick+0x168>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d3b8      	bcc.n	800a82a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8bc:	e7b5      	b.n	800a82a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8be:	4b17      	ldr	r3, [pc, #92]	@ (800a91c <xTaskIncrementTick+0x168>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c4:	4914      	ldr	r1, [pc, #80]	@ (800a918 <xTaskIncrementTick+0x164>)
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d901      	bls.n	800a8da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8da:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <xTaskIncrementTick+0x16c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e004      	b.n	800a8f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a924 <xTaskIncrementTick+0x170>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a0d      	ldr	r2, [pc, #52]	@ (800a924 <xTaskIncrementTick+0x170>)
 800a8f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8f2:	697b      	ldr	r3, [r7, #20]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20001ac4 	.word	0x20001ac4
 800a900:	20001aa0 	.word	0x20001aa0
 800a904:	20001a54 	.word	0x20001a54
 800a908:	20001a58 	.word	0x20001a58
 800a90c:	20001ab4 	.word	0x20001ab4
 800a910:	20001abc 	.word	0x20001abc
 800a914:	20001aa4 	.word	0x20001aa4
 800a918:	200015cc 	.word	0x200015cc
 800a91c:	200015c8 	.word	0x200015c8
 800a920:	20001ab0 	.word	0x20001ab0
 800a924:	20001aac 	.word	0x20001aac

0800a928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a92e:	4b2b      	ldr	r3, [pc, #172]	@ (800a9dc <vTaskSwitchContext+0xb4>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a936:	4b2a      	ldr	r3, [pc, #168]	@ (800a9e0 <vTaskSwitchContext+0xb8>)
 800a938:	2201      	movs	r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a93c:	e047      	b.n	800a9ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a93e:	4b28      	ldr	r3, [pc, #160]	@ (800a9e0 <vTaskSwitchContext+0xb8>)
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a944:	4b27      	ldr	r3, [pc, #156]	@ (800a9e4 <vTaskSwitchContext+0xbc>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e011      	b.n	800a970 <vTaskSwitchContext+0x48>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <vTaskSwitchContext+0x42>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	607b      	str	r3, [r7, #4]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <vTaskSwitchContext+0x3e>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	491d      	ldr	r1, [pc, #116]	@ (800a9e8 <vTaskSwitchContext+0xc0>)
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	440b      	add	r3, r1
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d0e3      	beq.n	800a94c <vTaskSwitchContext+0x24>
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4a16      	ldr	r2, [pc, #88]	@ (800a9e8 <vTaskSwitchContext+0xc0>)
 800a990:	4413      	add	r3, r2
 800a992:	60bb      	str	r3, [r7, #8]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	605a      	str	r2, [r3, #4]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d104      	bne.n	800a9b4 <vTaskSwitchContext+0x8c>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	605a      	str	r2, [r3, #4]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a9ec <vTaskSwitchContext+0xc4>)
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	4a09      	ldr	r2, [pc, #36]	@ (800a9e4 <vTaskSwitchContext+0xbc>)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9c4:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <vTaskSwitchContext+0xc4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3354      	adds	r3, #84	@ 0x54
 800a9ca:	4a09      	ldr	r2, [pc, #36]	@ (800a9f0 <vTaskSwitchContext+0xc8>)
 800a9cc:	6013      	str	r3, [r2, #0]
}
 800a9ce:	bf00      	nop
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	20001ac4 	.word	0x20001ac4
 800a9e0:	20001ab0 	.word	0x20001ab0
 800a9e4:	20001aa4 	.word	0x20001aa4
 800a9e8:	200015cc 	.word	0x200015cc
 800a9ec:	200015c8 	.word	0x200015c8
 800a9f0:	200000e0 	.word	0x200000e0

0800a9f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10b      	bne.n	800aa1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	60fb      	str	r3, [r7, #12]
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	e7fd      	b.n	800aa18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa1c:	4b07      	ldr	r3, [pc, #28]	@ (800aa3c <vTaskPlaceOnEventList+0x48>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3318      	adds	r3, #24
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7fe fd8a 	bl	800953e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	6838      	ldr	r0, [r7, #0]
 800aa2e:	f000 fa87 	bl	800af40 <prvAddCurrentTaskToDelayedList>
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	200015c8 	.word	0x200015c8

0800aa40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10b      	bne.n	800aa6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	617b      	str	r3, [r7, #20]
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	e7fd      	b.n	800aa66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa94 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3318      	adds	r3, #24
 800aa70:	4619      	mov	r1, r3
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7fe fd3f 	bl	80094f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	68b8      	ldr	r0, [r7, #8]
 800aa88:	f000 fa5a 	bl	800af40 <prvAddCurrentTaskToDelayedList>
	}
 800aa8c:	bf00      	nop
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	200015c8 	.word	0x200015c8

0800aa98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	60fb      	str	r3, [r7, #12]
}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	e7fd      	b.n	800aac2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3318      	adds	r3, #24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fd70 	bl	80095b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aad0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab48 <xTaskRemoveFromEventList+0xb0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11d      	bne.n	800ab14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	3304      	adds	r3, #4
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fd67 	bl	80095b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae6:	4b19      	ldr	r3, [pc, #100]	@ (800ab4c <xTaskRemoveFromEventList+0xb4>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d903      	bls.n	800aaf6 <xTaskRemoveFromEventList+0x5e>
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf2:	4a16      	ldr	r2, [pc, #88]	@ (800ab4c <xTaskRemoveFromEventList+0xb4>)
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4a13      	ldr	r2, [pc, #76]	@ (800ab50 <xTaskRemoveFromEventList+0xb8>)
 800ab04:	441a      	add	r2, r3
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f7fe fcf2 	bl	80094f6 <vListInsertEnd>
 800ab12:	e005      	b.n	800ab20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	3318      	adds	r3, #24
 800ab18:	4619      	mov	r1, r3
 800ab1a:	480e      	ldr	r0, [pc, #56]	@ (800ab54 <xTaskRemoveFromEventList+0xbc>)
 800ab1c:	f7fe fceb 	bl	80094f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab24:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <xTaskRemoveFromEventList+0xc0>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d905      	bls.n	800ab3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab32:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <xTaskRemoveFromEventList+0xc4>)
 800ab34:	2201      	movs	r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	e001      	b.n	800ab3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab3e:	697b      	ldr	r3, [r7, #20]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3718      	adds	r7, #24
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	20001ac4 	.word	0x20001ac4
 800ab4c:	20001aa4 	.word	0x20001aa4
 800ab50:	200015cc 	.word	0x200015cc
 800ab54:	20001a5c 	.word	0x20001a5c
 800ab58:	200015c8 	.word	0x200015c8
 800ab5c:	20001ab0 	.word	0x20001ab0

0800ab60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab68:	4b06      	ldr	r3, [pc, #24]	@ (800ab84 <vTaskInternalSetTimeOutState+0x24>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab70:	4b05      	ldr	r3, [pc, #20]	@ (800ab88 <vTaskInternalSetTimeOutState+0x28>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	605a      	str	r2, [r3, #4]
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	20001ab4 	.word	0x20001ab4
 800ab88:	20001aa0 	.word	0x20001aa0

0800ab8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10b      	bne.n	800abb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	613b      	str	r3, [r7, #16]
}
 800abae:	bf00      	nop
 800abb0:	bf00      	nop
 800abb2:	e7fd      	b.n	800abb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10b      	bne.n	800abd2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	60fb      	str	r3, [r7, #12]
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	e7fd      	b.n	800abce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800abd2:	f000 fe91 	bl	800b8f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac4c <xTaskCheckForTimeOut+0xc0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abee:	d102      	bne.n	800abf6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	e023      	b.n	800ac3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	4b15      	ldr	r3, [pc, #84]	@ (800ac50 <xTaskCheckForTimeOut+0xc4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d007      	beq.n	800ac12 <xTaskCheckForTimeOut+0x86>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e015      	b.n	800ac3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d20b      	bcs.n	800ac34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff ff99 	bl	800ab60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e004      	b.n	800ac3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac3e:	f000 fe8d 	bl	800b95c <vPortExitCritical>

	return xReturn;
 800ac42:	69fb      	ldr	r3, [r7, #28]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3720      	adds	r7, #32
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20001aa0 	.word	0x20001aa0
 800ac50:	20001ab4 	.word	0x20001ab4

0800ac54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac58:	4b03      	ldr	r3, [pc, #12]	@ (800ac68 <vTaskMissedYield+0x14>)
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
}
 800ac5e:	bf00      	nop
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20001ab0 	.word	0x20001ab0

0800ac6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac74:	f000 f852 	bl	800ad1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac78:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <prvIdleTask+0x28>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d9f9      	bls.n	800ac74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac80:	4b05      	ldr	r3, [pc, #20]	@ (800ac98 <prvIdleTask+0x2c>)
 800ac82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac90:	e7f0      	b.n	800ac74 <prvIdleTask+0x8>
 800ac92:	bf00      	nop
 800ac94:	200015cc 	.word	0x200015cc
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca2:	2300      	movs	r3, #0
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	e00c      	b.n	800acc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4a12      	ldr	r2, [pc, #72]	@ (800acfc <prvInitialiseTaskLists+0x60>)
 800acb4:	4413      	add	r3, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe fbf0 	bl	800949c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3301      	adds	r3, #1
 800acc0:	607b      	str	r3, [r7, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b37      	cmp	r3, #55	@ 0x37
 800acc6:	d9ef      	bls.n	800aca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acc8:	480d      	ldr	r0, [pc, #52]	@ (800ad00 <prvInitialiseTaskLists+0x64>)
 800acca:	f7fe fbe7 	bl	800949c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acce:	480d      	ldr	r0, [pc, #52]	@ (800ad04 <prvInitialiseTaskLists+0x68>)
 800acd0:	f7fe fbe4 	bl	800949c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acd4:	480c      	ldr	r0, [pc, #48]	@ (800ad08 <prvInitialiseTaskLists+0x6c>)
 800acd6:	f7fe fbe1 	bl	800949c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acda:	480c      	ldr	r0, [pc, #48]	@ (800ad0c <prvInitialiseTaskLists+0x70>)
 800acdc:	f7fe fbde 	bl	800949c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ace0:	480b      	ldr	r0, [pc, #44]	@ (800ad10 <prvInitialiseTaskLists+0x74>)
 800ace2:	f7fe fbdb 	bl	800949c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ace6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad14 <prvInitialiseTaskLists+0x78>)
 800ace8:	4a05      	ldr	r2, [pc, #20]	@ (800ad00 <prvInitialiseTaskLists+0x64>)
 800acea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acec:	4b0a      	ldr	r3, [pc, #40]	@ (800ad18 <prvInitialiseTaskLists+0x7c>)
 800acee:	4a05      	ldr	r2, [pc, #20]	@ (800ad04 <prvInitialiseTaskLists+0x68>)
 800acf0:	601a      	str	r2, [r3, #0]
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	200015cc 	.word	0x200015cc
 800ad00:	20001a2c 	.word	0x20001a2c
 800ad04:	20001a40 	.word	0x20001a40
 800ad08:	20001a5c 	.word	0x20001a5c
 800ad0c:	20001a70 	.word	0x20001a70
 800ad10:	20001a88 	.word	0x20001a88
 800ad14:	20001a54 	.word	0x20001a54
 800ad18:	20001a58 	.word	0x20001a58

0800ad1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad22:	e019      	b.n	800ad58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad24:	f000 fde8 	bl	800b8f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad28:	4b10      	ldr	r3, [pc, #64]	@ (800ad6c <prvCheckTasksWaitingTermination+0x50>)
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe fc3b 	bl	80095b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad70 <prvCheckTasksWaitingTermination+0x54>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	4a0b      	ldr	r2, [pc, #44]	@ (800ad70 <prvCheckTasksWaitingTermination+0x54>)
 800ad42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad44:	4b0b      	ldr	r3, [pc, #44]	@ (800ad74 <prvCheckTasksWaitingTermination+0x58>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ad74 <prvCheckTasksWaitingTermination+0x58>)
 800ad4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad4e:	f000 fe05 	bl	800b95c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f810 	bl	800ad78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad58:	4b06      	ldr	r3, [pc, #24]	@ (800ad74 <prvCheckTasksWaitingTermination+0x58>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e1      	bne.n	800ad24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20001a70 	.word	0x20001a70
 800ad70:	20001a9c 	.word	0x20001a9c
 800ad74:	20001a84 	.word	0x20001a84

0800ad78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3354      	adds	r3, #84	@ 0x54
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 fb4f 	bl	800c428 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d108      	bne.n	800ada6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 ff9d 	bl	800bcd8 <vPortFree>
				vPortFree( pxTCB );
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 ff9a 	bl	800bcd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ada4:	e019      	b.n	800adda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800adac:	2b01      	cmp	r3, #1
 800adae:	d103      	bne.n	800adb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 ff91 	bl	800bcd8 <vPortFree>
	}
 800adb6:	e010      	b.n	800adda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d00b      	beq.n	800adda <prvDeleteTCB+0x62>
	__asm volatile
 800adc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc6:	f383 8811 	msr	BASEPRI, r3
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	60fb      	str	r3, [r7, #12]
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	e7fd      	b.n	800add6 <prvDeleteTCB+0x5e>
	}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
	...

0800ade4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adea:	4b0c      	ldr	r3, [pc, #48]	@ (800ae1c <prvResetNextTaskUnblockTime+0x38>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d104      	bne.n	800adfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ae20 <prvResetNextTaskUnblockTime+0x3c>)
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adfc:	e008      	b.n	800ae10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfe:	4b07      	ldr	r3, [pc, #28]	@ (800ae1c <prvResetNextTaskUnblockTime+0x38>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4a04      	ldr	r2, [pc, #16]	@ (800ae20 <prvResetNextTaskUnblockTime+0x3c>)
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	20001a54 	.word	0x20001a54
 800ae20:	20001abc 	.word	0x20001abc

0800ae24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae58 <xTaskGetSchedulerState+0x34>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d102      	bne.n	800ae38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae32:	2301      	movs	r3, #1
 800ae34:	607b      	str	r3, [r7, #4]
 800ae36:	e008      	b.n	800ae4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae38:	4b08      	ldr	r3, [pc, #32]	@ (800ae5c <xTaskGetSchedulerState+0x38>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae40:	2302      	movs	r3, #2
 800ae42:	607b      	str	r3, [r7, #4]
 800ae44:	e001      	b.n	800ae4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae4a:	687b      	ldr	r3, [r7, #4]
	}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	20001aa8 	.word	0x20001aa8
 800ae5c:	20001ac4 	.word	0x20001ac4

0800ae60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d058      	beq.n	800af28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae76:	4b2f      	ldr	r3, [pc, #188]	@ (800af34 <xTaskPriorityDisinherit+0xd4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d00b      	beq.n	800ae98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10b      	bne.n	800aeb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	60bb      	str	r3, [r7, #8]
}
 800aeb2:	bf00      	nop
 800aeb4:	bf00      	nop
 800aeb6:	e7fd      	b.n	800aeb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aebc:	1e5a      	subs	r2, r3, #1
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d02c      	beq.n	800af28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d128      	bne.n	800af28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe fb68 	bl	80095b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef8:	4b0f      	ldr	r3, [pc, #60]	@ (800af38 <xTaskPriorityDisinherit+0xd8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d903      	bls.n	800af08 <xTaskPriorityDisinherit+0xa8>
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af04:	4a0c      	ldr	r2, [pc, #48]	@ (800af38 <xTaskPriorityDisinherit+0xd8>)
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4a09      	ldr	r2, [pc, #36]	@ (800af3c <xTaskPriorityDisinherit+0xdc>)
 800af16:	441a      	add	r2, r3
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4610      	mov	r0, r2
 800af20:	f7fe fae9 	bl	80094f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af24:	2301      	movs	r3, #1
 800af26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af28:	697b      	ldr	r3, [r7, #20]
	}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200015c8 	.word	0x200015c8
 800af38:	20001aa4 	.word	0x20001aa4
 800af3c:	200015cc 	.word	0x200015cc

0800af40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af4a:	4b21      	ldr	r3, [pc, #132]	@ (800afd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af50:	4b20      	ldr	r3, [pc, #128]	@ (800afd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3304      	adds	r3, #4
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fb2a 	bl	80095b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af62:	d10a      	bne.n	800af7a <prvAddCurrentTaskToDelayedList+0x3a>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af6a:	4b1a      	ldr	r3, [pc, #104]	@ (800afd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3304      	adds	r3, #4
 800af70:	4619      	mov	r1, r3
 800af72:	4819      	ldr	r0, [pc, #100]	@ (800afd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800af74:	f7fe fabf 	bl	80094f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af78:	e026      	b.n	800afc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4413      	add	r3, r2
 800af80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af82:	4b14      	ldr	r3, [pc, #80]	@ (800afd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d209      	bcs.n	800afa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af92:	4b12      	ldr	r3, [pc, #72]	@ (800afdc <prvAddCurrentTaskToDelayedList+0x9c>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	4b0f      	ldr	r3, [pc, #60]	@ (800afd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7fe facd 	bl	800953e <vListInsert>
}
 800afa4:	e010      	b.n	800afc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afa6:	4b0e      	ldr	r3, [pc, #56]	@ (800afe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	4b0a      	ldr	r3, [pc, #40]	@ (800afd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3304      	adds	r3, #4
 800afb0:	4619      	mov	r1, r3
 800afb2:	4610      	mov	r0, r2
 800afb4:	f7fe fac3 	bl	800953e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800afb8:	4b0a      	ldr	r3, [pc, #40]	@ (800afe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d202      	bcs.n	800afc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800afc2:	4a08      	ldr	r2, [pc, #32]	@ (800afe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	6013      	str	r3, [r2, #0]
}
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20001aa0 	.word	0x20001aa0
 800afd4:	200015c8 	.word	0x200015c8
 800afd8:	20001a88 	.word	0x20001a88
 800afdc:	20001a58 	.word	0x20001a58
 800afe0:	20001a54 	.word	0x20001a54
 800afe4:	20001abc 	.word	0x20001abc

0800afe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08a      	sub	sp, #40	@ 0x28
 800afec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aff2:	f000 fb13 	bl	800b61c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aff6:	4b1d      	ldr	r3, [pc, #116]	@ (800b06c <xTimerCreateTimerTask+0x84>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d021      	beq.n	800b042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b006:	1d3a      	adds	r2, r7, #4
 800b008:	f107 0108 	add.w	r1, r7, #8
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	4618      	mov	r0, r3
 800b012:	f7fe fa29 	bl	8009468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	9202      	str	r2, [sp, #8]
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	2302      	movs	r3, #2
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	2300      	movs	r3, #0
 800b026:	460a      	mov	r2, r1
 800b028:	4911      	ldr	r1, [pc, #68]	@ (800b070 <xTimerCreateTimerTask+0x88>)
 800b02a:	4812      	ldr	r0, [pc, #72]	@ (800b074 <xTimerCreateTimerTask+0x8c>)
 800b02c:	f7ff f8a2 	bl	800a174 <xTaskCreateStatic>
 800b030:	4603      	mov	r3, r0
 800b032:	4a11      	ldr	r2, [pc, #68]	@ (800b078 <xTimerCreateTimerTask+0x90>)
 800b034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b036:	4b10      	ldr	r3, [pc, #64]	@ (800b078 <xTimerCreateTimerTask+0x90>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b03e:	2301      	movs	r3, #1
 800b040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	613b      	str	r3, [r7, #16]
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	e7fd      	b.n	800b05c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b060:	697b      	ldr	r3, [r7, #20]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20001af8 	.word	0x20001af8
 800b070:	0800db20 	.word	0x0800db20
 800b074:	0800b1b5 	.word	0x0800b1b5
 800b078:	20001afc 	.word	0x20001afc

0800b07c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	@ 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10b      	bne.n	800b0ac <xTimerGenericCommand+0x30>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	623b      	str	r3, [r7, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b0ac:	4b19      	ldr	r3, [pc, #100]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d02a      	beq.n	800b10a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	dc18      	bgt.n	800b0f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0c6:	f7ff fead 	bl	800ae24 <xTaskGetSchedulerState>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d109      	bne.n	800b0e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0d0:	4b10      	ldr	r3, [pc, #64]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	f107 0110 	add.w	r1, r7, #16
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0dc:	f7fe fbd8 	bl	8009890 <xQueueGenericSend>
 800b0e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0e2:	e012      	b.n	800b10a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0e6:	6818      	ldr	r0, [r3, #0]
 800b0e8:	f107 0110 	add.w	r1, r7, #16
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f7fe fbce 	bl	8009890 <xQueueGenericSend>
 800b0f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0f6:	e008      	b.n	800b10a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0f8:	4b06      	ldr	r3, [pc, #24]	@ (800b114 <xTimerGenericCommand+0x98>)
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	f107 0110 	add.w	r1, r7, #16
 800b100:	2300      	movs	r3, #0
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	f7fe fcc6 	bl	8009a94 <xQueueGenericSendFromISR>
 800b108:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3728      	adds	r7, #40	@ 0x28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20001af8 	.word	0x20001af8

0800b118 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af02      	add	r7, sp, #8
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b122:	4b23      	ldr	r3, [pc, #140]	@ (800b1b0 <prvProcessExpiredTimer+0x98>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3304      	adds	r3, #4
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe fa3d 	bl	80095b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d023      	beq.n	800b18c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	699a      	ldr	r2, [r3, #24]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	18d1      	adds	r1, r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	6978      	ldr	r0, [r7, #20]
 800b152:	f000 f8d5 	bl	800b300 <prvInsertTimerInActiveList>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d020      	beq.n	800b19e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b15c:	2300      	movs	r3, #0
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	2100      	movs	r1, #0
 800b166:	6978      	ldr	r0, [r7, #20]
 800b168:	f7ff ff88 	bl	800b07c <xTimerGenericCommand>
 800b16c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d114      	bne.n	800b19e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	60fb      	str	r3, [r7, #12]
}
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	e7fd      	b.n	800b188 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b192:	f023 0301 	bic.w	r3, r3, #1
 800b196:	b2da      	uxtb	r2, r3
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	6978      	ldr	r0, [r7, #20]
 800b1a4:	4798      	blx	r3
}
 800b1a6:	bf00      	nop
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20001af0 	.word	0x20001af0

0800b1b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 f859 	bl	800b278 <prvGetNextExpireTime>
 800b1c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 f805 	bl	800b1dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1d2:	f000 f8d7 	bl	800b384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1d6:	bf00      	nop
 800b1d8:	e7f0      	b.n	800b1bc <prvTimerTask+0x8>
	...

0800b1dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1e6:	f7ff fa29 	bl	800a63c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f866 	bl	800b2c0 <prvSampleTimeNow>
 800b1f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d130      	bne.n	800b25e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <prvProcessTimerOrBlockTask+0x3c>
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	429a      	cmp	r2, r3
 800b208:	d806      	bhi.n	800b218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b20a:	f7ff fa25 	bl	800a658 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b20e:	68f9      	ldr	r1, [r7, #12]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ff81 	bl	800b118 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b216:	e024      	b.n	800b262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d008      	beq.n	800b230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b21e:	4b13      	ldr	r3, [pc, #76]	@ (800b26c <prvProcessTimerOrBlockTask+0x90>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <prvProcessTimerOrBlockTask+0x50>
 800b228:	2301      	movs	r3, #1
 800b22a:	e000      	b.n	800b22e <prvProcessTimerOrBlockTask+0x52>
 800b22c:	2300      	movs	r3, #0
 800b22e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b230:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <prvProcessTimerOrBlockTask+0x94>)
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	4619      	mov	r1, r3
 800b23e:	f7fe ff65 	bl	800a10c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b242:	f7ff fa09 	bl	800a658 <xTaskResumeAll>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b24c:	4b09      	ldr	r3, [pc, #36]	@ (800b274 <prvProcessTimerOrBlockTask+0x98>)
 800b24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	f3bf 8f6f 	isb	sy
}
 800b25c:	e001      	b.n	800b262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b25e:	f7ff f9fb 	bl	800a658 <xTaskResumeAll>
}
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20001af4 	.word	0x20001af4
 800b270:	20001af8 	.word	0x20001af8
 800b274:	e000ed04 	.word	0xe000ed04

0800b278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b280:	4b0e      	ldr	r3, [pc, #56]	@ (800b2bc <prvGetNextExpireTime+0x44>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <prvGetNextExpireTime+0x16>
 800b28a:	2201      	movs	r2, #1
 800b28c:	e000      	b.n	800b290 <prvGetNextExpireTime+0x18>
 800b28e:	2200      	movs	r2, #0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d105      	bne.n	800b2a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b29c:	4b07      	ldr	r3, [pc, #28]	@ (800b2bc <prvGetNextExpireTime+0x44>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e001      	b.n	800b2ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20001af0 	.word	0x20001af0

0800b2c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b2c8:	f7ff fa64 	bl	800a794 <xTaskGetTickCount>
 800b2cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <prvSampleTimeNow+0x3c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d205      	bcs.n	800b2e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2d8:	f000 f93a 	bl	800b550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e002      	b.n	800b2ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2ea:	4a04      	ldr	r2, [pc, #16]	@ (800b2fc <prvSampleTimeNow+0x3c>)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20001b00 	.word	0x20001b00

0800b300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	429a      	cmp	r2, r3
 800b324:	d812      	bhi.n	800b34c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	1ad2      	subs	r2, r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	429a      	cmp	r2, r3
 800b332:	d302      	bcc.n	800b33a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b334:	2301      	movs	r3, #1
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e01b      	b.n	800b372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b33a:	4b10      	ldr	r3, [pc, #64]	@ (800b37c <prvInsertTimerInActiveList+0x7c>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3304      	adds	r3, #4
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f7fe f8fa 	bl	800953e <vListInsert>
 800b34a:	e012      	b.n	800b372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d206      	bcs.n	800b362 <prvInsertTimerInActiveList+0x62>
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d302      	bcc.n	800b362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	617b      	str	r3, [r7, #20]
 800b360:	e007      	b.n	800b372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b362:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <prvInsertTimerInActiveList+0x80>)
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3304      	adds	r3, #4
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f7fe f8e6 	bl	800953e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b372:	697b      	ldr	r3, [r7, #20]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20001af4 	.word	0x20001af4
 800b380:	20001af0 	.word	0x20001af0

0800b384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08e      	sub	sp, #56	@ 0x38
 800b388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b38a:	e0ce      	b.n	800b52a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da19      	bge.n	800b3c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b392:	1d3b      	adds	r3, r7, #4
 800b394:	3304      	adds	r3, #4
 800b396:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10b      	bne.n	800b3b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	61fb      	str	r3, [r7, #28]
}
 800b3b0:	bf00      	nop
 800b3b2:	bf00      	nop
 800b3b4:	e7fd      	b.n	800b3b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3bc:	6850      	ldr	r0, [r2, #4]
 800b3be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3c0:	6892      	ldr	r2, [r2, #8]
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f2c0 80ae 	blt.w	800b52a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d004      	beq.n	800b3e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3dc:	3304      	adds	r3, #4
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe f8e6 	bl	80095b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3e4:	463b      	mov	r3, r7
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7ff ff6a 	bl	800b2c0 <prvSampleTimeNow>
 800b3ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b09      	cmp	r3, #9
 800b3f2:	f200 8097 	bhi.w	800b524 <prvProcessReceivedCommands+0x1a0>
 800b3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <prvProcessReceivedCommands+0x78>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b425 	.word	0x0800b425
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b425 	.word	0x0800b425
 800b408:	0800b49b 	.word	0x0800b49b
 800b40c:	0800b4af 	.word	0x0800b4af
 800b410:	0800b4fb 	.word	0x0800b4fb
 800b414:	0800b425 	.word	0x0800b425
 800b418:	0800b425 	.word	0x0800b425
 800b41c:	0800b49b 	.word	0x0800b49b
 800b420:	0800b4af 	.word	0x0800b4af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b42a:	f043 0301 	orr.w	r3, r3, #1
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	18d1      	adds	r1, r2, r3
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b444:	f7ff ff5c 	bl	800b300 <prvInsertTimerInActiveList>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d06c      	beq.n	800b528 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b45c:	f003 0304 	and.w	r3, r3, #4
 800b460:	2b00      	cmp	r3, #0
 800b462:	d061      	beq.n	800b528 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	441a      	add	r2, r3
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2300      	movs	r3, #0
 800b472:	2100      	movs	r1, #0
 800b474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b476:	f7ff fe01 	bl	800b07c <xTimerGenericCommand>
 800b47a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d152      	bne.n	800b528 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	61bb      	str	r3, [r7, #24]
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop
 800b498:	e7fd      	b.n	800b496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4a0:	f023 0301 	bic.w	r3, r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b4ac:	e03d      	b.n	800b52a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4b4:	f043 0301 	orr.w	r3, r3, #1
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10b      	bne.n	800b4e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	617b      	str	r3, [r7, #20]
}
 800b4e0:	bf00      	nop
 800b4e2:	bf00      	nop
 800b4e4:	e7fd      	b.n	800b4e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e8:	699a      	ldr	r2, [r3, #24]
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	18d1      	adds	r1, r2, r3
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f4:	f7ff ff04 	bl	800b300 <prvInsertTimerInActiveList>
					break;
 800b4f8:	e017      	b.n	800b52a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d103      	bne.n	800b510 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b50a:	f000 fbe5 	bl	800bcd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b50e:	e00c      	b.n	800b52a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b516:	f023 0301 	bic.w	r3, r3, #1
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b522:	e002      	b.n	800b52a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b524:	bf00      	nop
 800b526:	e000      	b.n	800b52a <prvProcessReceivedCommands+0x1a6>
					break;
 800b528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b52a:	4b08      	ldr	r3, [pc, #32]	@ (800b54c <prvProcessReceivedCommands+0x1c8>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	1d39      	adds	r1, r7, #4
 800b530:	2200      	movs	r2, #0
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fb4c 	bl	8009bd0 <xQueueReceive>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f47f af26 	bne.w	800b38c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b540:	bf00      	nop
 800b542:	bf00      	nop
 800b544:	3730      	adds	r7, #48	@ 0x30
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20001af8 	.word	0x20001af8

0800b550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b556:	e049      	b.n	800b5ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b558:	4b2e      	ldr	r3, [pc, #184]	@ (800b614 <prvSwitchTimerLists+0xc4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b562:	4b2c      	ldr	r3, [pc, #176]	@ (800b614 <prvSwitchTimerLists+0xc4>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3304      	adds	r3, #4
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe f81d 	bl	80095b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d02f      	beq.n	800b5ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4413      	add	r3, r2
 800b594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d90e      	bls.n	800b5bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b614 <prvSwitchTimerLists+0xc4>)
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7fd ffc2 	bl	800953e <vListInsert>
 800b5ba:	e017      	b.n	800b5ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff fd58 	bl	800b07c <xTimerGenericCommand>
 800b5cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	603b      	str	r3, [r7, #0]
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	e7fd      	b.n	800b5e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5ec:	4b09      	ldr	r3, [pc, #36]	@ (800b614 <prvSwitchTimerLists+0xc4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1b0      	bne.n	800b558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5f6:	4b07      	ldr	r3, [pc, #28]	@ (800b614 <prvSwitchTimerLists+0xc4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5fc:	4b06      	ldr	r3, [pc, #24]	@ (800b618 <prvSwitchTimerLists+0xc8>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a04      	ldr	r2, [pc, #16]	@ (800b614 <prvSwitchTimerLists+0xc4>)
 800b602:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b604:	4a04      	ldr	r2, [pc, #16]	@ (800b618 <prvSwitchTimerLists+0xc8>)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	6013      	str	r3, [r2, #0]
}
 800b60a:	bf00      	nop
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	20001af0 	.word	0x20001af0
 800b618:	20001af4 	.word	0x20001af4

0800b61c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b622:	f000 f969 	bl	800b8f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b626:	4b15      	ldr	r3, [pc, #84]	@ (800b67c <prvCheckForValidListAndQueue+0x60>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d120      	bne.n	800b670 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b62e:	4814      	ldr	r0, [pc, #80]	@ (800b680 <prvCheckForValidListAndQueue+0x64>)
 800b630:	f7fd ff34 	bl	800949c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b634:	4813      	ldr	r0, [pc, #76]	@ (800b684 <prvCheckForValidListAndQueue+0x68>)
 800b636:	f7fd ff31 	bl	800949c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b63a:	4b13      	ldr	r3, [pc, #76]	@ (800b688 <prvCheckForValidListAndQueue+0x6c>)
 800b63c:	4a10      	ldr	r2, [pc, #64]	@ (800b680 <prvCheckForValidListAndQueue+0x64>)
 800b63e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b640:	4b12      	ldr	r3, [pc, #72]	@ (800b68c <prvCheckForValidListAndQueue+0x70>)
 800b642:	4a10      	ldr	r2, [pc, #64]	@ (800b684 <prvCheckForValidListAndQueue+0x68>)
 800b644:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b646:	2300      	movs	r3, #0
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	4b11      	ldr	r3, [pc, #68]	@ (800b690 <prvCheckForValidListAndQueue+0x74>)
 800b64c:	4a11      	ldr	r2, [pc, #68]	@ (800b694 <prvCheckForValidListAndQueue+0x78>)
 800b64e:	2110      	movs	r1, #16
 800b650:	200a      	movs	r0, #10
 800b652:	f7fe f841 	bl	80096d8 <xQueueGenericCreateStatic>
 800b656:	4603      	mov	r3, r0
 800b658:	4a08      	ldr	r2, [pc, #32]	@ (800b67c <prvCheckForValidListAndQueue+0x60>)
 800b65a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b65c:	4b07      	ldr	r3, [pc, #28]	@ (800b67c <prvCheckForValidListAndQueue+0x60>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d005      	beq.n	800b670 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b664:	4b05      	ldr	r3, [pc, #20]	@ (800b67c <prvCheckForValidListAndQueue+0x60>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	490b      	ldr	r1, [pc, #44]	@ (800b698 <prvCheckForValidListAndQueue+0x7c>)
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fd24 	bl	800a0b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b670:	f000 f974 	bl	800b95c <vPortExitCritical>
}
 800b674:	bf00      	nop
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20001af8 	.word	0x20001af8
 800b680:	20001ac8 	.word	0x20001ac8
 800b684:	20001adc 	.word	0x20001adc
 800b688:	20001af0 	.word	0x20001af0
 800b68c:	20001af4 	.word	0x20001af4
 800b690:	20001ba4 	.word	0x20001ba4
 800b694:	20001b04 	.word	0x20001b04
 800b698:	0800db28 	.word	0x0800db28

0800b69c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3b04      	subs	r3, #4
 800b6ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b6b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3b04      	subs	r3, #4
 800b6ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	f023 0201 	bic.w	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3b04      	subs	r3, #4
 800b6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6cc:	4a0c      	ldr	r2, [pc, #48]	@ (800b700 <pxPortInitialiseStack+0x64>)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	3b14      	subs	r3, #20
 800b6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3b04      	subs	r3, #4
 800b6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f06f 0202 	mvn.w	r2, #2
 800b6ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3b20      	subs	r3, #32
 800b6f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	0800b705 	.word	0x0800b705

0800b704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b70e:	4b13      	ldr	r3, [pc, #76]	@ (800b75c <prvTaskExitError+0x58>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d00b      	beq.n	800b730 <prvTaskExitError+0x2c>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	60fb      	str	r3, [r7, #12]
}
 800b72a:	bf00      	nop
 800b72c:	bf00      	nop
 800b72e:	e7fd      	b.n	800b72c <prvTaskExitError+0x28>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	60bb      	str	r3, [r7, #8]
}
 800b742:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b744:	bf00      	nop
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0fc      	beq.n	800b746 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b74c:	bf00      	nop
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	200000d0 	.word	0x200000d0

0800b760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b760:	4b07      	ldr	r3, [pc, #28]	@ (800b780 <pxCurrentTCBConst2>)
 800b762:	6819      	ldr	r1, [r3, #0]
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f380 8809 	msr	PSP, r0
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f04f 0000 	mov.w	r0, #0
 800b776:	f380 8811 	msr	BASEPRI, r0
 800b77a:	4770      	bx	lr
 800b77c:	f3af 8000 	nop.w

0800b780 <pxCurrentTCBConst2>:
 800b780:	200015c8 	.word	0x200015c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop

0800b788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b788:	4808      	ldr	r0, [pc, #32]	@ (800b7ac <prvPortStartFirstTask+0x24>)
 800b78a:	6800      	ldr	r0, [r0, #0]
 800b78c:	6800      	ldr	r0, [r0, #0]
 800b78e:	f380 8808 	msr	MSP, r0
 800b792:	f04f 0000 	mov.w	r0, #0
 800b796:	f380 8814 	msr	CONTROL, r0
 800b79a:	b662      	cpsie	i
 800b79c:	b661      	cpsie	f
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	df00      	svc	0
 800b7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b7aa:	bf00      	nop
 800b7ac:	e000ed08 	.word	0xe000ed08

0800b7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7b6:	4b47      	ldr	r3, [pc, #284]	@ (800b8d4 <xPortStartScheduler+0x124>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a47      	ldr	r2, [pc, #284]	@ (800b8d8 <xPortStartScheduler+0x128>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d10b      	bne.n	800b7d8 <xPortStartScheduler+0x28>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	613b      	str	r3, [r7, #16]
}
 800b7d2:	bf00      	nop
 800b7d4:	bf00      	nop
 800b7d6:	e7fd      	b.n	800b7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7d8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8d4 <xPortStartScheduler+0x124>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b8dc <xPortStartScheduler+0x12c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d10b      	bne.n	800b7fa <xPortStartScheduler+0x4a>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	60fb      	str	r3, [r7, #12]
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop
 800b7f8:	e7fd      	b.n	800b7f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7fa:	4b39      	ldr	r3, [pc, #228]	@ (800b8e0 <xPortStartScheduler+0x130>)
 800b7fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	22ff      	movs	r2, #255	@ 0xff
 800b80a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	4b31      	ldr	r3, [pc, #196]	@ (800b8e4 <xPortStartScheduler+0x134>)
 800b820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b822:	4b31      	ldr	r3, [pc, #196]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b824:	2207      	movs	r2, #7
 800b826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b828:	e009      	b.n	800b83e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b82a:	4b2f      	ldr	r3, [pc, #188]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3b01      	subs	r3, #1
 800b830:	4a2d      	ldr	r2, [pc, #180]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	b2db      	uxtb	r3, r3
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b83e:	78fb      	ldrb	r3, [r7, #3]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b846:	2b80      	cmp	r3, #128	@ 0x80
 800b848:	d0ef      	beq.n	800b82a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b84a:	4b27      	ldr	r3, [pc, #156]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f1c3 0307 	rsb	r3, r3, #7
 800b852:	2b04      	cmp	r3, #4
 800b854:	d00b      	beq.n	800b86e <xPortStartScheduler+0xbe>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60bb      	str	r3, [r7, #8]
}
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	e7fd      	b.n	800b86a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b86e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	021b      	lsls	r3, r3, #8
 800b874:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b878:	4b1b      	ldr	r3, [pc, #108]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b880:	4a19      	ldr	r2, [pc, #100]	@ (800b8e8 <xPortStartScheduler+0x138>)
 800b882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	b2da      	uxtb	r2, r3
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b88c:	4b17      	ldr	r3, [pc, #92]	@ (800b8ec <xPortStartScheduler+0x13c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a16      	ldr	r2, [pc, #88]	@ (800b8ec <xPortStartScheduler+0x13c>)
 800b892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b898:	4b14      	ldr	r3, [pc, #80]	@ (800b8ec <xPortStartScheduler+0x13c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a13      	ldr	r2, [pc, #76]	@ (800b8ec <xPortStartScheduler+0x13c>)
 800b89e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b8a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b8a4:	f000 f8da 	bl	800ba5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b8a8:	4b11      	ldr	r3, [pc, #68]	@ (800b8f0 <xPortStartScheduler+0x140>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b8ae:	f000 f8f9 	bl	800baa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8b2:	4b10      	ldr	r3, [pc, #64]	@ (800b8f4 <xPortStartScheduler+0x144>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800b8f4 <xPortStartScheduler+0x144>)
 800b8b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b8bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8be:	f7ff ff63 	bl	800b788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8c2:	f7ff f831 	bl	800a928 <vTaskSwitchContext>
	prvTaskExitError();
 800b8c6:	f7ff ff1d 	bl	800b704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	e000ed00 	.word	0xe000ed00
 800b8d8:	410fc271 	.word	0x410fc271
 800b8dc:	410fc270 	.word	0x410fc270
 800b8e0:	e000e400 	.word	0xe000e400
 800b8e4:	20001bf4 	.word	0x20001bf4
 800b8e8:	20001bf8 	.word	0x20001bf8
 800b8ec:	e000ed20 	.word	0xe000ed20
 800b8f0:	200000d0 	.word	0x200000d0
 800b8f4:	e000ef34 	.word	0xe000ef34

0800b8f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	607b      	str	r3, [r7, #4]
}
 800b910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b912:	4b10      	ldr	r3, [pc, #64]	@ (800b954 <vPortEnterCritical+0x5c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3301      	adds	r3, #1
 800b918:	4a0e      	ldr	r2, [pc, #56]	@ (800b954 <vPortEnterCritical+0x5c>)
 800b91a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b91c:	4b0d      	ldr	r3, [pc, #52]	@ (800b954 <vPortEnterCritical+0x5c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d110      	bne.n	800b946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b924:	4b0c      	ldr	r3, [pc, #48]	@ (800b958 <vPortEnterCritical+0x60>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00b      	beq.n	800b946 <vPortEnterCritical+0x4e>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	603b      	str	r3, [r7, #0]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <vPortEnterCritical+0x4a>
	}
}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	200000d0 	.word	0x200000d0
 800b958:	e000ed04 	.word	0xe000ed04

0800b95c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b962:	4b12      	ldr	r3, [pc, #72]	@ (800b9ac <vPortExitCritical+0x50>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10b      	bne.n	800b982 <vPortExitCritical+0x26>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	607b      	str	r3, [r7, #4]
}
 800b97c:	bf00      	nop
 800b97e:	bf00      	nop
 800b980:	e7fd      	b.n	800b97e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b982:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <vPortExitCritical+0x50>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3b01      	subs	r3, #1
 800b988:	4a08      	ldr	r2, [pc, #32]	@ (800b9ac <vPortExitCritical+0x50>)
 800b98a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b98c:	4b07      	ldr	r3, [pc, #28]	@ (800b9ac <vPortExitCritical+0x50>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d105      	bne.n	800b9a0 <vPortExitCritical+0x44>
 800b994:	2300      	movs	r3, #0
 800b996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	f383 8811 	msr	BASEPRI, r3
}
 800b99e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	200000d0 	.word	0x200000d0

0800b9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9b0:	f3ef 8009 	mrs	r0, PSP
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	4b15      	ldr	r3, [pc, #84]	@ (800ba10 <pxCurrentTCBConst>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	f01e 0f10 	tst.w	lr, #16
 800b9c0:	bf08      	it	eq
 800b9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ca:	6010      	str	r0, [r2, #0]
 800b9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9d4:	f380 8811 	msr	BASEPRI, r0
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f7fe ffa2 	bl	800a928 <vTaskSwitchContext>
 800b9e4:	f04f 0000 	mov.w	r0, #0
 800b9e8:	f380 8811 	msr	BASEPRI, r0
 800b9ec:	bc09      	pop	{r0, r3}
 800b9ee:	6819      	ldr	r1, [r3, #0]
 800b9f0:	6808      	ldr	r0, [r1, #0]
 800b9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f6:	f01e 0f10 	tst.w	lr, #16
 800b9fa:	bf08      	it	eq
 800b9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba00:	f380 8809 	msr	PSP, r0
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	f3af 8000 	nop.w

0800ba10 <pxCurrentTCBConst>:
 800ba10:	200015c8 	.word	0x200015c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop

0800ba18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	607b      	str	r3, [r7, #4]
}
 800ba30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba32:	f7fe febf 	bl	800a7b4 <xTaskIncrementTick>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba3c:	4b06      	ldr	r3, [pc, #24]	@ (800ba58 <xPortSysTickHandler+0x40>)
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	2300      	movs	r3, #0
 800ba46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	f383 8811 	msr	BASEPRI, r3
}
 800ba4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	e000ed04 	.word	0xe000ed04

0800ba5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba60:	4b0b      	ldr	r3, [pc, #44]	@ (800ba90 <vPortSetupTimerInterrupt+0x34>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba66:	4b0b      	ldr	r3, [pc, #44]	@ (800ba94 <vPortSetupTimerInterrupt+0x38>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba98 <vPortSetupTimerInterrupt+0x3c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a0a      	ldr	r2, [pc, #40]	@ (800ba9c <vPortSetupTimerInterrupt+0x40>)
 800ba72:	fba2 2303 	umull	r2, r3, r2, r3
 800ba76:	099b      	lsrs	r3, r3, #6
 800ba78:	4a09      	ldr	r2, [pc, #36]	@ (800baa0 <vPortSetupTimerInterrupt+0x44>)
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba7e:	4b04      	ldr	r3, [pc, #16]	@ (800ba90 <vPortSetupTimerInterrupt+0x34>)
 800ba80:	2207      	movs	r2, #7
 800ba82:	601a      	str	r2, [r3, #0]
}
 800ba84:	bf00      	nop
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	e000e010 	.word	0xe000e010
 800ba94:	e000e018 	.word	0xe000e018
 800ba98:	20000078 	.word	0x20000078
 800ba9c:	10624dd3 	.word	0x10624dd3
 800baa0:	e000e014 	.word	0xe000e014

0800baa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800baa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bab4 <vPortEnableVFP+0x10>
 800baa8:	6801      	ldr	r1, [r0, #0]
 800baaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800baae:	6001      	str	r1, [r0, #0]
 800bab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bab2:	bf00      	nop
 800bab4:	e000ed88 	.word	0xe000ed88

0800bab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800babe:	f3ef 8305 	mrs	r3, IPSR
 800bac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b0f      	cmp	r3, #15
 800bac8:	d915      	bls.n	800baf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800baca:	4a18      	ldr	r2, [pc, #96]	@ (800bb2c <vPortValidateInterruptPriority+0x74>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4413      	add	r3, r2
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bad4:	4b16      	ldr	r3, [pc, #88]	@ (800bb30 <vPortValidateInterruptPriority+0x78>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	7afa      	ldrb	r2, [r7, #11]
 800bada:	429a      	cmp	r2, r3
 800badc:	d20b      	bcs.n	800baf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	607b      	str	r3, [r7, #4]
}
 800baf0:	bf00      	nop
 800baf2:	bf00      	nop
 800baf4:	e7fd      	b.n	800baf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800baf6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb34 <vPortValidateInterruptPriority+0x7c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bafe:	4b0e      	ldr	r3, [pc, #56]	@ (800bb38 <vPortValidateInterruptPriority+0x80>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d90b      	bls.n	800bb1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	603b      	str	r3, [r7, #0]
}
 800bb18:	bf00      	nop
 800bb1a:	bf00      	nop
 800bb1c:	e7fd      	b.n	800bb1a <vPortValidateInterruptPriority+0x62>
	}
 800bb1e:	bf00      	nop
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	e000e3f0 	.word	0xe000e3f0
 800bb30:	20001bf4 	.word	0x20001bf4
 800bb34:	e000ed0c 	.word	0xe000ed0c
 800bb38:	20001bf8 	.word	0x20001bf8

0800bb3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08a      	sub	sp, #40	@ 0x28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb44:	2300      	movs	r3, #0
 800bb46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb48:	f7fe fd78 	bl	800a63c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb4c:	4b5c      	ldr	r3, [pc, #368]	@ (800bcc0 <pvPortMalloc+0x184>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb54:	f000 f924 	bl	800bda0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb58:	4b5a      	ldr	r3, [pc, #360]	@ (800bcc4 <pvPortMalloc+0x188>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4013      	ands	r3, r2
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 8095 	bne.w	800bc90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d01e      	beq.n	800bbaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb6c:	2208      	movs	r2, #8
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4413      	add	r3, r2
 800bb72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f003 0307 	and.w	r3, r3, #7
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d015      	beq.n	800bbaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f023 0307 	bic.w	r3, r3, #7
 800bb84:	3308      	adds	r3, #8
 800bb86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f003 0307 	and.w	r3, r3, #7
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <pvPortMalloc+0x6e>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	617b      	str	r3, [r7, #20]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d06f      	beq.n	800bc90 <pvPortMalloc+0x154>
 800bbb0:	4b45      	ldr	r3, [pc, #276]	@ (800bcc8 <pvPortMalloc+0x18c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d86a      	bhi.n	800bc90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbba:	4b44      	ldr	r3, [pc, #272]	@ (800bccc <pvPortMalloc+0x190>)
 800bbbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbbe:	4b43      	ldr	r3, [pc, #268]	@ (800bccc <pvPortMalloc+0x190>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbc4:	e004      	b.n	800bbd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d903      	bls.n	800bbe2 <pvPortMalloc+0xa6>
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1f1      	bne.n	800bbc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbe2:	4b37      	ldr	r3, [pc, #220]	@ (800bcc0 <pvPortMalloc+0x184>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d051      	beq.n	800bc90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2208      	movs	r2, #8
 800bbf2:	4413      	add	r3, r2
 800bbf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	1ad2      	subs	r2, r2, r3
 800bc06:	2308      	movs	r3, #8
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d920      	bls.n	800bc50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4413      	add	r3, r2
 800bc14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	f003 0307 	and.w	r3, r3, #7
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <pvPortMalloc+0xfc>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	613b      	str	r3, [r7, #16]
}
 800bc32:	bf00      	nop
 800bc34:	bf00      	nop
 800bc36:	e7fd      	b.n	800bc34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	1ad2      	subs	r2, r2, r3
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc4a:	69b8      	ldr	r0, [r7, #24]
 800bc4c:	f000 f90a 	bl	800be64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc50:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc8 <pvPortMalloc+0x18c>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	4a1b      	ldr	r2, [pc, #108]	@ (800bcc8 <pvPortMalloc+0x18c>)
 800bc5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc5e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcc8 <pvPortMalloc+0x18c>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4b1b      	ldr	r3, [pc, #108]	@ (800bcd0 <pvPortMalloc+0x194>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d203      	bcs.n	800bc72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc6a:	4b17      	ldr	r3, [pc, #92]	@ (800bcc8 <pvPortMalloc+0x18c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a18      	ldr	r2, [pc, #96]	@ (800bcd0 <pvPortMalloc+0x194>)
 800bc70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	4b13      	ldr	r3, [pc, #76]	@ (800bcc4 <pvPortMalloc+0x188>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc86:	4b13      	ldr	r3, [pc, #76]	@ (800bcd4 <pvPortMalloc+0x198>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	4a11      	ldr	r2, [pc, #68]	@ (800bcd4 <pvPortMalloc+0x198>)
 800bc8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc90:	f7fe fce2 	bl	800a658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	f003 0307 	and.w	r3, r3, #7
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00b      	beq.n	800bcb6 <pvPortMalloc+0x17a>
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	60fb      	str	r3, [r7, #12]
}
 800bcb0:	bf00      	nop
 800bcb2:	bf00      	nop
 800bcb4:	e7fd      	b.n	800bcb2 <pvPortMalloc+0x176>
	return pvReturn;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3728      	adds	r7, #40	@ 0x28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20005804 	.word	0x20005804
 800bcc4:	20005818 	.word	0x20005818
 800bcc8:	20005808 	.word	0x20005808
 800bccc:	200057fc 	.word	0x200057fc
 800bcd0:	2000580c 	.word	0x2000580c
 800bcd4:	20005810 	.word	0x20005810

0800bcd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d04f      	beq.n	800bd8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcea:	2308      	movs	r3, #8
 800bcec:	425b      	negs	r3, r3
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	4b25      	ldr	r3, [pc, #148]	@ (800bd94 <vPortFree+0xbc>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4013      	ands	r3, r2
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10b      	bne.n	800bd1e <vPortFree+0x46>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	60fb      	str	r3, [r7, #12]
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	e7fd      	b.n	800bd1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00b      	beq.n	800bd3e <vPortFree+0x66>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	60bb      	str	r3, [r7, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	bf00      	nop
 800bd3c:	e7fd      	b.n	800bd3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	4b14      	ldr	r3, [pc, #80]	@ (800bd94 <vPortFree+0xbc>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4013      	ands	r3, r2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d01e      	beq.n	800bd8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d11a      	bne.n	800bd8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	4b0e      	ldr	r3, [pc, #56]	@ (800bd94 <vPortFree+0xbc>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	43db      	mvns	r3, r3
 800bd5e:	401a      	ands	r2, r3
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd64:	f7fe fc6a 	bl	800a63c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd98 <vPortFree+0xc0>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4413      	add	r3, r2
 800bd72:	4a09      	ldr	r2, [pc, #36]	@ (800bd98 <vPortFree+0xc0>)
 800bd74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f000 f874 	bl	800be64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd7c:	4b07      	ldr	r3, [pc, #28]	@ (800bd9c <vPortFree+0xc4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3301      	adds	r3, #1
 800bd82:	4a06      	ldr	r2, [pc, #24]	@ (800bd9c <vPortFree+0xc4>)
 800bd84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd86:	f7fe fc67 	bl	800a658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd8a:	bf00      	nop
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20005818 	.word	0x20005818
 800bd98:	20005808 	.word	0x20005808
 800bd9c:	20005814 	.word	0x20005814

0800bda0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bda6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bdaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdac:	4b27      	ldr	r3, [pc, #156]	@ (800be4c <prvHeapInit+0xac>)
 800bdae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00c      	beq.n	800bdd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3307      	adds	r3, #7
 800bdbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f023 0307 	bic.w	r3, r3, #7
 800bdc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	4a1f      	ldr	r2, [pc, #124]	@ (800be4c <prvHeapInit+0xac>)
 800bdd0:	4413      	add	r3, r2
 800bdd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800be50 <prvHeapInit+0xb0>)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdde:	4b1c      	ldr	r3, [pc, #112]	@ (800be50 <prvHeapInit+0xb0>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4413      	add	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bdec:	2208      	movs	r2, #8
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	1a9b      	subs	r3, r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 0307 	bic.w	r3, r3, #7
 800bdfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4a15      	ldr	r2, [pc, #84]	@ (800be54 <prvHeapInit+0xb4>)
 800be00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be02:	4b14      	ldr	r3, [pc, #80]	@ (800be54 <prvHeapInit+0xb4>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2200      	movs	r2, #0
 800be08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be0a:	4b12      	ldr	r3, [pc, #72]	@ (800be54 <prvHeapInit+0xb4>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	1ad2      	subs	r2, r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be20:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <prvHeapInit+0xb4>)
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4a0a      	ldr	r2, [pc, #40]	@ (800be58 <prvHeapInit+0xb8>)
 800be2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	4a09      	ldr	r2, [pc, #36]	@ (800be5c <prvHeapInit+0xbc>)
 800be36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be38:	4b09      	ldr	r3, [pc, #36]	@ (800be60 <prvHeapInit+0xc0>)
 800be3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be3e:	601a      	str	r2, [r3, #0]
}
 800be40:	bf00      	nop
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	20001bfc 	.word	0x20001bfc
 800be50:	200057fc 	.word	0x200057fc
 800be54:	20005804 	.word	0x20005804
 800be58:	2000580c 	.word	0x2000580c
 800be5c:	20005808 	.word	0x20005808
 800be60:	20005818 	.word	0x20005818

0800be64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be6c:	4b28      	ldr	r3, [pc, #160]	@ (800bf10 <prvInsertBlockIntoFreeList+0xac>)
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	e002      	b.n	800be78 <prvInsertBlockIntoFreeList+0x14>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d8f7      	bhi.n	800be72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	4413      	add	r3, r2
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	429a      	cmp	r2, r3
 800be92:	d108      	bne.n	800bea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	441a      	add	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	441a      	add	r2, r3
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d118      	bne.n	800beec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4b15      	ldr	r3, [pc, #84]	@ (800bf14 <prvInsertBlockIntoFreeList+0xb0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d00d      	beq.n	800bee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	441a      	add	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	601a      	str	r2, [r3, #0]
 800bee0:	e008      	b.n	800bef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bee2:	4b0c      	ldr	r3, [pc, #48]	@ (800bf14 <prvInsertBlockIntoFreeList+0xb0>)
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	e003      	b.n	800bef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d002      	beq.n	800bf02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf02:	bf00      	nop
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	200057fc 	.word	0x200057fc
 800bf14:	20005804 	.word	0x20005804

0800bf18 <std>:
 800bf18:	2300      	movs	r3, #0
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf26:	6083      	str	r3, [r0, #8]
 800bf28:	8181      	strh	r1, [r0, #12]
 800bf2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf2c:	81c2      	strh	r2, [r0, #14]
 800bf2e:	6183      	str	r3, [r0, #24]
 800bf30:	4619      	mov	r1, r3
 800bf32:	2208      	movs	r2, #8
 800bf34:	305c      	adds	r0, #92	@ 0x5c
 800bf36:	f000 fa2d 	bl	800c394 <memset>
 800bf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf70 <std+0x58>)
 800bf3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <std+0x5c>)
 800bf40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf42:	4b0d      	ldr	r3, [pc, #52]	@ (800bf78 <std+0x60>)
 800bf44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf46:	4b0d      	ldr	r3, [pc, #52]	@ (800bf7c <std+0x64>)
 800bf48:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf80 <std+0x68>)
 800bf4c:	6224      	str	r4, [r4, #32]
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d006      	beq.n	800bf60 <std+0x48>
 800bf52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf56:	4294      	cmp	r4, r2
 800bf58:	d002      	beq.n	800bf60 <std+0x48>
 800bf5a:	33d0      	adds	r3, #208	@ 0xd0
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	d105      	bne.n	800bf6c <std+0x54>
 800bf60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf68:	f000 bb14 	b.w	800c594 <__retarget_lock_init_recursive>
 800bf6c:	bd10      	pop	{r4, pc}
 800bf6e:	bf00      	nop
 800bf70:	0800c1e5 	.word	0x0800c1e5
 800bf74:	0800c207 	.word	0x0800c207
 800bf78:	0800c23f 	.word	0x0800c23f
 800bf7c:	0800c263 	.word	0x0800c263
 800bf80:	2000581c 	.word	0x2000581c

0800bf84 <stdio_exit_handler>:
 800bf84:	4a02      	ldr	r2, [pc, #8]	@ (800bf90 <stdio_exit_handler+0xc>)
 800bf86:	4903      	ldr	r1, [pc, #12]	@ (800bf94 <stdio_exit_handler+0x10>)
 800bf88:	4803      	ldr	r0, [pc, #12]	@ (800bf98 <stdio_exit_handler+0x14>)
 800bf8a:	f000 b869 	b.w	800c060 <_fwalk_sglue>
 800bf8e:	bf00      	nop
 800bf90:	200000d4 	.word	0x200000d4
 800bf94:	0800d111 	.word	0x0800d111
 800bf98:	200000e4 	.word	0x200000e4

0800bf9c <cleanup_stdio>:
 800bf9c:	6841      	ldr	r1, [r0, #4]
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd0 <cleanup_stdio+0x34>)
 800bfa0:	4299      	cmp	r1, r3
 800bfa2:	b510      	push	{r4, lr}
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	d001      	beq.n	800bfac <cleanup_stdio+0x10>
 800bfa8:	f001 f8b2 	bl	800d110 <_fflush_r>
 800bfac:	68a1      	ldr	r1, [r4, #8]
 800bfae:	4b09      	ldr	r3, [pc, #36]	@ (800bfd4 <cleanup_stdio+0x38>)
 800bfb0:	4299      	cmp	r1, r3
 800bfb2:	d002      	beq.n	800bfba <cleanup_stdio+0x1e>
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f001 f8ab 	bl	800d110 <_fflush_r>
 800bfba:	68e1      	ldr	r1, [r4, #12]
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <cleanup_stdio+0x3c>)
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	d004      	beq.n	800bfcc <cleanup_stdio+0x30>
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfc8:	f001 b8a2 	b.w	800d110 <_fflush_r>
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	bf00      	nop
 800bfd0:	2000581c 	.word	0x2000581c
 800bfd4:	20005884 	.word	0x20005884
 800bfd8:	200058ec 	.word	0x200058ec

0800bfdc <global_stdio_init.part.0>:
 800bfdc:	b510      	push	{r4, lr}
 800bfde:	4b0b      	ldr	r3, [pc, #44]	@ (800c00c <global_stdio_init.part.0+0x30>)
 800bfe0:	4c0b      	ldr	r4, [pc, #44]	@ (800c010 <global_stdio_init.part.0+0x34>)
 800bfe2:	4a0c      	ldr	r2, [pc, #48]	@ (800c014 <global_stdio_init.part.0+0x38>)
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2104      	movs	r1, #4
 800bfec:	f7ff ff94 	bl	800bf18 <std>
 800bff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bff4:	2201      	movs	r2, #1
 800bff6:	2109      	movs	r1, #9
 800bff8:	f7ff ff8e 	bl	800bf18 <std>
 800bffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c000:	2202      	movs	r2, #2
 800c002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c006:	2112      	movs	r1, #18
 800c008:	f7ff bf86 	b.w	800bf18 <std>
 800c00c:	20005954 	.word	0x20005954
 800c010:	2000581c 	.word	0x2000581c
 800c014:	0800bf85 	.word	0x0800bf85

0800c018 <__sfp_lock_acquire>:
 800c018:	4801      	ldr	r0, [pc, #4]	@ (800c020 <__sfp_lock_acquire+0x8>)
 800c01a:	f000 babc 	b.w	800c596 <__retarget_lock_acquire_recursive>
 800c01e:	bf00      	nop
 800c020:	2000595d 	.word	0x2000595d

0800c024 <__sfp_lock_release>:
 800c024:	4801      	ldr	r0, [pc, #4]	@ (800c02c <__sfp_lock_release+0x8>)
 800c026:	f000 bab7 	b.w	800c598 <__retarget_lock_release_recursive>
 800c02a:	bf00      	nop
 800c02c:	2000595d 	.word	0x2000595d

0800c030 <__sinit>:
 800c030:	b510      	push	{r4, lr}
 800c032:	4604      	mov	r4, r0
 800c034:	f7ff fff0 	bl	800c018 <__sfp_lock_acquire>
 800c038:	6a23      	ldr	r3, [r4, #32]
 800c03a:	b11b      	cbz	r3, 800c044 <__sinit+0x14>
 800c03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c040:	f7ff bff0 	b.w	800c024 <__sfp_lock_release>
 800c044:	4b04      	ldr	r3, [pc, #16]	@ (800c058 <__sinit+0x28>)
 800c046:	6223      	str	r3, [r4, #32]
 800c048:	4b04      	ldr	r3, [pc, #16]	@ (800c05c <__sinit+0x2c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1f5      	bne.n	800c03c <__sinit+0xc>
 800c050:	f7ff ffc4 	bl	800bfdc <global_stdio_init.part.0>
 800c054:	e7f2      	b.n	800c03c <__sinit+0xc>
 800c056:	bf00      	nop
 800c058:	0800bf9d 	.word	0x0800bf9d
 800c05c:	20005954 	.word	0x20005954

0800c060 <_fwalk_sglue>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	4607      	mov	r7, r0
 800c066:	4688      	mov	r8, r1
 800c068:	4614      	mov	r4, r2
 800c06a:	2600      	movs	r6, #0
 800c06c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c070:	f1b9 0901 	subs.w	r9, r9, #1
 800c074:	d505      	bpl.n	800c082 <_fwalk_sglue+0x22>
 800c076:	6824      	ldr	r4, [r4, #0]
 800c078:	2c00      	cmp	r4, #0
 800c07a:	d1f7      	bne.n	800c06c <_fwalk_sglue+0xc>
 800c07c:	4630      	mov	r0, r6
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d907      	bls.n	800c098 <_fwalk_sglue+0x38>
 800c088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c08c:	3301      	adds	r3, #1
 800c08e:	d003      	beq.n	800c098 <_fwalk_sglue+0x38>
 800c090:	4629      	mov	r1, r5
 800c092:	4638      	mov	r0, r7
 800c094:	47c0      	blx	r8
 800c096:	4306      	orrs	r6, r0
 800c098:	3568      	adds	r5, #104	@ 0x68
 800c09a:	e7e9      	b.n	800c070 <_fwalk_sglue+0x10>

0800c09c <iprintf>:
 800c09c:	b40f      	push	{r0, r1, r2, r3}
 800c09e:	b507      	push	{r0, r1, r2, lr}
 800c0a0:	4906      	ldr	r1, [pc, #24]	@ (800c0bc <iprintf+0x20>)
 800c0a2:	ab04      	add	r3, sp, #16
 800c0a4:	6808      	ldr	r0, [r1, #0]
 800c0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0aa:	6881      	ldr	r1, [r0, #8]
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	f000 fd05 	bl	800cabc <_vfiprintf_r>
 800c0b2:	b003      	add	sp, #12
 800c0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b8:	b004      	add	sp, #16
 800c0ba:	4770      	bx	lr
 800c0bc:	200000e0 	.word	0x200000e0

0800c0c0 <_puts_r>:
 800c0c0:	6a03      	ldr	r3, [r0, #32]
 800c0c2:	b570      	push	{r4, r5, r6, lr}
 800c0c4:	6884      	ldr	r4, [r0, #8]
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	460e      	mov	r6, r1
 800c0ca:	b90b      	cbnz	r3, 800c0d0 <_puts_r+0x10>
 800c0cc:	f7ff ffb0 	bl	800c030 <__sinit>
 800c0d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0d2:	07db      	lsls	r3, r3, #31
 800c0d4:	d405      	bmi.n	800c0e2 <_puts_r+0x22>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	0598      	lsls	r0, r3, #22
 800c0da:	d402      	bmi.n	800c0e2 <_puts_r+0x22>
 800c0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0de:	f000 fa5a 	bl	800c596 <__retarget_lock_acquire_recursive>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	0719      	lsls	r1, r3, #28
 800c0e6:	d502      	bpl.n	800c0ee <_puts_r+0x2e>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d135      	bne.n	800c15a <_puts_r+0x9a>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 f8f9 	bl	800c2e8 <__swsetup_r>
 800c0f6:	b380      	cbz	r0, 800c15a <_puts_r+0x9a>
 800c0f8:	f04f 35ff 	mov.w	r5, #4294967295
 800c0fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0fe:	07da      	lsls	r2, r3, #31
 800c100:	d405      	bmi.n	800c10e <_puts_r+0x4e>
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	059b      	lsls	r3, r3, #22
 800c106:	d402      	bmi.n	800c10e <_puts_r+0x4e>
 800c108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c10a:	f000 fa45 	bl	800c598 <__retarget_lock_release_recursive>
 800c10e:	4628      	mov	r0, r5
 800c110:	bd70      	pop	{r4, r5, r6, pc}
 800c112:	2b00      	cmp	r3, #0
 800c114:	da04      	bge.n	800c120 <_puts_r+0x60>
 800c116:	69a2      	ldr	r2, [r4, #24]
 800c118:	429a      	cmp	r2, r3
 800c11a:	dc17      	bgt.n	800c14c <_puts_r+0x8c>
 800c11c:	290a      	cmp	r1, #10
 800c11e:	d015      	beq.n	800c14c <_puts_r+0x8c>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	6022      	str	r2, [r4, #0]
 800c126:	7019      	strb	r1, [r3, #0]
 800c128:	68a3      	ldr	r3, [r4, #8]
 800c12a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c12e:	3b01      	subs	r3, #1
 800c130:	60a3      	str	r3, [r4, #8]
 800c132:	2900      	cmp	r1, #0
 800c134:	d1ed      	bne.n	800c112 <_puts_r+0x52>
 800c136:	2b00      	cmp	r3, #0
 800c138:	da11      	bge.n	800c15e <_puts_r+0x9e>
 800c13a:	4622      	mov	r2, r4
 800c13c:	210a      	movs	r1, #10
 800c13e:	4628      	mov	r0, r5
 800c140:	f000 f893 	bl	800c26a <__swbuf_r>
 800c144:	3001      	adds	r0, #1
 800c146:	d0d7      	beq.n	800c0f8 <_puts_r+0x38>
 800c148:	250a      	movs	r5, #10
 800c14a:	e7d7      	b.n	800c0fc <_puts_r+0x3c>
 800c14c:	4622      	mov	r2, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	f000 f88b 	bl	800c26a <__swbuf_r>
 800c154:	3001      	adds	r0, #1
 800c156:	d1e7      	bne.n	800c128 <_puts_r+0x68>
 800c158:	e7ce      	b.n	800c0f8 <_puts_r+0x38>
 800c15a:	3e01      	subs	r6, #1
 800c15c:	e7e4      	b.n	800c128 <_puts_r+0x68>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	6022      	str	r2, [r4, #0]
 800c164:	220a      	movs	r2, #10
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	e7ee      	b.n	800c148 <_puts_r+0x88>
	...

0800c16c <puts>:
 800c16c:	4b02      	ldr	r3, [pc, #8]	@ (800c178 <puts+0xc>)
 800c16e:	4601      	mov	r1, r0
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	f7ff bfa5 	b.w	800c0c0 <_puts_r>
 800c176:	bf00      	nop
 800c178:	200000e0 	.word	0x200000e0

0800c17c <sniprintf>:
 800c17c:	b40c      	push	{r2, r3}
 800c17e:	b530      	push	{r4, r5, lr}
 800c180:	4b17      	ldr	r3, [pc, #92]	@ (800c1e0 <sniprintf+0x64>)
 800c182:	1e0c      	subs	r4, r1, #0
 800c184:	681d      	ldr	r5, [r3, #0]
 800c186:	b09d      	sub	sp, #116	@ 0x74
 800c188:	da08      	bge.n	800c19c <sniprintf+0x20>
 800c18a:	238b      	movs	r3, #139	@ 0x8b
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f04f 30ff 	mov.w	r0, #4294967295
 800c192:	b01d      	add	sp, #116	@ 0x74
 800c194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c198:	b002      	add	sp, #8
 800c19a:	4770      	bx	lr
 800c19c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c1a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c1a4:	bf14      	ite	ne
 800c1a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c1aa:	4623      	moveq	r3, r4
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	9307      	str	r3, [sp, #28]
 800c1b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c1b4:	9002      	str	r0, [sp, #8]
 800c1b6:	9006      	str	r0, [sp, #24]
 800c1b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c1bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c1be:	ab21      	add	r3, sp, #132	@ 0x84
 800c1c0:	a902      	add	r1, sp, #8
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	f000 fb53 	bl	800c870 <_svfiprintf_r>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	bfbc      	itt	lt
 800c1ce:	238b      	movlt	r3, #139	@ 0x8b
 800c1d0:	602b      	strlt	r3, [r5, #0]
 800c1d2:	2c00      	cmp	r4, #0
 800c1d4:	d0dd      	beq.n	800c192 <sniprintf+0x16>
 800c1d6:	9b02      	ldr	r3, [sp, #8]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
 800c1dc:	e7d9      	b.n	800c192 <sniprintf+0x16>
 800c1de:	bf00      	nop
 800c1e0:	200000e0 	.word	0x200000e0

0800c1e4 <__sread>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ec:	f000 f984 	bl	800c4f8 <_read_r>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	bfab      	itete	ge
 800c1f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c1f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f8:	181b      	addge	r3, r3, r0
 800c1fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c1fe:	bfac      	ite	ge
 800c200:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c202:	81a3      	strhlt	r3, [r4, #12]
 800c204:	bd10      	pop	{r4, pc}

0800c206 <__swrite>:
 800c206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20a:	461f      	mov	r7, r3
 800c20c:	898b      	ldrh	r3, [r1, #12]
 800c20e:	05db      	lsls	r3, r3, #23
 800c210:	4605      	mov	r5, r0
 800c212:	460c      	mov	r4, r1
 800c214:	4616      	mov	r6, r2
 800c216:	d505      	bpl.n	800c224 <__swrite+0x1e>
 800c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21c:	2302      	movs	r3, #2
 800c21e:	2200      	movs	r2, #0
 800c220:	f000 f958 	bl	800c4d4 <_lseek_r>
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c22a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c22e:	81a3      	strh	r3, [r4, #12]
 800c230:	4632      	mov	r2, r6
 800c232:	463b      	mov	r3, r7
 800c234:	4628      	mov	r0, r5
 800c236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c23a:	f000 b96f 	b.w	800c51c <_write_r>

0800c23e <__sseek>:
 800c23e:	b510      	push	{r4, lr}
 800c240:	460c      	mov	r4, r1
 800c242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c246:	f000 f945 	bl	800c4d4 <_lseek_r>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	bf15      	itete	ne
 800c250:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c25a:	81a3      	strheq	r3, [r4, #12]
 800c25c:	bf18      	it	ne
 800c25e:	81a3      	strhne	r3, [r4, #12]
 800c260:	bd10      	pop	{r4, pc}

0800c262 <__sclose>:
 800c262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c266:	f000 b8cf 	b.w	800c408 <_close_r>

0800c26a <__swbuf_r>:
 800c26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26c:	460e      	mov	r6, r1
 800c26e:	4614      	mov	r4, r2
 800c270:	4605      	mov	r5, r0
 800c272:	b118      	cbz	r0, 800c27c <__swbuf_r+0x12>
 800c274:	6a03      	ldr	r3, [r0, #32]
 800c276:	b90b      	cbnz	r3, 800c27c <__swbuf_r+0x12>
 800c278:	f7ff feda 	bl	800c030 <__sinit>
 800c27c:	69a3      	ldr	r3, [r4, #24]
 800c27e:	60a3      	str	r3, [r4, #8]
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	071a      	lsls	r2, r3, #28
 800c284:	d501      	bpl.n	800c28a <__swbuf_r+0x20>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	b943      	cbnz	r3, 800c29c <__swbuf_r+0x32>
 800c28a:	4621      	mov	r1, r4
 800c28c:	4628      	mov	r0, r5
 800c28e:	f000 f82b 	bl	800c2e8 <__swsetup_r>
 800c292:	b118      	cbz	r0, 800c29c <__swbuf_r+0x32>
 800c294:	f04f 37ff 	mov.w	r7, #4294967295
 800c298:	4638      	mov	r0, r7
 800c29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	6922      	ldr	r2, [r4, #16]
 800c2a0:	1a98      	subs	r0, r3, r2
 800c2a2:	6963      	ldr	r3, [r4, #20]
 800c2a4:	b2f6      	uxtb	r6, r6
 800c2a6:	4283      	cmp	r3, r0
 800c2a8:	4637      	mov	r7, r6
 800c2aa:	dc05      	bgt.n	800c2b8 <__swbuf_r+0x4e>
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f000 ff2e 	bl	800d110 <_fflush_r>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d1ed      	bne.n	800c294 <__swbuf_r+0x2a>
 800c2b8:	68a3      	ldr	r3, [r4, #8]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	60a3      	str	r3, [r4, #8]
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	1c5a      	adds	r2, r3, #1
 800c2c2:	6022      	str	r2, [r4, #0]
 800c2c4:	701e      	strb	r6, [r3, #0]
 800c2c6:	6962      	ldr	r2, [r4, #20]
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d004      	beq.n	800c2d8 <__swbuf_r+0x6e>
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	07db      	lsls	r3, r3, #31
 800c2d2:	d5e1      	bpl.n	800c298 <__swbuf_r+0x2e>
 800c2d4:	2e0a      	cmp	r6, #10
 800c2d6:	d1df      	bne.n	800c298 <__swbuf_r+0x2e>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 ff18 	bl	800d110 <_fflush_r>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d0d9      	beq.n	800c298 <__swbuf_r+0x2e>
 800c2e4:	e7d6      	b.n	800c294 <__swbuf_r+0x2a>
	...

0800c2e8 <__swsetup_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4b29      	ldr	r3, [pc, #164]	@ (800c390 <__swsetup_r+0xa8>)
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	6818      	ldr	r0, [r3, #0]
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	b118      	cbz	r0, 800c2fc <__swsetup_r+0x14>
 800c2f4:	6a03      	ldr	r3, [r0, #32]
 800c2f6:	b90b      	cbnz	r3, 800c2fc <__swsetup_r+0x14>
 800c2f8:	f7ff fe9a 	bl	800c030 <__sinit>
 800c2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c300:	0719      	lsls	r1, r3, #28
 800c302:	d422      	bmi.n	800c34a <__swsetup_r+0x62>
 800c304:	06da      	lsls	r2, r3, #27
 800c306:	d407      	bmi.n	800c318 <__swsetup_r+0x30>
 800c308:	2209      	movs	r2, #9
 800c30a:	602a      	str	r2, [r5, #0]
 800c30c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c310:	81a3      	strh	r3, [r4, #12]
 800c312:	f04f 30ff 	mov.w	r0, #4294967295
 800c316:	e033      	b.n	800c380 <__swsetup_r+0x98>
 800c318:	0758      	lsls	r0, r3, #29
 800c31a:	d512      	bpl.n	800c342 <__swsetup_r+0x5a>
 800c31c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c31e:	b141      	cbz	r1, 800c332 <__swsetup_r+0x4a>
 800c320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c324:	4299      	cmp	r1, r3
 800c326:	d002      	beq.n	800c32e <__swsetup_r+0x46>
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 f94d 	bl	800c5c8 <_free_r>
 800c32e:	2300      	movs	r3, #0
 800c330:	6363      	str	r3, [r4, #52]	@ 0x34
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c338:	81a3      	strh	r3, [r4, #12]
 800c33a:	2300      	movs	r3, #0
 800c33c:	6063      	str	r3, [r4, #4]
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	f043 0308 	orr.w	r3, r3, #8
 800c348:	81a3      	strh	r3, [r4, #12]
 800c34a:	6923      	ldr	r3, [r4, #16]
 800c34c:	b94b      	cbnz	r3, 800c362 <__swsetup_r+0x7a>
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c358:	d003      	beq.n	800c362 <__swsetup_r+0x7a>
 800c35a:	4621      	mov	r1, r4
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 ff25 	bl	800d1ac <__smakebuf_r>
 800c362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c366:	f013 0201 	ands.w	r2, r3, #1
 800c36a:	d00a      	beq.n	800c382 <__swsetup_r+0x9a>
 800c36c:	2200      	movs	r2, #0
 800c36e:	60a2      	str	r2, [r4, #8]
 800c370:	6962      	ldr	r2, [r4, #20]
 800c372:	4252      	negs	r2, r2
 800c374:	61a2      	str	r2, [r4, #24]
 800c376:	6922      	ldr	r2, [r4, #16]
 800c378:	b942      	cbnz	r2, 800c38c <__swsetup_r+0xa4>
 800c37a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c37e:	d1c5      	bne.n	800c30c <__swsetup_r+0x24>
 800c380:	bd38      	pop	{r3, r4, r5, pc}
 800c382:	0799      	lsls	r1, r3, #30
 800c384:	bf58      	it	pl
 800c386:	6962      	ldrpl	r2, [r4, #20]
 800c388:	60a2      	str	r2, [r4, #8]
 800c38a:	e7f4      	b.n	800c376 <__swsetup_r+0x8e>
 800c38c:	2000      	movs	r0, #0
 800c38e:	e7f7      	b.n	800c380 <__swsetup_r+0x98>
 800c390:	200000e0 	.word	0x200000e0

0800c394 <memset>:
 800c394:	4402      	add	r2, r0
 800c396:	4603      	mov	r3, r0
 800c398:	4293      	cmp	r3, r2
 800c39a:	d100      	bne.n	800c39e <memset+0xa>
 800c39c:	4770      	bx	lr
 800c39e:	f803 1b01 	strb.w	r1, [r3], #1
 800c3a2:	e7f9      	b.n	800c398 <memset+0x4>

0800c3a4 <strchr>:
 800c3a4:	b2c9      	uxtb	r1, r1
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ae:	b112      	cbz	r2, 800c3b6 <strchr+0x12>
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	d1f9      	bne.n	800c3a8 <strchr+0x4>
 800c3b4:	4770      	bx	lr
 800c3b6:	2900      	cmp	r1, #0
 800c3b8:	bf18      	it	ne
 800c3ba:	2000      	movne	r0, #0
 800c3bc:	4770      	bx	lr

0800c3be <strncmp>:
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	b16a      	cbz	r2, 800c3de <strncmp+0x20>
 800c3c2:	3901      	subs	r1, #1
 800c3c4:	1884      	adds	r4, r0, r2
 800c3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d103      	bne.n	800c3da <strncmp+0x1c>
 800c3d2:	42a0      	cmp	r0, r4
 800c3d4:	d001      	beq.n	800c3da <strncmp+0x1c>
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d1f5      	bne.n	800c3c6 <strncmp+0x8>
 800c3da:	1ad0      	subs	r0, r2, r3
 800c3dc:	bd10      	pop	{r4, pc}
 800c3de:	4610      	mov	r0, r2
 800c3e0:	e7fc      	b.n	800c3dc <strncmp+0x1e>

0800c3e2 <strncpy>:
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	3901      	subs	r1, #1
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	b132      	cbz	r2, 800c3f8 <strncpy+0x16>
 800c3ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c3ee:	f803 4b01 	strb.w	r4, [r3], #1
 800c3f2:	3a01      	subs	r2, #1
 800c3f4:	2c00      	cmp	r4, #0
 800c3f6:	d1f7      	bne.n	800c3e8 <strncpy+0x6>
 800c3f8:	441a      	add	r2, r3
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d100      	bne.n	800c402 <strncpy+0x20>
 800c400:	bd10      	pop	{r4, pc}
 800c402:	f803 1b01 	strb.w	r1, [r3], #1
 800c406:	e7f9      	b.n	800c3fc <strncpy+0x1a>

0800c408 <_close_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d06      	ldr	r5, [pc, #24]	@ (800c424 <_close_r+0x1c>)
 800c40c:	2300      	movs	r3, #0
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	f7f4 ff51 	bl	80012ba <_close>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d102      	bne.n	800c422 <_close_r+0x1a>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	b103      	cbz	r3, 800c422 <_close_r+0x1a>
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	20005958 	.word	0x20005958

0800c428 <_reclaim_reent>:
 800c428:	4b29      	ldr	r3, [pc, #164]	@ (800c4d0 <_reclaim_reent+0xa8>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4283      	cmp	r3, r0
 800c42e:	b570      	push	{r4, r5, r6, lr}
 800c430:	4604      	mov	r4, r0
 800c432:	d04b      	beq.n	800c4cc <_reclaim_reent+0xa4>
 800c434:	69c3      	ldr	r3, [r0, #28]
 800c436:	b1ab      	cbz	r3, 800c464 <_reclaim_reent+0x3c>
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	b16b      	cbz	r3, 800c458 <_reclaim_reent+0x30>
 800c43c:	2500      	movs	r5, #0
 800c43e:	69e3      	ldr	r3, [r4, #28]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	5959      	ldr	r1, [r3, r5]
 800c444:	2900      	cmp	r1, #0
 800c446:	d13b      	bne.n	800c4c0 <_reclaim_reent+0x98>
 800c448:	3504      	adds	r5, #4
 800c44a:	2d80      	cmp	r5, #128	@ 0x80
 800c44c:	d1f7      	bne.n	800c43e <_reclaim_reent+0x16>
 800c44e:	69e3      	ldr	r3, [r4, #28]
 800c450:	4620      	mov	r0, r4
 800c452:	68d9      	ldr	r1, [r3, #12]
 800c454:	f000 f8b8 	bl	800c5c8 <_free_r>
 800c458:	69e3      	ldr	r3, [r4, #28]
 800c45a:	6819      	ldr	r1, [r3, #0]
 800c45c:	b111      	cbz	r1, 800c464 <_reclaim_reent+0x3c>
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 f8b2 	bl	800c5c8 <_free_r>
 800c464:	6961      	ldr	r1, [r4, #20]
 800c466:	b111      	cbz	r1, 800c46e <_reclaim_reent+0x46>
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 f8ad 	bl	800c5c8 <_free_r>
 800c46e:	69e1      	ldr	r1, [r4, #28]
 800c470:	b111      	cbz	r1, 800c478 <_reclaim_reent+0x50>
 800c472:	4620      	mov	r0, r4
 800c474:	f000 f8a8 	bl	800c5c8 <_free_r>
 800c478:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c47a:	b111      	cbz	r1, 800c482 <_reclaim_reent+0x5a>
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 f8a3 	bl	800c5c8 <_free_r>
 800c482:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c484:	b111      	cbz	r1, 800c48c <_reclaim_reent+0x64>
 800c486:	4620      	mov	r0, r4
 800c488:	f000 f89e 	bl	800c5c8 <_free_r>
 800c48c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c48e:	b111      	cbz	r1, 800c496 <_reclaim_reent+0x6e>
 800c490:	4620      	mov	r0, r4
 800c492:	f000 f899 	bl	800c5c8 <_free_r>
 800c496:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c498:	b111      	cbz	r1, 800c4a0 <_reclaim_reent+0x78>
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 f894 	bl	800c5c8 <_free_r>
 800c4a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c4a2:	b111      	cbz	r1, 800c4aa <_reclaim_reent+0x82>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 f88f 	bl	800c5c8 <_free_r>
 800c4aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c4ac:	b111      	cbz	r1, 800c4b4 <_reclaim_reent+0x8c>
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 f88a 	bl	800c5c8 <_free_r>
 800c4b4:	6a23      	ldr	r3, [r4, #32]
 800c4b6:	b14b      	cbz	r3, 800c4cc <_reclaim_reent+0xa4>
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4be:	4718      	bx	r3
 800c4c0:	680e      	ldr	r6, [r1, #0]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 f880 	bl	800c5c8 <_free_r>
 800c4c8:	4631      	mov	r1, r6
 800c4ca:	e7bb      	b.n	800c444 <_reclaim_reent+0x1c>
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
 800c4ce:	bf00      	nop
 800c4d0:	200000e0 	.word	0x200000e0

0800c4d4 <_lseek_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	@ (800c4f4 <_lseek_r+0x20>)
 800c4d8:	4604      	mov	r4, r0
 800c4da:	4608      	mov	r0, r1
 800c4dc:	4611      	mov	r1, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	602a      	str	r2, [r5, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	f7f4 ff10 	bl	8001308 <_lseek>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_lseek_r+0x1e>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_lseek_r+0x1e>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	20005958 	.word	0x20005958

0800c4f8 <_read_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	@ (800c518 <_read_r+0x20>)
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	4611      	mov	r1, r2
 800c502:	2200      	movs	r2, #0
 800c504:	602a      	str	r2, [r5, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7f4 fe9e 	bl	8001248 <_read>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_read_r+0x1e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_read_r+0x1e>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20005958 	.word	0x20005958

0800c51c <_write_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d07      	ldr	r5, [pc, #28]	@ (800c53c <_write_r+0x20>)
 800c520:	4604      	mov	r4, r0
 800c522:	4608      	mov	r0, r1
 800c524:	4611      	mov	r1, r2
 800c526:	2200      	movs	r2, #0
 800c528:	602a      	str	r2, [r5, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	f7f4 fea9 	bl	8001282 <_write>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_write_r+0x1e>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	b103      	cbz	r3, 800c53a <_write_r+0x1e>
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	20005958 	.word	0x20005958

0800c540 <__errno>:
 800c540:	4b01      	ldr	r3, [pc, #4]	@ (800c548 <__errno+0x8>)
 800c542:	6818      	ldr	r0, [r3, #0]
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	200000e0 	.word	0x200000e0

0800c54c <__libc_init_array>:
 800c54c:	b570      	push	{r4, r5, r6, lr}
 800c54e:	4d0d      	ldr	r5, [pc, #52]	@ (800c584 <__libc_init_array+0x38>)
 800c550:	4c0d      	ldr	r4, [pc, #52]	@ (800c588 <__libc_init_array+0x3c>)
 800c552:	1b64      	subs	r4, r4, r5
 800c554:	10a4      	asrs	r4, r4, #2
 800c556:	2600      	movs	r6, #0
 800c558:	42a6      	cmp	r6, r4
 800c55a:	d109      	bne.n	800c570 <__libc_init_array+0x24>
 800c55c:	4d0b      	ldr	r5, [pc, #44]	@ (800c58c <__libc_init_array+0x40>)
 800c55e:	4c0c      	ldr	r4, [pc, #48]	@ (800c590 <__libc_init_array+0x44>)
 800c560:	f000 fee2 	bl	800d328 <_init>
 800c564:	1b64      	subs	r4, r4, r5
 800c566:	10a4      	asrs	r4, r4, #2
 800c568:	2600      	movs	r6, #0
 800c56a:	42a6      	cmp	r6, r4
 800c56c:	d105      	bne.n	800c57a <__libc_init_array+0x2e>
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	f855 3b04 	ldr.w	r3, [r5], #4
 800c574:	4798      	blx	r3
 800c576:	3601      	adds	r6, #1
 800c578:	e7ee      	b.n	800c558 <__libc_init_array+0xc>
 800c57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c57e:	4798      	blx	r3
 800c580:	3601      	adds	r6, #1
 800c582:	e7f2      	b.n	800c56a <__libc_init_array+0x1e>
 800c584:	0800dba8 	.word	0x0800dba8
 800c588:	0800dba8 	.word	0x0800dba8
 800c58c:	0800dba8 	.word	0x0800dba8
 800c590:	0800dbac 	.word	0x0800dbac

0800c594 <__retarget_lock_init_recursive>:
 800c594:	4770      	bx	lr

0800c596 <__retarget_lock_acquire_recursive>:
 800c596:	4770      	bx	lr

0800c598 <__retarget_lock_release_recursive>:
 800c598:	4770      	bx	lr

0800c59a <strcpy>:
 800c59a:	4603      	mov	r3, r0
 800c59c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a0:	f803 2b01 	strb.w	r2, [r3], #1
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	d1f9      	bne.n	800c59c <strcpy+0x2>
 800c5a8:	4770      	bx	lr

0800c5aa <memcpy>:
 800c5aa:	440a      	add	r2, r1
 800c5ac:	4291      	cmp	r1, r2
 800c5ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5b2:	d100      	bne.n	800c5b6 <memcpy+0xc>
 800c5b4:	4770      	bx	lr
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5c0:	4291      	cmp	r1, r2
 800c5c2:	d1f9      	bne.n	800c5b8 <memcpy+0xe>
 800c5c4:	bd10      	pop	{r4, pc}
	...

0800c5c8 <_free_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	2900      	cmp	r1, #0
 800c5ce:	d041      	beq.n	800c654 <_free_r+0x8c>
 800c5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5d4:	1f0c      	subs	r4, r1, #4
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	bfb8      	it	lt
 800c5da:	18e4      	addlt	r4, r4, r3
 800c5dc:	f000 f8e0 	bl	800c7a0 <__malloc_lock>
 800c5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c658 <_free_r+0x90>)
 800c5e2:	6813      	ldr	r3, [r2, #0]
 800c5e4:	b933      	cbnz	r3, 800c5f4 <_free_r+0x2c>
 800c5e6:	6063      	str	r3, [r4, #4]
 800c5e8:	6014      	str	r4, [r2, #0]
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5f0:	f000 b8dc 	b.w	800c7ac <__malloc_unlock>
 800c5f4:	42a3      	cmp	r3, r4
 800c5f6:	d908      	bls.n	800c60a <_free_r+0x42>
 800c5f8:	6820      	ldr	r0, [r4, #0]
 800c5fa:	1821      	adds	r1, r4, r0
 800c5fc:	428b      	cmp	r3, r1
 800c5fe:	bf01      	itttt	eq
 800c600:	6819      	ldreq	r1, [r3, #0]
 800c602:	685b      	ldreq	r3, [r3, #4]
 800c604:	1809      	addeq	r1, r1, r0
 800c606:	6021      	streq	r1, [r4, #0]
 800c608:	e7ed      	b.n	800c5e6 <_free_r+0x1e>
 800c60a:	461a      	mov	r2, r3
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	b10b      	cbz	r3, 800c614 <_free_r+0x4c>
 800c610:	42a3      	cmp	r3, r4
 800c612:	d9fa      	bls.n	800c60a <_free_r+0x42>
 800c614:	6811      	ldr	r1, [r2, #0]
 800c616:	1850      	adds	r0, r2, r1
 800c618:	42a0      	cmp	r0, r4
 800c61a:	d10b      	bne.n	800c634 <_free_r+0x6c>
 800c61c:	6820      	ldr	r0, [r4, #0]
 800c61e:	4401      	add	r1, r0
 800c620:	1850      	adds	r0, r2, r1
 800c622:	4283      	cmp	r3, r0
 800c624:	6011      	str	r1, [r2, #0]
 800c626:	d1e0      	bne.n	800c5ea <_free_r+0x22>
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	6053      	str	r3, [r2, #4]
 800c62e:	4408      	add	r0, r1
 800c630:	6010      	str	r0, [r2, #0]
 800c632:	e7da      	b.n	800c5ea <_free_r+0x22>
 800c634:	d902      	bls.n	800c63c <_free_r+0x74>
 800c636:	230c      	movs	r3, #12
 800c638:	602b      	str	r3, [r5, #0]
 800c63a:	e7d6      	b.n	800c5ea <_free_r+0x22>
 800c63c:	6820      	ldr	r0, [r4, #0]
 800c63e:	1821      	adds	r1, r4, r0
 800c640:	428b      	cmp	r3, r1
 800c642:	bf04      	itt	eq
 800c644:	6819      	ldreq	r1, [r3, #0]
 800c646:	685b      	ldreq	r3, [r3, #4]
 800c648:	6063      	str	r3, [r4, #4]
 800c64a:	bf04      	itt	eq
 800c64c:	1809      	addeq	r1, r1, r0
 800c64e:	6021      	streq	r1, [r4, #0]
 800c650:	6054      	str	r4, [r2, #4]
 800c652:	e7ca      	b.n	800c5ea <_free_r+0x22>
 800c654:	bd38      	pop	{r3, r4, r5, pc}
 800c656:	bf00      	nop
 800c658:	20005964 	.word	0x20005964

0800c65c <sbrk_aligned>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	4e0f      	ldr	r6, [pc, #60]	@ (800c69c <sbrk_aligned+0x40>)
 800c660:	460c      	mov	r4, r1
 800c662:	6831      	ldr	r1, [r6, #0]
 800c664:	4605      	mov	r5, r0
 800c666:	b911      	cbnz	r1, 800c66e <sbrk_aligned+0x12>
 800c668:	f000 fe18 	bl	800d29c <_sbrk_r>
 800c66c:	6030      	str	r0, [r6, #0]
 800c66e:	4621      	mov	r1, r4
 800c670:	4628      	mov	r0, r5
 800c672:	f000 fe13 	bl	800d29c <_sbrk_r>
 800c676:	1c43      	adds	r3, r0, #1
 800c678:	d103      	bne.n	800c682 <sbrk_aligned+0x26>
 800c67a:	f04f 34ff 	mov.w	r4, #4294967295
 800c67e:	4620      	mov	r0, r4
 800c680:	bd70      	pop	{r4, r5, r6, pc}
 800c682:	1cc4      	adds	r4, r0, #3
 800c684:	f024 0403 	bic.w	r4, r4, #3
 800c688:	42a0      	cmp	r0, r4
 800c68a:	d0f8      	beq.n	800c67e <sbrk_aligned+0x22>
 800c68c:	1a21      	subs	r1, r4, r0
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 fe04 	bl	800d29c <_sbrk_r>
 800c694:	3001      	adds	r0, #1
 800c696:	d1f2      	bne.n	800c67e <sbrk_aligned+0x22>
 800c698:	e7ef      	b.n	800c67a <sbrk_aligned+0x1e>
 800c69a:	bf00      	nop
 800c69c:	20005960 	.word	0x20005960

0800c6a0 <_malloc_r>:
 800c6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	1ccd      	adds	r5, r1, #3
 800c6a6:	f025 0503 	bic.w	r5, r5, #3
 800c6aa:	3508      	adds	r5, #8
 800c6ac:	2d0c      	cmp	r5, #12
 800c6ae:	bf38      	it	cc
 800c6b0:	250c      	movcc	r5, #12
 800c6b2:	2d00      	cmp	r5, #0
 800c6b4:	4606      	mov	r6, r0
 800c6b6:	db01      	blt.n	800c6bc <_malloc_r+0x1c>
 800c6b8:	42a9      	cmp	r1, r5
 800c6ba:	d904      	bls.n	800c6c6 <_malloc_r+0x26>
 800c6bc:	230c      	movs	r3, #12
 800c6be:	6033      	str	r3, [r6, #0]
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c79c <_malloc_r+0xfc>
 800c6ca:	f000 f869 	bl	800c7a0 <__malloc_lock>
 800c6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c6d2:	461c      	mov	r4, r3
 800c6d4:	bb44      	cbnz	r4, 800c728 <_malloc_r+0x88>
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f7ff ffbf 	bl	800c65c <sbrk_aligned>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	d158      	bne.n	800c796 <_malloc_r+0xf6>
 800c6e4:	f8d8 4000 	ldr.w	r4, [r8]
 800c6e8:	4627      	mov	r7, r4
 800c6ea:	2f00      	cmp	r7, #0
 800c6ec:	d143      	bne.n	800c776 <_malloc_r+0xd6>
 800c6ee:	2c00      	cmp	r4, #0
 800c6f0:	d04b      	beq.n	800c78a <_malloc_r+0xea>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	eb04 0903 	add.w	r9, r4, r3
 800c6fc:	f000 fdce 	bl	800d29c <_sbrk_r>
 800c700:	4581      	cmp	r9, r0
 800c702:	d142      	bne.n	800c78a <_malloc_r+0xea>
 800c704:	6821      	ldr	r1, [r4, #0]
 800c706:	1a6d      	subs	r5, r5, r1
 800c708:	4629      	mov	r1, r5
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7ff ffa6 	bl	800c65c <sbrk_aligned>
 800c710:	3001      	adds	r0, #1
 800c712:	d03a      	beq.n	800c78a <_malloc_r+0xea>
 800c714:	6823      	ldr	r3, [r4, #0]
 800c716:	442b      	add	r3, r5
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	f8d8 3000 	ldr.w	r3, [r8]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	bb62      	cbnz	r2, 800c77c <_malloc_r+0xdc>
 800c722:	f8c8 7000 	str.w	r7, [r8]
 800c726:	e00f      	b.n	800c748 <_malloc_r+0xa8>
 800c728:	6822      	ldr	r2, [r4, #0]
 800c72a:	1b52      	subs	r2, r2, r5
 800c72c:	d420      	bmi.n	800c770 <_malloc_r+0xd0>
 800c72e:	2a0b      	cmp	r2, #11
 800c730:	d917      	bls.n	800c762 <_malloc_r+0xc2>
 800c732:	1961      	adds	r1, r4, r5
 800c734:	42a3      	cmp	r3, r4
 800c736:	6025      	str	r5, [r4, #0]
 800c738:	bf18      	it	ne
 800c73a:	6059      	strne	r1, [r3, #4]
 800c73c:	6863      	ldr	r3, [r4, #4]
 800c73e:	bf08      	it	eq
 800c740:	f8c8 1000 	streq.w	r1, [r8]
 800c744:	5162      	str	r2, [r4, r5]
 800c746:	604b      	str	r3, [r1, #4]
 800c748:	4630      	mov	r0, r6
 800c74a:	f000 f82f 	bl	800c7ac <__malloc_unlock>
 800c74e:	f104 000b 	add.w	r0, r4, #11
 800c752:	1d23      	adds	r3, r4, #4
 800c754:	f020 0007 	bic.w	r0, r0, #7
 800c758:	1ac2      	subs	r2, r0, r3
 800c75a:	bf1c      	itt	ne
 800c75c:	1a1b      	subne	r3, r3, r0
 800c75e:	50a3      	strne	r3, [r4, r2]
 800c760:	e7af      	b.n	800c6c2 <_malloc_r+0x22>
 800c762:	6862      	ldr	r2, [r4, #4]
 800c764:	42a3      	cmp	r3, r4
 800c766:	bf0c      	ite	eq
 800c768:	f8c8 2000 	streq.w	r2, [r8]
 800c76c:	605a      	strne	r2, [r3, #4]
 800c76e:	e7eb      	b.n	800c748 <_malloc_r+0xa8>
 800c770:	4623      	mov	r3, r4
 800c772:	6864      	ldr	r4, [r4, #4]
 800c774:	e7ae      	b.n	800c6d4 <_malloc_r+0x34>
 800c776:	463c      	mov	r4, r7
 800c778:	687f      	ldr	r7, [r7, #4]
 800c77a:	e7b6      	b.n	800c6ea <_malloc_r+0x4a>
 800c77c:	461a      	mov	r2, r3
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	42a3      	cmp	r3, r4
 800c782:	d1fb      	bne.n	800c77c <_malloc_r+0xdc>
 800c784:	2300      	movs	r3, #0
 800c786:	6053      	str	r3, [r2, #4]
 800c788:	e7de      	b.n	800c748 <_malloc_r+0xa8>
 800c78a:	230c      	movs	r3, #12
 800c78c:	6033      	str	r3, [r6, #0]
 800c78e:	4630      	mov	r0, r6
 800c790:	f000 f80c 	bl	800c7ac <__malloc_unlock>
 800c794:	e794      	b.n	800c6c0 <_malloc_r+0x20>
 800c796:	6005      	str	r5, [r0, #0]
 800c798:	e7d6      	b.n	800c748 <_malloc_r+0xa8>
 800c79a:	bf00      	nop
 800c79c:	20005964 	.word	0x20005964

0800c7a0 <__malloc_lock>:
 800c7a0:	4801      	ldr	r0, [pc, #4]	@ (800c7a8 <__malloc_lock+0x8>)
 800c7a2:	f7ff bef8 	b.w	800c596 <__retarget_lock_acquire_recursive>
 800c7a6:	bf00      	nop
 800c7a8:	2000595c 	.word	0x2000595c

0800c7ac <__malloc_unlock>:
 800c7ac:	4801      	ldr	r0, [pc, #4]	@ (800c7b4 <__malloc_unlock+0x8>)
 800c7ae:	f7ff bef3 	b.w	800c598 <__retarget_lock_release_recursive>
 800c7b2:	bf00      	nop
 800c7b4:	2000595c 	.word	0x2000595c

0800c7b8 <__ssputs_r>:
 800c7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7bc:	688e      	ldr	r6, [r1, #8]
 800c7be:	461f      	mov	r7, r3
 800c7c0:	42be      	cmp	r6, r7
 800c7c2:	680b      	ldr	r3, [r1, #0]
 800c7c4:	4682      	mov	sl, r0
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	4690      	mov	r8, r2
 800c7ca:	d82d      	bhi.n	800c828 <__ssputs_r+0x70>
 800c7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7d4:	d026      	beq.n	800c824 <__ssputs_r+0x6c>
 800c7d6:	6965      	ldr	r5, [r4, #20]
 800c7d8:	6909      	ldr	r1, [r1, #16]
 800c7da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7de:	eba3 0901 	sub.w	r9, r3, r1
 800c7e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7e6:	1c7b      	adds	r3, r7, #1
 800c7e8:	444b      	add	r3, r9
 800c7ea:	106d      	asrs	r5, r5, #1
 800c7ec:	429d      	cmp	r5, r3
 800c7ee:	bf38      	it	cc
 800c7f0:	461d      	movcc	r5, r3
 800c7f2:	0553      	lsls	r3, r2, #21
 800c7f4:	d527      	bpl.n	800c846 <__ssputs_r+0x8e>
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7ff ff52 	bl	800c6a0 <_malloc_r>
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	b360      	cbz	r0, 800c85a <__ssputs_r+0xa2>
 800c800:	6921      	ldr	r1, [r4, #16]
 800c802:	464a      	mov	r2, r9
 800c804:	f7ff fed1 	bl	800c5aa <memcpy>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	6126      	str	r6, [r4, #16]
 800c816:	6165      	str	r5, [r4, #20]
 800c818:	444e      	add	r6, r9
 800c81a:	eba5 0509 	sub.w	r5, r5, r9
 800c81e:	6026      	str	r6, [r4, #0]
 800c820:	60a5      	str	r5, [r4, #8]
 800c822:	463e      	mov	r6, r7
 800c824:	42be      	cmp	r6, r7
 800c826:	d900      	bls.n	800c82a <__ssputs_r+0x72>
 800c828:	463e      	mov	r6, r7
 800c82a:	6820      	ldr	r0, [r4, #0]
 800c82c:	4632      	mov	r2, r6
 800c82e:	4641      	mov	r1, r8
 800c830:	f000 fcf8 	bl	800d224 <memmove>
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	1b9b      	subs	r3, r3, r6
 800c838:	60a3      	str	r3, [r4, #8]
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	4433      	add	r3, r6
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	2000      	movs	r0, #0
 800c842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c846:	462a      	mov	r2, r5
 800c848:	f000 fd38 	bl	800d2bc <_realloc_r>
 800c84c:	4606      	mov	r6, r0
 800c84e:	2800      	cmp	r0, #0
 800c850:	d1e0      	bne.n	800c814 <__ssputs_r+0x5c>
 800c852:	6921      	ldr	r1, [r4, #16]
 800c854:	4650      	mov	r0, sl
 800c856:	f7ff feb7 	bl	800c5c8 <_free_r>
 800c85a:	230c      	movs	r3, #12
 800c85c:	f8ca 3000 	str.w	r3, [sl]
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c866:	81a3      	strh	r3, [r4, #12]
 800c868:	f04f 30ff 	mov.w	r0, #4294967295
 800c86c:	e7e9      	b.n	800c842 <__ssputs_r+0x8a>
	...

0800c870 <_svfiprintf_r>:
 800c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	4698      	mov	r8, r3
 800c876:	898b      	ldrh	r3, [r1, #12]
 800c878:	061b      	lsls	r3, r3, #24
 800c87a:	b09d      	sub	sp, #116	@ 0x74
 800c87c:	4607      	mov	r7, r0
 800c87e:	460d      	mov	r5, r1
 800c880:	4614      	mov	r4, r2
 800c882:	d510      	bpl.n	800c8a6 <_svfiprintf_r+0x36>
 800c884:	690b      	ldr	r3, [r1, #16]
 800c886:	b973      	cbnz	r3, 800c8a6 <_svfiprintf_r+0x36>
 800c888:	2140      	movs	r1, #64	@ 0x40
 800c88a:	f7ff ff09 	bl	800c6a0 <_malloc_r>
 800c88e:	6028      	str	r0, [r5, #0]
 800c890:	6128      	str	r0, [r5, #16]
 800c892:	b930      	cbnz	r0, 800c8a2 <_svfiprintf_r+0x32>
 800c894:	230c      	movs	r3, #12
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	f04f 30ff 	mov.w	r0, #4294967295
 800c89c:	b01d      	add	sp, #116	@ 0x74
 800c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a2:	2340      	movs	r3, #64	@ 0x40
 800c8a4:	616b      	str	r3, [r5, #20]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8aa:	2320      	movs	r3, #32
 800c8ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8b4:	2330      	movs	r3, #48	@ 0x30
 800c8b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ca54 <_svfiprintf_r+0x1e4>
 800c8ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8be:	f04f 0901 	mov.w	r9, #1
 800c8c2:	4623      	mov	r3, r4
 800c8c4:	469a      	mov	sl, r3
 800c8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ca:	b10a      	cbz	r2, 800c8d0 <_svfiprintf_r+0x60>
 800c8cc:	2a25      	cmp	r2, #37	@ 0x25
 800c8ce:	d1f9      	bne.n	800c8c4 <_svfiprintf_r+0x54>
 800c8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8d4:	d00b      	beq.n	800c8ee <_svfiprintf_r+0x7e>
 800c8d6:	465b      	mov	r3, fp
 800c8d8:	4622      	mov	r2, r4
 800c8da:	4629      	mov	r1, r5
 800c8dc:	4638      	mov	r0, r7
 800c8de:	f7ff ff6b 	bl	800c7b8 <__ssputs_r>
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f000 80a7 	beq.w	800ca36 <_svfiprintf_r+0x1c6>
 800c8e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ea:	445a      	add	r2, fp
 800c8ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 809f 	beq.w	800ca36 <_svfiprintf_r+0x1c6>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c902:	f10a 0a01 	add.w	sl, sl, #1
 800c906:	9304      	str	r3, [sp, #16]
 800c908:	9307      	str	r3, [sp, #28]
 800c90a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c90e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c910:	4654      	mov	r4, sl
 800c912:	2205      	movs	r2, #5
 800c914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c918:	484e      	ldr	r0, [pc, #312]	@ (800ca54 <_svfiprintf_r+0x1e4>)
 800c91a:	f7f3 fc69 	bl	80001f0 <memchr>
 800c91e:	9a04      	ldr	r2, [sp, #16]
 800c920:	b9d8      	cbnz	r0, 800c95a <_svfiprintf_r+0xea>
 800c922:	06d0      	lsls	r0, r2, #27
 800c924:	bf44      	itt	mi
 800c926:	2320      	movmi	r3, #32
 800c928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c92c:	0711      	lsls	r1, r2, #28
 800c92e:	bf44      	itt	mi
 800c930:	232b      	movmi	r3, #43	@ 0x2b
 800c932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c936:	f89a 3000 	ldrb.w	r3, [sl]
 800c93a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c93c:	d015      	beq.n	800c96a <_svfiprintf_r+0xfa>
 800c93e:	9a07      	ldr	r2, [sp, #28]
 800c940:	4654      	mov	r4, sl
 800c942:	2000      	movs	r0, #0
 800c944:	f04f 0c0a 	mov.w	ip, #10
 800c948:	4621      	mov	r1, r4
 800c94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c94e:	3b30      	subs	r3, #48	@ 0x30
 800c950:	2b09      	cmp	r3, #9
 800c952:	d94b      	bls.n	800c9ec <_svfiprintf_r+0x17c>
 800c954:	b1b0      	cbz	r0, 800c984 <_svfiprintf_r+0x114>
 800c956:	9207      	str	r2, [sp, #28]
 800c958:	e014      	b.n	800c984 <_svfiprintf_r+0x114>
 800c95a:	eba0 0308 	sub.w	r3, r0, r8
 800c95e:	fa09 f303 	lsl.w	r3, r9, r3
 800c962:	4313      	orrs	r3, r2
 800c964:	9304      	str	r3, [sp, #16]
 800c966:	46a2      	mov	sl, r4
 800c968:	e7d2      	b.n	800c910 <_svfiprintf_r+0xa0>
 800c96a:	9b03      	ldr	r3, [sp, #12]
 800c96c:	1d19      	adds	r1, r3, #4
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	9103      	str	r1, [sp, #12]
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfbb      	ittet	lt
 800c976:	425b      	neglt	r3, r3
 800c978:	f042 0202 	orrlt.w	r2, r2, #2
 800c97c:	9307      	strge	r3, [sp, #28]
 800c97e:	9307      	strlt	r3, [sp, #28]
 800c980:	bfb8      	it	lt
 800c982:	9204      	strlt	r2, [sp, #16]
 800c984:	7823      	ldrb	r3, [r4, #0]
 800c986:	2b2e      	cmp	r3, #46	@ 0x2e
 800c988:	d10a      	bne.n	800c9a0 <_svfiprintf_r+0x130>
 800c98a:	7863      	ldrb	r3, [r4, #1]
 800c98c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c98e:	d132      	bne.n	800c9f6 <_svfiprintf_r+0x186>
 800c990:	9b03      	ldr	r3, [sp, #12]
 800c992:	1d1a      	adds	r2, r3, #4
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	9203      	str	r2, [sp, #12]
 800c998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c99c:	3402      	adds	r4, #2
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca64 <_svfiprintf_r+0x1f4>
 800c9a4:	7821      	ldrb	r1, [r4, #0]
 800c9a6:	2203      	movs	r2, #3
 800c9a8:	4650      	mov	r0, sl
 800c9aa:	f7f3 fc21 	bl	80001f0 <memchr>
 800c9ae:	b138      	cbz	r0, 800c9c0 <_svfiprintf_r+0x150>
 800c9b0:	9b04      	ldr	r3, [sp, #16]
 800c9b2:	eba0 000a 	sub.w	r0, r0, sl
 800c9b6:	2240      	movs	r2, #64	@ 0x40
 800c9b8:	4082      	lsls	r2, r0
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	3401      	adds	r4, #1
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c4:	4824      	ldr	r0, [pc, #144]	@ (800ca58 <_svfiprintf_r+0x1e8>)
 800c9c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9ca:	2206      	movs	r2, #6
 800c9cc:	f7f3 fc10 	bl	80001f0 <memchr>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d036      	beq.n	800ca42 <_svfiprintf_r+0x1d2>
 800c9d4:	4b21      	ldr	r3, [pc, #132]	@ (800ca5c <_svfiprintf_r+0x1ec>)
 800c9d6:	bb1b      	cbnz	r3, 800ca20 <_svfiprintf_r+0x1b0>
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	3307      	adds	r3, #7
 800c9dc:	f023 0307 	bic.w	r3, r3, #7
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e6:	4433      	add	r3, r6
 800c9e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ea:	e76a      	b.n	800c8c2 <_svfiprintf_r+0x52>
 800c9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	2001      	movs	r0, #1
 800c9f4:	e7a8      	b.n	800c948 <_svfiprintf_r+0xd8>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	3401      	adds	r4, #1
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f04f 0c0a 	mov.w	ip, #10
 800ca02:	4620      	mov	r0, r4
 800ca04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca08:	3a30      	subs	r2, #48	@ 0x30
 800ca0a:	2a09      	cmp	r2, #9
 800ca0c:	d903      	bls.n	800ca16 <_svfiprintf_r+0x1a6>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0c6      	beq.n	800c9a0 <_svfiprintf_r+0x130>
 800ca12:	9105      	str	r1, [sp, #20]
 800ca14:	e7c4      	b.n	800c9a0 <_svfiprintf_r+0x130>
 800ca16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e7f0      	b.n	800ca02 <_svfiprintf_r+0x192>
 800ca20:	ab03      	add	r3, sp, #12
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	462a      	mov	r2, r5
 800ca26:	4b0e      	ldr	r3, [pc, #56]	@ (800ca60 <_svfiprintf_r+0x1f0>)
 800ca28:	a904      	add	r1, sp, #16
 800ca2a:	4638      	mov	r0, r7
 800ca2c:	f3af 8000 	nop.w
 800ca30:	1c42      	adds	r2, r0, #1
 800ca32:	4606      	mov	r6, r0
 800ca34:	d1d6      	bne.n	800c9e4 <_svfiprintf_r+0x174>
 800ca36:	89ab      	ldrh	r3, [r5, #12]
 800ca38:	065b      	lsls	r3, r3, #25
 800ca3a:	f53f af2d 	bmi.w	800c898 <_svfiprintf_r+0x28>
 800ca3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca40:	e72c      	b.n	800c89c <_svfiprintf_r+0x2c>
 800ca42:	ab03      	add	r3, sp, #12
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	462a      	mov	r2, r5
 800ca48:	4b05      	ldr	r3, [pc, #20]	@ (800ca60 <_svfiprintf_r+0x1f0>)
 800ca4a:	a904      	add	r1, sp, #16
 800ca4c:	4638      	mov	r0, r7
 800ca4e:	f000 f9bb 	bl	800cdc8 <_printf_i>
 800ca52:	e7ed      	b.n	800ca30 <_svfiprintf_r+0x1c0>
 800ca54:	0800db6c 	.word	0x0800db6c
 800ca58:	0800db76 	.word	0x0800db76
 800ca5c:	00000000 	.word	0x00000000
 800ca60:	0800c7b9 	.word	0x0800c7b9
 800ca64:	0800db72 	.word	0x0800db72

0800ca68 <__sfputc_r>:
 800ca68:	6893      	ldr	r3, [r2, #8]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	b410      	push	{r4}
 800ca70:	6093      	str	r3, [r2, #8]
 800ca72:	da08      	bge.n	800ca86 <__sfputc_r+0x1e>
 800ca74:	6994      	ldr	r4, [r2, #24]
 800ca76:	42a3      	cmp	r3, r4
 800ca78:	db01      	blt.n	800ca7e <__sfputc_r+0x16>
 800ca7a:	290a      	cmp	r1, #10
 800ca7c:	d103      	bne.n	800ca86 <__sfputc_r+0x1e>
 800ca7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca82:	f7ff bbf2 	b.w	800c26a <__swbuf_r>
 800ca86:	6813      	ldr	r3, [r2, #0]
 800ca88:	1c58      	adds	r0, r3, #1
 800ca8a:	6010      	str	r0, [r2, #0]
 800ca8c:	7019      	strb	r1, [r3, #0]
 800ca8e:	4608      	mov	r0, r1
 800ca90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <__sfputs_r>:
 800ca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	18d5      	adds	r5, r2, r3
 800caa0:	42ac      	cmp	r4, r5
 800caa2:	d101      	bne.n	800caa8 <__sfputs_r+0x12>
 800caa4:	2000      	movs	r0, #0
 800caa6:	e007      	b.n	800cab8 <__sfputs_r+0x22>
 800caa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caac:	463a      	mov	r2, r7
 800caae:	4630      	mov	r0, r6
 800cab0:	f7ff ffda 	bl	800ca68 <__sfputc_r>
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	d1f3      	bne.n	800caa0 <__sfputs_r+0xa>
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cabc <_vfiprintf_r>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	460d      	mov	r5, r1
 800cac2:	b09d      	sub	sp, #116	@ 0x74
 800cac4:	4614      	mov	r4, r2
 800cac6:	4698      	mov	r8, r3
 800cac8:	4606      	mov	r6, r0
 800caca:	b118      	cbz	r0, 800cad4 <_vfiprintf_r+0x18>
 800cacc:	6a03      	ldr	r3, [r0, #32]
 800cace:	b90b      	cbnz	r3, 800cad4 <_vfiprintf_r+0x18>
 800cad0:	f7ff faae 	bl	800c030 <__sinit>
 800cad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cad6:	07d9      	lsls	r1, r3, #31
 800cad8:	d405      	bmi.n	800cae6 <_vfiprintf_r+0x2a>
 800cada:	89ab      	ldrh	r3, [r5, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_vfiprintf_r+0x2a>
 800cae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cae2:	f7ff fd58 	bl	800c596 <__retarget_lock_acquire_recursive>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	071b      	lsls	r3, r3, #28
 800caea:	d501      	bpl.n	800caf0 <_vfiprintf_r+0x34>
 800caec:	692b      	ldr	r3, [r5, #16]
 800caee:	b99b      	cbnz	r3, 800cb18 <_vfiprintf_r+0x5c>
 800caf0:	4629      	mov	r1, r5
 800caf2:	4630      	mov	r0, r6
 800caf4:	f7ff fbf8 	bl	800c2e8 <__swsetup_r>
 800caf8:	b170      	cbz	r0, 800cb18 <_vfiprintf_r+0x5c>
 800cafa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cafc:	07dc      	lsls	r4, r3, #31
 800cafe:	d504      	bpl.n	800cb0a <_vfiprintf_r+0x4e>
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	b01d      	add	sp, #116	@ 0x74
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	0598      	lsls	r0, r3, #22
 800cb0e:	d4f7      	bmi.n	800cb00 <_vfiprintf_r+0x44>
 800cb10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb12:	f7ff fd41 	bl	800c598 <__retarget_lock_release_recursive>
 800cb16:	e7f3      	b.n	800cb00 <_vfiprintf_r+0x44>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb1c:	2320      	movs	r3, #32
 800cb1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb22:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb26:	2330      	movs	r3, #48	@ 0x30
 800cb28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ccd8 <_vfiprintf_r+0x21c>
 800cb2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb30:	f04f 0901 	mov.w	r9, #1
 800cb34:	4623      	mov	r3, r4
 800cb36:	469a      	mov	sl, r3
 800cb38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb3c:	b10a      	cbz	r2, 800cb42 <_vfiprintf_r+0x86>
 800cb3e:	2a25      	cmp	r2, #37	@ 0x25
 800cb40:	d1f9      	bne.n	800cb36 <_vfiprintf_r+0x7a>
 800cb42:	ebba 0b04 	subs.w	fp, sl, r4
 800cb46:	d00b      	beq.n	800cb60 <_vfiprintf_r+0xa4>
 800cb48:	465b      	mov	r3, fp
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f7ff ffa1 	bl	800ca96 <__sfputs_r>
 800cb54:	3001      	adds	r0, #1
 800cb56:	f000 80a7 	beq.w	800cca8 <_vfiprintf_r+0x1ec>
 800cb5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb5c:	445a      	add	r2, fp
 800cb5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb60:	f89a 3000 	ldrb.w	r3, [sl]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 809f 	beq.w	800cca8 <_vfiprintf_r+0x1ec>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb74:	f10a 0a01 	add.w	sl, sl, #1
 800cb78:	9304      	str	r3, [sp, #16]
 800cb7a:	9307      	str	r3, [sp, #28]
 800cb7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb80:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb82:	4654      	mov	r4, sl
 800cb84:	2205      	movs	r2, #5
 800cb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8a:	4853      	ldr	r0, [pc, #332]	@ (800ccd8 <_vfiprintf_r+0x21c>)
 800cb8c:	f7f3 fb30 	bl	80001f0 <memchr>
 800cb90:	9a04      	ldr	r2, [sp, #16]
 800cb92:	b9d8      	cbnz	r0, 800cbcc <_vfiprintf_r+0x110>
 800cb94:	06d1      	lsls	r1, r2, #27
 800cb96:	bf44      	itt	mi
 800cb98:	2320      	movmi	r3, #32
 800cb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb9e:	0713      	lsls	r3, r2, #28
 800cba0:	bf44      	itt	mi
 800cba2:	232b      	movmi	r3, #43	@ 0x2b
 800cba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cba8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbac:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbae:	d015      	beq.n	800cbdc <_vfiprintf_r+0x120>
 800cbb0:	9a07      	ldr	r2, [sp, #28]
 800cbb2:	4654      	mov	r4, sl
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	f04f 0c0a 	mov.w	ip, #10
 800cbba:	4621      	mov	r1, r4
 800cbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbc0:	3b30      	subs	r3, #48	@ 0x30
 800cbc2:	2b09      	cmp	r3, #9
 800cbc4:	d94b      	bls.n	800cc5e <_vfiprintf_r+0x1a2>
 800cbc6:	b1b0      	cbz	r0, 800cbf6 <_vfiprintf_r+0x13a>
 800cbc8:	9207      	str	r2, [sp, #28]
 800cbca:	e014      	b.n	800cbf6 <_vfiprintf_r+0x13a>
 800cbcc:	eba0 0308 	sub.w	r3, r0, r8
 800cbd0:	fa09 f303 	lsl.w	r3, r9, r3
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	46a2      	mov	sl, r4
 800cbda:	e7d2      	b.n	800cb82 <_vfiprintf_r+0xc6>
 800cbdc:	9b03      	ldr	r3, [sp, #12]
 800cbde:	1d19      	adds	r1, r3, #4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	9103      	str	r1, [sp, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bfbb      	ittet	lt
 800cbe8:	425b      	neglt	r3, r3
 800cbea:	f042 0202 	orrlt.w	r2, r2, #2
 800cbee:	9307      	strge	r3, [sp, #28]
 800cbf0:	9307      	strlt	r3, [sp, #28]
 800cbf2:	bfb8      	it	lt
 800cbf4:	9204      	strlt	r2, [sp, #16]
 800cbf6:	7823      	ldrb	r3, [r4, #0]
 800cbf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbfa:	d10a      	bne.n	800cc12 <_vfiprintf_r+0x156>
 800cbfc:	7863      	ldrb	r3, [r4, #1]
 800cbfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc00:	d132      	bne.n	800cc68 <_vfiprintf_r+0x1ac>
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	1d1a      	adds	r2, r3, #4
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	9203      	str	r2, [sp, #12]
 800cc0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc0e:	3402      	adds	r4, #2
 800cc10:	9305      	str	r3, [sp, #20]
 800cc12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cce8 <_vfiprintf_r+0x22c>
 800cc16:	7821      	ldrb	r1, [r4, #0]
 800cc18:	2203      	movs	r2, #3
 800cc1a:	4650      	mov	r0, sl
 800cc1c:	f7f3 fae8 	bl	80001f0 <memchr>
 800cc20:	b138      	cbz	r0, 800cc32 <_vfiprintf_r+0x176>
 800cc22:	9b04      	ldr	r3, [sp, #16]
 800cc24:	eba0 000a 	sub.w	r0, r0, sl
 800cc28:	2240      	movs	r2, #64	@ 0x40
 800cc2a:	4082      	lsls	r2, r0
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	3401      	adds	r4, #1
 800cc30:	9304      	str	r3, [sp, #16]
 800cc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc36:	4829      	ldr	r0, [pc, #164]	@ (800ccdc <_vfiprintf_r+0x220>)
 800cc38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc3c:	2206      	movs	r2, #6
 800cc3e:	f7f3 fad7 	bl	80001f0 <memchr>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d03f      	beq.n	800ccc6 <_vfiprintf_r+0x20a>
 800cc46:	4b26      	ldr	r3, [pc, #152]	@ (800cce0 <_vfiprintf_r+0x224>)
 800cc48:	bb1b      	cbnz	r3, 800cc92 <_vfiprintf_r+0x1d6>
 800cc4a:	9b03      	ldr	r3, [sp, #12]
 800cc4c:	3307      	adds	r3, #7
 800cc4e:	f023 0307 	bic.w	r3, r3, #7
 800cc52:	3308      	adds	r3, #8
 800cc54:	9303      	str	r3, [sp, #12]
 800cc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc58:	443b      	add	r3, r7
 800cc5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc5c:	e76a      	b.n	800cb34 <_vfiprintf_r+0x78>
 800cc5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc62:	460c      	mov	r4, r1
 800cc64:	2001      	movs	r0, #1
 800cc66:	e7a8      	b.n	800cbba <_vfiprintf_r+0xfe>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	3401      	adds	r4, #1
 800cc6c:	9305      	str	r3, [sp, #20]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	f04f 0c0a 	mov.w	ip, #10
 800cc74:	4620      	mov	r0, r4
 800cc76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc7a:	3a30      	subs	r2, #48	@ 0x30
 800cc7c:	2a09      	cmp	r2, #9
 800cc7e:	d903      	bls.n	800cc88 <_vfiprintf_r+0x1cc>
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0c6      	beq.n	800cc12 <_vfiprintf_r+0x156>
 800cc84:	9105      	str	r1, [sp, #20]
 800cc86:	e7c4      	b.n	800cc12 <_vfiprintf_r+0x156>
 800cc88:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e7f0      	b.n	800cc74 <_vfiprintf_r+0x1b8>
 800cc92:	ab03      	add	r3, sp, #12
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	462a      	mov	r2, r5
 800cc98:	4b12      	ldr	r3, [pc, #72]	@ (800cce4 <_vfiprintf_r+0x228>)
 800cc9a:	a904      	add	r1, sp, #16
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f3af 8000 	nop.w
 800cca2:	4607      	mov	r7, r0
 800cca4:	1c78      	adds	r0, r7, #1
 800cca6:	d1d6      	bne.n	800cc56 <_vfiprintf_r+0x19a>
 800cca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccaa:	07d9      	lsls	r1, r3, #31
 800ccac:	d405      	bmi.n	800ccba <_vfiprintf_r+0x1fe>
 800ccae:	89ab      	ldrh	r3, [r5, #12]
 800ccb0:	059a      	lsls	r2, r3, #22
 800ccb2:	d402      	bmi.n	800ccba <_vfiprintf_r+0x1fe>
 800ccb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccb6:	f7ff fc6f 	bl	800c598 <__retarget_lock_release_recursive>
 800ccba:	89ab      	ldrh	r3, [r5, #12]
 800ccbc:	065b      	lsls	r3, r3, #25
 800ccbe:	f53f af1f 	bmi.w	800cb00 <_vfiprintf_r+0x44>
 800ccc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccc4:	e71e      	b.n	800cb04 <_vfiprintf_r+0x48>
 800ccc6:	ab03      	add	r3, sp, #12
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	462a      	mov	r2, r5
 800cccc:	4b05      	ldr	r3, [pc, #20]	@ (800cce4 <_vfiprintf_r+0x228>)
 800ccce:	a904      	add	r1, sp, #16
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f000 f879 	bl	800cdc8 <_printf_i>
 800ccd6:	e7e4      	b.n	800cca2 <_vfiprintf_r+0x1e6>
 800ccd8:	0800db6c 	.word	0x0800db6c
 800ccdc:	0800db76 	.word	0x0800db76
 800cce0:	00000000 	.word	0x00000000
 800cce4:	0800ca97 	.word	0x0800ca97
 800cce8:	0800db72 	.word	0x0800db72

0800ccec <_printf_common>:
 800ccec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf0:	4616      	mov	r6, r2
 800ccf2:	4698      	mov	r8, r3
 800ccf4:	688a      	ldr	r2, [r1, #8]
 800ccf6:	690b      	ldr	r3, [r1, #16]
 800ccf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	bfb8      	it	lt
 800cd00:	4613      	movlt	r3, r2
 800cd02:	6033      	str	r3, [r6, #0]
 800cd04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd08:	4607      	mov	r7, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	b10a      	cbz	r2, 800cd12 <_printf_common+0x26>
 800cd0e:	3301      	adds	r3, #1
 800cd10:	6033      	str	r3, [r6, #0]
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	0699      	lsls	r1, r3, #26
 800cd16:	bf42      	ittt	mi
 800cd18:	6833      	ldrmi	r3, [r6, #0]
 800cd1a:	3302      	addmi	r3, #2
 800cd1c:	6033      	strmi	r3, [r6, #0]
 800cd1e:	6825      	ldr	r5, [r4, #0]
 800cd20:	f015 0506 	ands.w	r5, r5, #6
 800cd24:	d106      	bne.n	800cd34 <_printf_common+0x48>
 800cd26:	f104 0a19 	add.w	sl, r4, #25
 800cd2a:	68e3      	ldr	r3, [r4, #12]
 800cd2c:	6832      	ldr	r2, [r6, #0]
 800cd2e:	1a9b      	subs	r3, r3, r2
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	dc26      	bgt.n	800cd82 <_printf_common+0x96>
 800cd34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd38:	6822      	ldr	r2, [r4, #0]
 800cd3a:	3b00      	subs	r3, #0
 800cd3c:	bf18      	it	ne
 800cd3e:	2301      	movne	r3, #1
 800cd40:	0692      	lsls	r2, r2, #26
 800cd42:	d42b      	bmi.n	800cd9c <_printf_common+0xb0>
 800cd44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd48:	4641      	mov	r1, r8
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	47c8      	blx	r9
 800cd4e:	3001      	adds	r0, #1
 800cd50:	d01e      	beq.n	800cd90 <_printf_common+0xa4>
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	6922      	ldr	r2, [r4, #16]
 800cd56:	f003 0306 	and.w	r3, r3, #6
 800cd5a:	2b04      	cmp	r3, #4
 800cd5c:	bf02      	ittt	eq
 800cd5e:	68e5      	ldreq	r5, [r4, #12]
 800cd60:	6833      	ldreq	r3, [r6, #0]
 800cd62:	1aed      	subeq	r5, r5, r3
 800cd64:	68a3      	ldr	r3, [r4, #8]
 800cd66:	bf0c      	ite	eq
 800cd68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd6c:	2500      	movne	r5, #0
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	bfc4      	itt	gt
 800cd72:	1a9b      	subgt	r3, r3, r2
 800cd74:	18ed      	addgt	r5, r5, r3
 800cd76:	2600      	movs	r6, #0
 800cd78:	341a      	adds	r4, #26
 800cd7a:	42b5      	cmp	r5, r6
 800cd7c:	d11a      	bne.n	800cdb4 <_printf_common+0xc8>
 800cd7e:	2000      	movs	r0, #0
 800cd80:	e008      	b.n	800cd94 <_printf_common+0xa8>
 800cd82:	2301      	movs	r3, #1
 800cd84:	4652      	mov	r2, sl
 800cd86:	4641      	mov	r1, r8
 800cd88:	4638      	mov	r0, r7
 800cd8a:	47c8      	blx	r9
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d103      	bne.n	800cd98 <_printf_common+0xac>
 800cd90:	f04f 30ff 	mov.w	r0, #4294967295
 800cd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd98:	3501      	adds	r5, #1
 800cd9a:	e7c6      	b.n	800cd2a <_printf_common+0x3e>
 800cd9c:	18e1      	adds	r1, r4, r3
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	2030      	movs	r0, #48	@ 0x30
 800cda2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cda6:	4422      	add	r2, r4
 800cda8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cdac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cdb0:	3302      	adds	r3, #2
 800cdb2:	e7c7      	b.n	800cd44 <_printf_common+0x58>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	4641      	mov	r1, r8
 800cdba:	4638      	mov	r0, r7
 800cdbc:	47c8      	blx	r9
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d0e6      	beq.n	800cd90 <_printf_common+0xa4>
 800cdc2:	3601      	adds	r6, #1
 800cdc4:	e7d9      	b.n	800cd7a <_printf_common+0x8e>
	...

0800cdc8 <_printf_i>:
 800cdc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	7e0f      	ldrb	r7, [r1, #24]
 800cdce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cdd0:	2f78      	cmp	r7, #120	@ 0x78
 800cdd2:	4691      	mov	r9, r2
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	469a      	mov	sl, r3
 800cdda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cdde:	d807      	bhi.n	800cdf0 <_printf_i+0x28>
 800cde0:	2f62      	cmp	r7, #98	@ 0x62
 800cde2:	d80a      	bhi.n	800cdfa <_printf_i+0x32>
 800cde4:	2f00      	cmp	r7, #0
 800cde6:	f000 80d2 	beq.w	800cf8e <_printf_i+0x1c6>
 800cdea:	2f58      	cmp	r7, #88	@ 0x58
 800cdec:	f000 80b9 	beq.w	800cf62 <_printf_i+0x19a>
 800cdf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdf8:	e03a      	b.n	800ce70 <_printf_i+0xa8>
 800cdfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdfe:	2b15      	cmp	r3, #21
 800ce00:	d8f6      	bhi.n	800cdf0 <_printf_i+0x28>
 800ce02:	a101      	add	r1, pc, #4	@ (adr r1, 800ce08 <_printf_i+0x40>)
 800ce04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce08:	0800ce61 	.word	0x0800ce61
 800ce0c:	0800ce75 	.word	0x0800ce75
 800ce10:	0800cdf1 	.word	0x0800cdf1
 800ce14:	0800cdf1 	.word	0x0800cdf1
 800ce18:	0800cdf1 	.word	0x0800cdf1
 800ce1c:	0800cdf1 	.word	0x0800cdf1
 800ce20:	0800ce75 	.word	0x0800ce75
 800ce24:	0800cdf1 	.word	0x0800cdf1
 800ce28:	0800cdf1 	.word	0x0800cdf1
 800ce2c:	0800cdf1 	.word	0x0800cdf1
 800ce30:	0800cdf1 	.word	0x0800cdf1
 800ce34:	0800cf75 	.word	0x0800cf75
 800ce38:	0800ce9f 	.word	0x0800ce9f
 800ce3c:	0800cf2f 	.word	0x0800cf2f
 800ce40:	0800cdf1 	.word	0x0800cdf1
 800ce44:	0800cdf1 	.word	0x0800cdf1
 800ce48:	0800cf97 	.word	0x0800cf97
 800ce4c:	0800cdf1 	.word	0x0800cdf1
 800ce50:	0800ce9f 	.word	0x0800ce9f
 800ce54:	0800cdf1 	.word	0x0800cdf1
 800ce58:	0800cdf1 	.word	0x0800cdf1
 800ce5c:	0800cf37 	.word	0x0800cf37
 800ce60:	6833      	ldr	r3, [r6, #0]
 800ce62:	1d1a      	adds	r2, r3, #4
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6032      	str	r2, [r6, #0]
 800ce68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce70:	2301      	movs	r3, #1
 800ce72:	e09d      	b.n	800cfb0 <_printf_i+0x1e8>
 800ce74:	6833      	ldr	r3, [r6, #0]
 800ce76:	6820      	ldr	r0, [r4, #0]
 800ce78:	1d19      	adds	r1, r3, #4
 800ce7a:	6031      	str	r1, [r6, #0]
 800ce7c:	0606      	lsls	r6, r0, #24
 800ce7e:	d501      	bpl.n	800ce84 <_printf_i+0xbc>
 800ce80:	681d      	ldr	r5, [r3, #0]
 800ce82:	e003      	b.n	800ce8c <_printf_i+0xc4>
 800ce84:	0645      	lsls	r5, r0, #25
 800ce86:	d5fb      	bpl.n	800ce80 <_printf_i+0xb8>
 800ce88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce8c:	2d00      	cmp	r5, #0
 800ce8e:	da03      	bge.n	800ce98 <_printf_i+0xd0>
 800ce90:	232d      	movs	r3, #45	@ 0x2d
 800ce92:	426d      	negs	r5, r5
 800ce94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce98:	4859      	ldr	r0, [pc, #356]	@ (800d000 <_printf_i+0x238>)
 800ce9a:	230a      	movs	r3, #10
 800ce9c:	e011      	b.n	800cec2 <_printf_i+0xfa>
 800ce9e:	6821      	ldr	r1, [r4, #0]
 800cea0:	6833      	ldr	r3, [r6, #0]
 800cea2:	0608      	lsls	r0, r1, #24
 800cea4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cea8:	d402      	bmi.n	800ceb0 <_printf_i+0xe8>
 800ceaa:	0649      	lsls	r1, r1, #25
 800ceac:	bf48      	it	mi
 800ceae:	b2ad      	uxthmi	r5, r5
 800ceb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ceb2:	4853      	ldr	r0, [pc, #332]	@ (800d000 <_printf_i+0x238>)
 800ceb4:	6033      	str	r3, [r6, #0]
 800ceb6:	bf14      	ite	ne
 800ceb8:	230a      	movne	r3, #10
 800ceba:	2308      	moveq	r3, #8
 800cebc:	2100      	movs	r1, #0
 800cebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cec2:	6866      	ldr	r6, [r4, #4]
 800cec4:	60a6      	str	r6, [r4, #8]
 800cec6:	2e00      	cmp	r6, #0
 800cec8:	bfa2      	ittt	ge
 800ceca:	6821      	ldrge	r1, [r4, #0]
 800cecc:	f021 0104 	bicge.w	r1, r1, #4
 800ced0:	6021      	strge	r1, [r4, #0]
 800ced2:	b90d      	cbnz	r5, 800ced8 <_printf_i+0x110>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	d04b      	beq.n	800cf70 <_printf_i+0x1a8>
 800ced8:	4616      	mov	r6, r2
 800ceda:	fbb5 f1f3 	udiv	r1, r5, r3
 800cede:	fb03 5711 	mls	r7, r3, r1, r5
 800cee2:	5dc7      	ldrb	r7, [r0, r7]
 800cee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cee8:	462f      	mov	r7, r5
 800ceea:	42bb      	cmp	r3, r7
 800ceec:	460d      	mov	r5, r1
 800ceee:	d9f4      	bls.n	800ceda <_printf_i+0x112>
 800cef0:	2b08      	cmp	r3, #8
 800cef2:	d10b      	bne.n	800cf0c <_printf_i+0x144>
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	07df      	lsls	r7, r3, #31
 800cef8:	d508      	bpl.n	800cf0c <_printf_i+0x144>
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	6861      	ldr	r1, [r4, #4]
 800cefe:	4299      	cmp	r1, r3
 800cf00:	bfde      	ittt	le
 800cf02:	2330      	movle	r3, #48	@ 0x30
 800cf04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf0c:	1b92      	subs	r2, r2, r6
 800cf0e:	6122      	str	r2, [r4, #16]
 800cf10:	f8cd a000 	str.w	sl, [sp]
 800cf14:	464b      	mov	r3, r9
 800cf16:	aa03      	add	r2, sp, #12
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	f7ff fee6 	bl	800ccec <_printf_common>
 800cf20:	3001      	adds	r0, #1
 800cf22:	d14a      	bne.n	800cfba <_printf_i+0x1f2>
 800cf24:	f04f 30ff 	mov.w	r0, #4294967295
 800cf28:	b004      	add	sp, #16
 800cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	f043 0320 	orr.w	r3, r3, #32
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	4833      	ldr	r0, [pc, #204]	@ (800d004 <_printf_i+0x23c>)
 800cf38:	2778      	movs	r7, #120	@ 0x78
 800cf3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	6831      	ldr	r1, [r6, #0]
 800cf42:	061f      	lsls	r7, r3, #24
 800cf44:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf48:	d402      	bmi.n	800cf50 <_printf_i+0x188>
 800cf4a:	065f      	lsls	r7, r3, #25
 800cf4c:	bf48      	it	mi
 800cf4e:	b2ad      	uxthmi	r5, r5
 800cf50:	6031      	str	r1, [r6, #0]
 800cf52:	07d9      	lsls	r1, r3, #31
 800cf54:	bf44      	itt	mi
 800cf56:	f043 0320 	orrmi.w	r3, r3, #32
 800cf5a:	6023      	strmi	r3, [r4, #0]
 800cf5c:	b11d      	cbz	r5, 800cf66 <_printf_i+0x19e>
 800cf5e:	2310      	movs	r3, #16
 800cf60:	e7ac      	b.n	800cebc <_printf_i+0xf4>
 800cf62:	4827      	ldr	r0, [pc, #156]	@ (800d000 <_printf_i+0x238>)
 800cf64:	e7e9      	b.n	800cf3a <_printf_i+0x172>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	f023 0320 	bic.w	r3, r3, #32
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	e7f6      	b.n	800cf5e <_printf_i+0x196>
 800cf70:	4616      	mov	r6, r2
 800cf72:	e7bd      	b.n	800cef0 <_printf_i+0x128>
 800cf74:	6833      	ldr	r3, [r6, #0]
 800cf76:	6825      	ldr	r5, [r4, #0]
 800cf78:	6961      	ldr	r1, [r4, #20]
 800cf7a:	1d18      	adds	r0, r3, #4
 800cf7c:	6030      	str	r0, [r6, #0]
 800cf7e:	062e      	lsls	r6, r5, #24
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	d501      	bpl.n	800cf88 <_printf_i+0x1c0>
 800cf84:	6019      	str	r1, [r3, #0]
 800cf86:	e002      	b.n	800cf8e <_printf_i+0x1c6>
 800cf88:	0668      	lsls	r0, r5, #25
 800cf8a:	d5fb      	bpl.n	800cf84 <_printf_i+0x1bc>
 800cf8c:	8019      	strh	r1, [r3, #0]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	6123      	str	r3, [r4, #16]
 800cf92:	4616      	mov	r6, r2
 800cf94:	e7bc      	b.n	800cf10 <_printf_i+0x148>
 800cf96:	6833      	ldr	r3, [r6, #0]
 800cf98:	1d1a      	adds	r2, r3, #4
 800cf9a:	6032      	str	r2, [r6, #0]
 800cf9c:	681e      	ldr	r6, [r3, #0]
 800cf9e:	6862      	ldr	r2, [r4, #4]
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7f3 f924 	bl	80001f0 <memchr>
 800cfa8:	b108      	cbz	r0, 800cfae <_printf_i+0x1e6>
 800cfaa:	1b80      	subs	r0, r0, r6
 800cfac:	6060      	str	r0, [r4, #4]
 800cfae:	6863      	ldr	r3, [r4, #4]
 800cfb0:	6123      	str	r3, [r4, #16]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfb8:	e7aa      	b.n	800cf10 <_printf_i+0x148>
 800cfba:	6923      	ldr	r3, [r4, #16]
 800cfbc:	4632      	mov	r2, r6
 800cfbe:	4649      	mov	r1, r9
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	47d0      	blx	sl
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	d0ad      	beq.n	800cf24 <_printf_i+0x15c>
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	079b      	lsls	r3, r3, #30
 800cfcc:	d413      	bmi.n	800cff6 <_printf_i+0x22e>
 800cfce:	68e0      	ldr	r0, [r4, #12]
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	4298      	cmp	r0, r3
 800cfd4:	bfb8      	it	lt
 800cfd6:	4618      	movlt	r0, r3
 800cfd8:	e7a6      	b.n	800cf28 <_printf_i+0x160>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	4632      	mov	r2, r6
 800cfde:	4649      	mov	r1, r9
 800cfe0:	4640      	mov	r0, r8
 800cfe2:	47d0      	blx	sl
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d09d      	beq.n	800cf24 <_printf_i+0x15c>
 800cfe8:	3501      	adds	r5, #1
 800cfea:	68e3      	ldr	r3, [r4, #12]
 800cfec:	9903      	ldr	r1, [sp, #12]
 800cfee:	1a5b      	subs	r3, r3, r1
 800cff0:	42ab      	cmp	r3, r5
 800cff2:	dcf2      	bgt.n	800cfda <_printf_i+0x212>
 800cff4:	e7eb      	b.n	800cfce <_printf_i+0x206>
 800cff6:	2500      	movs	r5, #0
 800cff8:	f104 0619 	add.w	r6, r4, #25
 800cffc:	e7f5      	b.n	800cfea <_printf_i+0x222>
 800cffe:	bf00      	nop
 800d000:	0800db7d 	.word	0x0800db7d
 800d004:	0800db8e 	.word	0x0800db8e

0800d008 <__sflush_r>:
 800d008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	0716      	lsls	r6, r2, #28
 800d012:	4605      	mov	r5, r0
 800d014:	460c      	mov	r4, r1
 800d016:	d454      	bmi.n	800d0c2 <__sflush_r+0xba>
 800d018:	684b      	ldr	r3, [r1, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dc02      	bgt.n	800d024 <__sflush_r+0x1c>
 800d01e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d020:	2b00      	cmp	r3, #0
 800d022:	dd48      	ble.n	800d0b6 <__sflush_r+0xae>
 800d024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d026:	2e00      	cmp	r6, #0
 800d028:	d045      	beq.n	800d0b6 <__sflush_r+0xae>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d030:	682f      	ldr	r7, [r5, #0]
 800d032:	6a21      	ldr	r1, [r4, #32]
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	d030      	beq.n	800d09a <__sflush_r+0x92>
 800d038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	0759      	lsls	r1, r3, #29
 800d03e:	d505      	bpl.n	800d04c <__sflush_r+0x44>
 800d040:	6863      	ldr	r3, [r4, #4]
 800d042:	1ad2      	subs	r2, r2, r3
 800d044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d046:	b10b      	cbz	r3, 800d04c <__sflush_r+0x44>
 800d048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d04a:	1ad2      	subs	r2, r2, r3
 800d04c:	2300      	movs	r3, #0
 800d04e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d050:	6a21      	ldr	r1, [r4, #32]
 800d052:	4628      	mov	r0, r5
 800d054:	47b0      	blx	r6
 800d056:	1c43      	adds	r3, r0, #1
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	d106      	bne.n	800d06a <__sflush_r+0x62>
 800d05c:	6829      	ldr	r1, [r5, #0]
 800d05e:	291d      	cmp	r1, #29
 800d060:	d82b      	bhi.n	800d0ba <__sflush_r+0xb2>
 800d062:	4a2a      	ldr	r2, [pc, #168]	@ (800d10c <__sflush_r+0x104>)
 800d064:	410a      	asrs	r2, r1
 800d066:	07d6      	lsls	r6, r2, #31
 800d068:	d427      	bmi.n	800d0ba <__sflush_r+0xb2>
 800d06a:	2200      	movs	r2, #0
 800d06c:	6062      	str	r2, [r4, #4]
 800d06e:	04d9      	lsls	r1, r3, #19
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	6022      	str	r2, [r4, #0]
 800d074:	d504      	bpl.n	800d080 <__sflush_r+0x78>
 800d076:	1c42      	adds	r2, r0, #1
 800d078:	d101      	bne.n	800d07e <__sflush_r+0x76>
 800d07a:	682b      	ldr	r3, [r5, #0]
 800d07c:	b903      	cbnz	r3, 800d080 <__sflush_r+0x78>
 800d07e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d082:	602f      	str	r7, [r5, #0]
 800d084:	b1b9      	cbz	r1, 800d0b6 <__sflush_r+0xae>
 800d086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08a:	4299      	cmp	r1, r3
 800d08c:	d002      	beq.n	800d094 <__sflush_r+0x8c>
 800d08e:	4628      	mov	r0, r5
 800d090:	f7ff fa9a 	bl	800c5c8 <_free_r>
 800d094:	2300      	movs	r3, #0
 800d096:	6363      	str	r3, [r4, #52]	@ 0x34
 800d098:	e00d      	b.n	800d0b6 <__sflush_r+0xae>
 800d09a:	2301      	movs	r3, #1
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b0      	blx	r6
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	1c50      	adds	r0, r2, #1
 800d0a4:	d1c9      	bne.n	800d03a <__sflush_r+0x32>
 800d0a6:	682b      	ldr	r3, [r5, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0c6      	beq.n	800d03a <__sflush_r+0x32>
 800d0ac:	2b1d      	cmp	r3, #29
 800d0ae:	d001      	beq.n	800d0b4 <__sflush_r+0xac>
 800d0b0:	2b16      	cmp	r3, #22
 800d0b2:	d11e      	bne.n	800d0f2 <__sflush_r+0xea>
 800d0b4:	602f      	str	r7, [r5, #0]
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e022      	b.n	800d100 <__sflush_r+0xf8>
 800d0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0be:	b21b      	sxth	r3, r3
 800d0c0:	e01b      	b.n	800d0fa <__sflush_r+0xf2>
 800d0c2:	690f      	ldr	r7, [r1, #16]
 800d0c4:	2f00      	cmp	r7, #0
 800d0c6:	d0f6      	beq.n	800d0b6 <__sflush_r+0xae>
 800d0c8:	0793      	lsls	r3, r2, #30
 800d0ca:	680e      	ldr	r6, [r1, #0]
 800d0cc:	bf08      	it	eq
 800d0ce:	694b      	ldreq	r3, [r1, #20]
 800d0d0:	600f      	str	r7, [r1, #0]
 800d0d2:	bf18      	it	ne
 800d0d4:	2300      	movne	r3, #0
 800d0d6:	eba6 0807 	sub.w	r8, r6, r7
 800d0da:	608b      	str	r3, [r1, #8]
 800d0dc:	f1b8 0f00 	cmp.w	r8, #0
 800d0e0:	dde9      	ble.n	800d0b6 <__sflush_r+0xae>
 800d0e2:	6a21      	ldr	r1, [r4, #32]
 800d0e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0e6:	4643      	mov	r3, r8
 800d0e8:	463a      	mov	r2, r7
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	47b0      	blx	r6
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	dc08      	bgt.n	800d104 <__sflush_r+0xfc>
 800d0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fa:	81a3      	strh	r3, [r4, #12]
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d104:	4407      	add	r7, r0
 800d106:	eba8 0800 	sub.w	r8, r8, r0
 800d10a:	e7e7      	b.n	800d0dc <__sflush_r+0xd4>
 800d10c:	dfbffffe 	.word	0xdfbffffe

0800d110 <_fflush_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	690b      	ldr	r3, [r1, #16]
 800d114:	4605      	mov	r5, r0
 800d116:	460c      	mov	r4, r1
 800d118:	b913      	cbnz	r3, 800d120 <_fflush_r+0x10>
 800d11a:	2500      	movs	r5, #0
 800d11c:	4628      	mov	r0, r5
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	b118      	cbz	r0, 800d12a <_fflush_r+0x1a>
 800d122:	6a03      	ldr	r3, [r0, #32]
 800d124:	b90b      	cbnz	r3, 800d12a <_fflush_r+0x1a>
 800d126:	f7fe ff83 	bl	800c030 <__sinit>
 800d12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d0f3      	beq.n	800d11a <_fflush_r+0xa>
 800d132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d134:	07d0      	lsls	r0, r2, #31
 800d136:	d404      	bmi.n	800d142 <_fflush_r+0x32>
 800d138:	0599      	lsls	r1, r3, #22
 800d13a:	d402      	bmi.n	800d142 <_fflush_r+0x32>
 800d13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d13e:	f7ff fa2a 	bl	800c596 <__retarget_lock_acquire_recursive>
 800d142:	4628      	mov	r0, r5
 800d144:	4621      	mov	r1, r4
 800d146:	f7ff ff5f 	bl	800d008 <__sflush_r>
 800d14a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d14c:	07da      	lsls	r2, r3, #31
 800d14e:	4605      	mov	r5, r0
 800d150:	d4e4      	bmi.n	800d11c <_fflush_r+0xc>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	059b      	lsls	r3, r3, #22
 800d156:	d4e1      	bmi.n	800d11c <_fflush_r+0xc>
 800d158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d15a:	f7ff fa1d 	bl	800c598 <__retarget_lock_release_recursive>
 800d15e:	e7dd      	b.n	800d11c <_fflush_r+0xc>

0800d160 <__swhatbuf_r>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	460c      	mov	r4, r1
 800d164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d168:	2900      	cmp	r1, #0
 800d16a:	b096      	sub	sp, #88	@ 0x58
 800d16c:	4615      	mov	r5, r2
 800d16e:	461e      	mov	r6, r3
 800d170:	da0d      	bge.n	800d18e <__swhatbuf_r+0x2e>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d178:	f04f 0100 	mov.w	r1, #0
 800d17c:	bf14      	ite	ne
 800d17e:	2340      	movne	r3, #64	@ 0x40
 800d180:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d184:	2000      	movs	r0, #0
 800d186:	6031      	str	r1, [r6, #0]
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	b016      	add	sp, #88	@ 0x58
 800d18c:	bd70      	pop	{r4, r5, r6, pc}
 800d18e:	466a      	mov	r2, sp
 800d190:	f000 f862 	bl	800d258 <_fstat_r>
 800d194:	2800      	cmp	r0, #0
 800d196:	dbec      	blt.n	800d172 <__swhatbuf_r+0x12>
 800d198:	9901      	ldr	r1, [sp, #4]
 800d19a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d19e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1a2:	4259      	negs	r1, r3
 800d1a4:	4159      	adcs	r1, r3
 800d1a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1aa:	e7eb      	b.n	800d184 <__swhatbuf_r+0x24>

0800d1ac <__smakebuf_r>:
 800d1ac:	898b      	ldrh	r3, [r1, #12]
 800d1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1b0:	079d      	lsls	r5, r3, #30
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	d507      	bpl.n	800d1c8 <__smakebuf_r+0x1c>
 800d1b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	6123      	str	r3, [r4, #16]
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	6163      	str	r3, [r4, #20]
 800d1c4:	b003      	add	sp, #12
 800d1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c8:	ab01      	add	r3, sp, #4
 800d1ca:	466a      	mov	r2, sp
 800d1cc:	f7ff ffc8 	bl	800d160 <__swhatbuf_r>
 800d1d0:	9f00      	ldr	r7, [sp, #0]
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7ff fa62 	bl	800c6a0 <_malloc_r>
 800d1dc:	b948      	cbnz	r0, 800d1f2 <__smakebuf_r+0x46>
 800d1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e2:	059a      	lsls	r2, r3, #22
 800d1e4:	d4ee      	bmi.n	800d1c4 <__smakebuf_r+0x18>
 800d1e6:	f023 0303 	bic.w	r3, r3, #3
 800d1ea:	f043 0302 	orr.w	r3, r3, #2
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	e7e2      	b.n	800d1b8 <__smakebuf_r+0xc>
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	6020      	str	r0, [r4, #0]
 800d1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1fa:	81a3      	strh	r3, [r4, #12]
 800d1fc:	9b01      	ldr	r3, [sp, #4]
 800d1fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d202:	b15b      	cbz	r3, 800d21c <__smakebuf_r+0x70>
 800d204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d208:	4630      	mov	r0, r6
 800d20a:	f000 f837 	bl	800d27c <_isatty_r>
 800d20e:	b128      	cbz	r0, 800d21c <__smakebuf_r+0x70>
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	f023 0303 	bic.w	r3, r3, #3
 800d216:	f043 0301 	orr.w	r3, r3, #1
 800d21a:	81a3      	strh	r3, [r4, #12]
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	431d      	orrs	r5, r3
 800d220:	81a5      	strh	r5, [r4, #12]
 800d222:	e7cf      	b.n	800d1c4 <__smakebuf_r+0x18>

0800d224 <memmove>:
 800d224:	4288      	cmp	r0, r1
 800d226:	b510      	push	{r4, lr}
 800d228:	eb01 0402 	add.w	r4, r1, r2
 800d22c:	d902      	bls.n	800d234 <memmove+0x10>
 800d22e:	4284      	cmp	r4, r0
 800d230:	4623      	mov	r3, r4
 800d232:	d807      	bhi.n	800d244 <memmove+0x20>
 800d234:	1e43      	subs	r3, r0, #1
 800d236:	42a1      	cmp	r1, r4
 800d238:	d008      	beq.n	800d24c <memmove+0x28>
 800d23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d242:	e7f8      	b.n	800d236 <memmove+0x12>
 800d244:	4402      	add	r2, r0
 800d246:	4601      	mov	r1, r0
 800d248:	428a      	cmp	r2, r1
 800d24a:	d100      	bne.n	800d24e <memmove+0x2a>
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d256:	e7f7      	b.n	800d248 <memmove+0x24>

0800d258 <_fstat_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d07      	ldr	r5, [pc, #28]	@ (800d278 <_fstat_r+0x20>)
 800d25c:	2300      	movs	r3, #0
 800d25e:	4604      	mov	r4, r0
 800d260:	4608      	mov	r0, r1
 800d262:	4611      	mov	r1, r2
 800d264:	602b      	str	r3, [r5, #0]
 800d266:	f7f4 f834 	bl	80012d2 <_fstat>
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	d102      	bne.n	800d274 <_fstat_r+0x1c>
 800d26e:	682b      	ldr	r3, [r5, #0]
 800d270:	b103      	cbz	r3, 800d274 <_fstat_r+0x1c>
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	bd38      	pop	{r3, r4, r5, pc}
 800d276:	bf00      	nop
 800d278:	20005958 	.word	0x20005958

0800d27c <_isatty_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4d06      	ldr	r5, [pc, #24]	@ (800d298 <_isatty_r+0x1c>)
 800d280:	2300      	movs	r3, #0
 800d282:	4604      	mov	r4, r0
 800d284:	4608      	mov	r0, r1
 800d286:	602b      	str	r3, [r5, #0]
 800d288:	f7f4 f833 	bl	80012f2 <_isatty>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_isatty_r+0x1a>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_isatty_r+0x1a>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	20005958 	.word	0x20005958

0800d29c <_sbrk_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d06      	ldr	r5, [pc, #24]	@ (800d2b8 <_sbrk_r+0x1c>)
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	602b      	str	r3, [r5, #0]
 800d2a8:	f7f4 f83c 	bl	8001324 <_sbrk>
 800d2ac:	1c43      	adds	r3, r0, #1
 800d2ae:	d102      	bne.n	800d2b6 <_sbrk_r+0x1a>
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	b103      	cbz	r3, 800d2b6 <_sbrk_r+0x1a>
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	bd38      	pop	{r3, r4, r5, pc}
 800d2b8:	20005958 	.word	0x20005958

0800d2bc <_realloc_r>:
 800d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c0:	4680      	mov	r8, r0
 800d2c2:	4615      	mov	r5, r2
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	b921      	cbnz	r1, 800d2d2 <_realloc_r+0x16>
 800d2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	f7ff b9e7 	b.w	800c6a0 <_malloc_r>
 800d2d2:	b92a      	cbnz	r2, 800d2e0 <_realloc_r+0x24>
 800d2d4:	f7ff f978 	bl	800c5c8 <_free_r>
 800d2d8:	2400      	movs	r4, #0
 800d2da:	4620      	mov	r0, r4
 800d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e0:	f000 f81a 	bl	800d318 <_malloc_usable_size_r>
 800d2e4:	4285      	cmp	r5, r0
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	d802      	bhi.n	800d2f0 <_realloc_r+0x34>
 800d2ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2ee:	d8f4      	bhi.n	800d2da <_realloc_r+0x1e>
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	f7ff f9d4 	bl	800c6a0 <_malloc_r>
 800d2f8:	4607      	mov	r7, r0
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d0ec      	beq.n	800d2d8 <_realloc_r+0x1c>
 800d2fe:	42b5      	cmp	r5, r6
 800d300:	462a      	mov	r2, r5
 800d302:	4621      	mov	r1, r4
 800d304:	bf28      	it	cs
 800d306:	4632      	movcs	r2, r6
 800d308:	f7ff f94f 	bl	800c5aa <memcpy>
 800d30c:	4621      	mov	r1, r4
 800d30e:	4640      	mov	r0, r8
 800d310:	f7ff f95a 	bl	800c5c8 <_free_r>
 800d314:	463c      	mov	r4, r7
 800d316:	e7e0      	b.n	800d2da <_realloc_r+0x1e>

0800d318 <_malloc_usable_size_r>:
 800d318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d31c:	1f18      	subs	r0, r3, #4
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfbc      	itt	lt
 800d322:	580b      	ldrlt	r3, [r1, r0]
 800d324:	18c0      	addlt	r0, r0, r3
 800d326:	4770      	bx	lr

0800d328 <_init>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	bf00      	nop
 800d32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32e:	bc08      	pop	{r3}
 800d330:	469e      	mov	lr, r3
 800d332:	4770      	bx	lr

0800d334 <_fini>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	bf00      	nop
 800d338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33a:	bc08      	pop	{r3}
 800d33c:	469e      	mov	lr, r3
 800d33e:	4770      	bx	lr
